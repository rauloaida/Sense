
/Users/rauloaida/Documents/GitHub/Sense/target/3.1.0/bsom/Sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002044  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b6060  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e660  000b6064  0001e660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000124  2003e6cc  2003e6cc  0002e6cc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b60d0  000b60d0  000260d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b60f8  000b60f8  000260f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f781c  00000000  00000000  000260fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00010bfa  00000000  00000000  0011d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00035f7f  00000000  00000000  0012e512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002890  00000000  00000000  00164491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009d30  00000000  00000000  00166d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003328c  00000000  00000000  00170a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00035717  00000000  00000000  001a3cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00129edc  00000000  00000000  001d93f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007188  00000000  00000000  003032d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fd65 	bl	b5afc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fd6d 	bl	b5b18 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e660 	.word	0x2003e660
   b4048:	000b6064 	.word	0x000b6064
   b404c:	2003e6cc 	.word	0x2003e6cc
   b4050:	2003e6cc 	.word	0x2003e6cc
   b4054:	2003e7f0 	.word	0x2003e7f0

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fc4b 	bl	b58f8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42a5      	cmp	r5, r4
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b603c 	.word	0x000b603c
   b407c:	000b6060 	.word	0x000b6060

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b824 	b.w	b40cc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f855 	bl	b4134 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bbeb 	b.w	b5868 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bc1f 	b.w	b48d4 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bc1d 	b.w	b48d4 <malloc>

000b409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409a:	f000 bc23 	b.w	b48e4 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40b0:	b513      	push	{r0, r1, r4, lr}
   b40b2:	4b05      	ldr	r3, [pc, #20]	; (b40c8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b40b4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40b6:	f88d 3000 	strb.w	r3, [sp]
   b40ba:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40bc:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40be:	f000 fe2b 	bl	b4d18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b40c2:	4620      	mov	r0, r4
   b40c4:	b002      	add	sp, #8
   b40c6:	bd10      	pop	{r4, pc}
   b40c8:	2003e6d0 	.word	0x2003e6d0

000b40cc <setup>:
int Test(String command);



void setup()
{
   b40cc:	b508      	push	{r3, lr}
  Serial.begin(9600);
   b40ce:	f001 fb7f 	bl	b57d0 <_Z16_fetch_usbserialv>
   b40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d6:	f001 fb6f 	bl	b57b8 <_ZN9USBSerial5beginEl>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b40da:	4a08      	ldr	r2, [pc, #32]	; (b40fc <setup+0x30>)
   b40dc:	4908      	ldr	r1, [pc, #32]	; (b4100 <setup+0x34>)
   b40de:	4809      	ldr	r0, [pc, #36]	; (b4104 <setup+0x38>)
   b40e0:	f000 fd23 	bl	b4b2a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Fan Override", Test);
  Serial1.begin(9600);// initialize UART to MR Logic PCBA
   b40e4:	f001 fad2 	bl	b568c <_Z22__fetch_global_Serial1v>
   b40e8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40ec:	f001 faca 	bl	b5684 <_ZN11USARTSerial5beginEm>
  pinMode(PIN_TO_SENSOR, INPUT_PULLDOWN); // set pinmode
}
   b40f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(PIN_TO_SENSOR, INPUT_PULLDOWN); // set pinmode
   b40f4:	2103      	movs	r1, #3
   b40f6:	201c      	movs	r0, #28
   b40f8:	f001 bc6e 	b.w	b59d8 <pinMode>
   b40fc:	000b5bf8 	.word	0x000b5bf8
   b4100:	000b4359 	.word	0x000b4359
   b4104:	000b4aff 	.word	0x000b4aff

000b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4108:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b410a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b410c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b410e:	b17c      	cbz	r4, b4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4110:	6863      	ldr	r3, [r4, #4]
   b4112:	3b01      	subs	r3, #1
   b4114:	6063      	str	r3, [r4, #4]
   b4116:	b95b      	cbnz	r3, b4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4118:	6823      	ldr	r3, [r4, #0]
   b411a:	4620      	mov	r0, r4
   b411c:	689b      	ldr	r3, [r3, #8]
   b411e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4120:	68a3      	ldr	r3, [r4, #8]
   b4122:	3b01      	subs	r3, #1
   b4124:	60a3      	str	r3, [r4, #8]
   b4126:	b91b      	cbnz	r3, b4130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4128:	6823      	ldr	r3, [r4, #0]
   b412a:	4620      	mov	r0, r4
   b412c:	68db      	ldr	r3, [r3, #12]
   b412e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4130:	4628      	mov	r0, r5
   b4132:	bd38      	pop	{r3, r4, r5, pc}

000b4134 <loop>:

void loop()
{
   b4134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t value = EEPROM.read(0);
   b4136:	f001 fc73 	bl	b5a20 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b413a:	2000      	movs	r0, #0
   b413c:	f000 fa0e 	bl	b455c <HAL_EEPROM_Read>
   b4140:	4604      	mov	r4, r0
  uint8_t value1 = EEPROM.read(1); //reads the EEPROM byte on address 0 and publishes it to cloud. 
   b4142:	f001 fc6d 	bl	b5a20 <_Z21__fetch_global_EEPROMv>
   b4146:	2001      	movs	r0, #1
   b4148:	f000 fa08 	bl	b455c <HAL_EEPROM_Read>
  //Particle.publish("Fan Override State", String(value));
  //Particle.publish("Fan Speed", String(value1));

if (value == 0){
   b414c:	bb14      	cbnz	r4, b4194 <loop+0x60>
  Particle.publish("Testing stuff!", "running first loop bc fan override is 0");
   b414e:	4a69      	ldr	r2, [pc, #420]	; (b42f4 <loop+0x1c0>)
   b4150:	4969      	ldr	r1, [pc, #420]	; (b42f8 <loop+0x1c4>)
  pinStateCurrent =! digitalRead(PIN_TO_SENSOR);   // read new state
   b4152:	4c6a      	ldr	r4, [pc, #424]	; (b42fc <loop+0x1c8>)
  Particle.publish("Testing stuff!", "running first loop bc fan override is 0");
   b4154:	4668      	mov	r0, sp
   b4156:	f7ff ffab 	bl	b40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b415a:	a801      	add	r0, sp, #4
   b415c:	f7ff ffd4 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  pinStateCurrent =! digitalRead(PIN_TO_SENSOR);   // read new state
   b4160:	201c      	movs	r0, #28
   b4162:	f001 fc4a 	bl	b59fa <digitalRead>
   b4166:	fab0 f080 	clz	r0, r0
   b416a:	0940      	lsrs	r0, r0, #5
   b416c:	6020      	str	r0, [r4, #0]
  Serial.print(pinStateCurrent);
   b416e:	f001 fb2f 	bl	b57d0 <_Z16_fetch_usbserialv>
   b4172:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4174:	2c00      	cmp	r4, #0
   b4176:	4605      	mov	r5, r0
   b4178:	da0a      	bge.n	b4190 <loop+0x5c>
            t = print('-');
   b417a:	212d      	movs	r1, #45	; 0x2d
   b417c:	f001 f912 	bl	b53a4 <_ZN5Print5printEc>
            val = -n;
   b4180:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4182:	220a      	movs	r2, #10
   b4184:	4628      	mov	r0, r5


}


}
   b4186:	b003      	add	sp, #12
   b4188:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b418c:	f001 b923 	b.w	b53d6 <_ZN5Print11printNumberEmh>
            val = n;
   b4190:	4621      	mov	r1, r4
   b4192:	e7f6      	b.n	b4182 <loop+0x4e>
if (value == 1){
   b4194:	2c01      	cmp	r4, #1
   b4196:	f040 80aa 	bne.w	b42ee <loop+0x1ba>
  Particle.publish("Testing stuff!", "running 2nd loop, value is 1");
   b419a:	4a59      	ldr	r2, [pc, #356]	; (b4300 <loop+0x1cc>)
   b419c:	4956      	ldr	r1, [pc, #344]	; (b42f8 <loop+0x1c4>)
  pinStatePrevious = pinStateCurrent; // store state
   b419e:	4d57      	ldr	r5, [pc, #348]	; (b42fc <loop+0x1c8>)
   b41a0:	4f58      	ldr	r7, [pc, #352]	; (b4304 <loop+0x1d0>)
  Particle.publish("Testing stuff!", "running 2nd loop, value is 1");
   b41a2:	4668      	mov	r0, sp
   b41a4:	f7ff ff84 	bl	b40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b41a8:	a801      	add	r0, sp, #4
   b41aa:	f7ff ffad 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  pinStatePrevious = pinStateCurrent; // store state
   b41ae:	682b      	ldr	r3, [r5, #0]
   b41b0:	603b      	str	r3, [r7, #0]
  pinStateCurrent =! digitalRead(PIN_TO_SENSOR);   // read new state
   b41b2:	201c      	movs	r0, #28
   b41b4:	f001 fc21 	bl	b59fa <digitalRead>
   b41b8:	fab0 f080 	clz	r0, r0
   b41bc:	0940      	lsrs	r0, r0, #5
   b41be:	6028      	str	r0, [r5, #0]
  Serial.print(pinStateCurrent);
   b41c0:	f001 fb06 	bl	b57d0 <_Z16_fetch_usbserialv>
   b41c4:	682c      	ldr	r4, [r5, #0]
        if (n < 0 && base == 10) {
   b41c6:	2c00      	cmp	r4, #0
   b41c8:	4606      	mov	r6, r0
   b41ca:	da7d      	bge.n	b42c8 <loop+0x194>
            t = print('-');
   b41cc:	212d      	movs	r1, #45	; 0x2d
   b41ce:	f001 f8e9 	bl	b53a4 <_ZN5Print5printEc>
            val = -n;
   b41d2:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41d4:	4630      	mov	r0, r6
   b41d6:	220a      	movs	r2, #10
   b41d8:	f001 f8fd 	bl	b53d6 <_ZN5Print11printNumberEmh>
  if (pinStatePrevious == LOW && pinStateCurrent == HIGH) {   // pin state change: LOW -> HIGH
   b41dc:	683f      	ldr	r7, [r7, #0]
   b41de:	4c4a      	ldr	r4, [pc, #296]	; (b4308 <loop+0x1d4>)
   b41e0:	4e4a      	ldr	r6, [pc, #296]	; (b430c <loop+0x1d8>)
   b41e2:	2f00      	cmp	r7, #0
   b41e4:	d172      	bne.n	b42cc <loop+0x198>
   b41e6:	682d      	ldr	r5, [r5, #0]
   b41e8:	2d01      	cmp	r5, #1
   b41ea:	d11a      	bne.n	b4222 <loop+0xee>
    Serial.println("Motion detected!");
   b41ec:	f001 faf0 	bl	b57d0 <_Z16_fetch_usbserialv>
   b41f0:	4947      	ldr	r1, [pc, #284]	; (b4310 <loop+0x1dc>)
   b41f2:	f001 f8e6 	bl	b53c2 <_ZN5Print7printlnEPKc>
    Serial1.print("F");
   b41f6:	f001 fa49 	bl	b568c <_Z22__fetch_global_Serial1v>
   b41fa:	4946      	ldr	r1, [pc, #280]	; (b4314 <loop+0x1e0>)
   b41fc:	f001 f8ce 	bl	b539c <_ZN5Print5printEPKc>
    Serial1.print("030");
   b4200:	f001 fa44 	bl	b568c <_Z22__fetch_global_Serial1v>
   b4204:	4944      	ldr	r1, [pc, #272]	; (b4318 <loop+0x1e4>)
   b4206:	f001 f8c9 	bl	b539c <_ZN5Print5printEPKc>
    Serial.println("Turned fans to 30%");
   b420a:	f001 fae1 	bl	b57d0 <_Z16_fetch_usbserialv>
   b420e:	4943      	ldr	r1, [pc, #268]	; (b431c <loop+0x1e8>)
   b4210:	f001 f8d7 	bl	b53c2 <_ZN5Print7printlnEPKc>
    delayEnabled = false; // disable delay
   b4214:	7027      	strb	r7, [r4, #0]
    lightsCondition1 = true;
   b4216:	7035      	strb	r5, [r6, #0]
    Serial.println("Motion detected! lightsCondition_1 set to true");
   b4218:	f001 fada 	bl	b57d0 <_Z16_fetch_usbserialv>
   b421c:	4940      	ldr	r1, [pc, #256]	; (b4320 <loop+0x1ec>)
   b421e:	f001 f8d0 	bl	b53c2 <_ZN5Print7printlnEPKc>
  if (lightsCondition1 == true && lightsCondition2 == true) {
   b4222:	7833      	ldrb	r3, [r6, #0]
   b4224:	b1cb      	cbz	r3, b425a <loop+0x126>
   b4226:	4d3f      	ldr	r5, [pc, #252]	; (b4324 <loop+0x1f0>)
   b4228:	782b      	ldrb	r3, [r5, #0]
   b422a:	b1b3      	cbz	r3, b425a <loop+0x126>
    Serial1.print("M");
   b422c:	f001 fa2e 	bl	b568c <_Z22__fetch_global_Serial1v>
   b4230:	493d      	ldr	r1, [pc, #244]	; (b4328 <loop+0x1f4>)
   b4232:	f001 f8b3 	bl	b539c <_ZN5Print5printEPKc>
    Serial.println("both light conditions true, set lights to M mode");
   b4236:	f001 facb 	bl	b57d0 <_Z16_fetch_usbserialv>
   b423a:	493c      	ldr	r1, [pc, #240]	; (b432c <loop+0x1f8>)
   b423c:	f001 f8c1 	bl	b53c2 <_ZN5Print7printlnEPKc>
    lightsCondition1 = false;
   b4240:	2300      	movs	r3, #0
   b4242:	7033      	strb	r3, [r6, #0]
    lightsCondition2 = false;
   b4244:	702b      	strb	r3, [r5, #0]
    Serial.println("lightsCondition_1 reset to false");
   b4246:	f001 fac3 	bl	b57d0 <_Z16_fetch_usbserialv>
   b424a:	4939      	ldr	r1, [pc, #228]	; (b4330 <loop+0x1fc>)
   b424c:	f001 f8b9 	bl	b53c2 <_ZN5Print7printlnEPKc>
    Serial.println("lightsCondition_2 reset to false");
   b4250:	f001 fabe 	bl	b57d0 <_Z16_fetch_usbserialv>
   b4254:	4937      	ldr	r1, [pc, #220]	; (b4334 <loop+0x200>)
   b4256:	f001 f8b4 	bl	b53c2 <_ZN5Print7printlnEPKc>
  if (delayEnabled == true && (millis() - delayStartTime) >= DELAY_TIME_MS) {
   b425a:	7823      	ldrb	r3, [r4, #0]
   b425c:	2b00      	cmp	r3, #0
   b425e:	d046      	beq.n	b42ee <loop+0x1ba>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4260:	f000 f96c 	bl	b453c <HAL_Timer_Get_Milli_Seconds>
   b4264:	4b34      	ldr	r3, [pc, #208]	; (b4338 <loop+0x204>)
   b4266:	681b      	ldr	r3, [r3, #0]
   b4268:	1ac0      	subs	r0, r0, r3
   b426a:	f242 730f 	movw	r3, #9999	; 0x270f
   b426e:	4298      	cmp	r0, r3
   b4270:	d93d      	bls.n	b42ee <loop+0x1ba>
    Serial.println("No motion for 15 min! turning stuff off");
   b4272:	f001 faad 	bl	b57d0 <_Z16_fetch_usbserialv>
   b4276:	4931      	ldr	r1, [pc, #196]	; (b433c <loop+0x208>)
   b4278:	f001 f8a3 	bl	b53c2 <_ZN5Print7printlnEPKc>
    Serial1.print("O");
   b427c:	f001 fa06 	bl	b568c <_Z22__fetch_global_Serial1v>
   b4280:	492f      	ldr	r1, [pc, #188]	; (b4340 <loop+0x20c>)
   b4282:	f001 f88b 	bl	b539c <_ZN5Print5printEPKc>
    Serial.println("Set lights to OFF");
   b4286:	f001 faa3 	bl	b57d0 <_Z16_fetch_usbserialv>
   b428a:	492e      	ldr	r1, [pc, #184]	; (b4344 <loop+0x210>)
   b428c:	f001 f899 	bl	b53c2 <_ZN5Print7printlnEPKc>
    Serial1.print("F");
   b4290:	f001 f9fc 	bl	b568c <_Z22__fetch_global_Serial1v>
   b4294:	491f      	ldr	r1, [pc, #124]	; (b4314 <loop+0x1e0>)
   b4296:	f001 f881 	bl	b539c <_ZN5Print5printEPKc>
    Serial1.print("000");
   b429a:	f001 f9f7 	bl	b568c <_Z22__fetch_global_Serial1v>
   b429e:	492a      	ldr	r1, [pc, #168]	; (b4348 <loop+0x214>)
   b42a0:	f001 f87c 	bl	b539c <_ZN5Print5printEPKc>
    Serial.println("Fans set to 0%");
   b42a4:	f001 fa94 	bl	b57d0 <_Z16_fetch_usbserialv>
   b42a8:	4928      	ldr	r1, [pc, #160]	; (b434c <loop+0x218>)
   b42aa:	f001 f88a 	bl	b53c2 <_ZN5Print7printlnEPKc>
    delayEnabled = false; // disable delay
   b42ae:	2300      	movs	r3, #0
   b42b0:	7023      	strb	r3, [r4, #0]
    lightsCondition2 = true;
   b42b2:	4b1c      	ldr	r3, [pc, #112]	; (b4324 <loop+0x1f0>)
   b42b4:	2201      	movs	r2, #1
   b42b6:	701a      	strb	r2, [r3, #0]
    Serial.println("lightsCondition_2 set to true");
   b42b8:	f001 fa8a 	bl	b57d0 <_Z16_fetch_usbserialv>
   b42bc:	4924      	ldr	r1, [pc, #144]	; (b4350 <loop+0x21c>)
}
   b42be:	b003      	add	sp, #12
   b42c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Serial.println("lightsCondition_2 set to true");
   b42c4:	f001 b87d 	b.w	b53c2 <_ZN5Print7printlnEPKc>
            val = n;
   b42c8:	4621      	mov	r1, r4
   b42ca:	e783      	b.n	b41d4 <loop+0xa0>
  if (pinStatePrevious == HIGH && pinStateCurrent == LOW) {   // pin state change: HIGH -> LOW
   b42cc:	2f01      	cmp	r7, #1
   b42ce:	d1a8      	bne.n	b4222 <loop+0xee>
   b42d0:	682d      	ldr	r5, [r5, #0]
   b42d2:	2d00      	cmp	r5, #0
   b42d4:	d1a5      	bne.n	b4222 <loop+0xee>
    Serial.println("Motion stopped! lightCondition_1 set to false");
   b42d6:	f001 fa7b 	bl	b57d0 <_Z16_fetch_usbserialv>
   b42da:	491e      	ldr	r1, [pc, #120]	; (b4354 <loop+0x220>)
   b42dc:	f001 f871 	bl	b53c2 <_ZN5Print7printlnEPKc>
    delayEnabled = true; // enable delay
   b42e0:	7027      	strb	r7, [r4, #0]
    lightsCondition1 = false;
   b42e2:	7035      	strb	r5, [r6, #0]
   b42e4:	f000 f92a 	bl	b453c <HAL_Timer_Get_Milli_Seconds>
    delayStartTime = millis(); // set start time
   b42e8:	4b13      	ldr	r3, [pc, #76]	; (b4338 <loop+0x204>)
   b42ea:	6018      	str	r0, [r3, #0]
   b42ec:	e799      	b.n	b4222 <loop+0xee>
}
   b42ee:	b003      	add	sp, #12
   b42f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b42f2:	bf00      	nop
   b42f4:	000b5c05 	.word	0x000b5c05
   b42f8:	000b5c2d 	.word	0x000b5c2d
   b42fc:	2003e70c 	.word	0x2003e70c
   b4300:	000b5c3c 	.word	0x000b5c3c
   b4304:	2003e710 	.word	0x2003e710
   b4308:	2003e660 	.word	0x2003e660
   b430c:	2003e708 	.word	0x2003e708
   b4310:	000b5c59 	.word	0x000b5c59
   b4314:	000b5d8d 	.word	0x000b5d8d
   b4318:	000b5c6a 	.word	0x000b5c6a
   b431c:	000b5c6e 	.word	0x000b5c6e
   b4320:	000b5c81 	.word	0x000b5c81
   b4324:	2003e709 	.word	0x2003e709
   b4328:	000b5cde 	.word	0x000b5cde
   b432c:	000b5ce0 	.word	0x000b5ce0
   b4330:	000b5d11 	.word	0x000b5d11
   b4334:	000b5d32 	.word	0x000b5d32
   b4338:	2003e6d4 	.word	0x2003e6d4
   b433c:	000b5d53 	.word	0x000b5d53
   b4340:	000b5d7b 	.word	0x000b5d7b
   b4344:	000b5d7d 	.word	0x000b5d7d
   b4348:	000b5d8f 	.word	0x000b5d8f
   b434c:	000b5d93 	.word	0x000b5d93
   b4350:	000b5da2 	.word	0x000b5da2
   b4354:	000b5cb0 	.word	0x000b5cb0

000b4358 <_Z4Test6String>:



//--------------------------------------FAN OVERRIDE SECTION----------------------------------------//
int Test(String command)
{
   b4358:	b530      	push	{r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b435a:	4940      	ldr	r1, [pc, #256]	; (b445c <_Z4Test6String+0x104>)
   b435c:	b085      	sub	sp, #20
   b435e:	4604      	mov	r4, r0
   b4360:	f001 f8ef 	bl	b5542 <_ZNK6String6equalsEPKc>
  if(command == "true")   //if cmd from cloud is true, permanently sets EEPROM byte on address 0 to 1;
   b4364:	4605      	mov	r5, r0
   b4366:	b1d0      	cbz	r0, b439e <_Z4Test6String+0x46>
  {
    Serial.print("fan override true");  
   b4368:	f001 fa32 	bl	b57d0 <_Z16_fetch_usbserialv>
    int addr = 0;
    uint16_t value = 1;
   b436c:	2401      	movs	r4, #1
    Serial.print("fan override true");  
   b436e:	493c      	ldr	r1, [pc, #240]	; (b4460 <_Z4Test6String+0x108>)
   b4370:	f001 f814 	bl	b539c <_ZN5Print5printEPKc>
    uint16_t value = 1;
   b4374:	f8ad 4006 	strh.w	r4, [sp, #6]
    EEPROM.put(addr, value);
   b4378:	f001 fb52 	bl	b5a20 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b437c:	2202      	movs	r2, #2
   b437e:	f10d 0106 	add.w	r1, sp, #6
   b4382:	2000      	movs	r0, #0
   b4384:	f000 f8f2 	bl	b456c <HAL_EEPROM_Put>
    Particle.publish("Fan Override", "true");
   b4388:	4a34      	ldr	r2, [pc, #208]	; (b445c <_Z4Test6String+0x104>)
  } else if (command == "false") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
    Serial.print("fan override false");
    int addr = 0;
    uint16_t value = 0;
    EEPROM.put(addr, value);
    Particle.publish("Fan Override", "false");
   b438a:	4936      	ldr	r1, [pc, #216]	; (b4464 <_Z4Test6String+0x10c>)
  } else if (command == "high") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
    Serial.print("fan speed high");
    int addr = 1;
    uint16_t value = 3;
    EEPROM.put(addr, value);
    Particle.publish("Fan Speed", "High");
   b438c:	a802      	add	r0, sp, #8
   b438e:	f7ff fe8f 	bl	b40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4392:	a803      	add	r0, sp, #12
   b4394:	f7ff feb8 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return 1;
   b4398:	2001      	movs	r0, #1
  }

  
  else return -1;
}
   b439a:	b005      	add	sp, #20
   b439c:	bd30      	pop	{r4, r5, pc}
   b439e:	4932      	ldr	r1, [pc, #200]	; (b4468 <_Z4Test6String+0x110>)
   b43a0:	4620      	mov	r0, r4
   b43a2:	f001 f8ce 	bl	b5542 <_ZNK6String6equalsEPKc>
  } else if (command == "false") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
   b43a6:	b180      	cbz	r0, b43ca <_Z4Test6String+0x72>
    Serial.print("fan override false");
   b43a8:	f001 fa12 	bl	b57d0 <_Z16_fetch_usbserialv>
   b43ac:	492f      	ldr	r1, [pc, #188]	; (b446c <_Z4Test6String+0x114>)
   b43ae:	f000 fff5 	bl	b539c <_ZN5Print5printEPKc>
    uint16_t value = 0;
   b43b2:	f8ad 5006 	strh.w	r5, [sp, #6]
    EEPROM.put(addr, value);
   b43b6:	f001 fb33 	bl	b5a20 <_Z21__fetch_global_EEPROMv>
   b43ba:	2202      	movs	r2, #2
   b43bc:	f10d 0106 	add.w	r1, sp, #6
   b43c0:	4628      	mov	r0, r5
   b43c2:	f000 f8d3 	bl	b456c <HAL_EEPROM_Put>
    Particle.publish("Fan Override", "false");
   b43c6:	4a28      	ldr	r2, [pc, #160]	; (b4468 <_Z4Test6String+0x110>)
   b43c8:	e7df      	b.n	b438a <_Z4Test6String+0x32>
   b43ca:	4929      	ldr	r1, [pc, #164]	; (b4470 <_Z4Test6String+0x118>)
   b43cc:	4620      	mov	r0, r4
   b43ce:	f001 f8b8 	bl	b5542 <_ZNK6String6equalsEPKc>
    else if(command == "low") { //if cmd from cloud is true, permanently sets EEPROM byte on address 0 to 1;
   b43d2:	b190      	cbz	r0, b43fa <_Z4Test6String+0xa2>
    Serial.print("fan speed low");  
   b43d4:	f001 f9fc 	bl	b57d0 <_Z16_fetch_usbserialv>
    uint16_t value = 1;
   b43d8:	2401      	movs	r4, #1
    Serial.print("fan speed low");  
   b43da:	4926      	ldr	r1, [pc, #152]	; (b4474 <_Z4Test6String+0x11c>)
   b43dc:	f000 ffde 	bl	b539c <_ZN5Print5printEPKc>
    uint16_t value = 1;
   b43e0:	f8ad 4006 	strh.w	r4, [sp, #6]
    EEPROM.put(addr, value);
   b43e4:	f001 fb1c 	bl	b5a20 <_Z21__fetch_global_EEPROMv>
   b43e8:	2202      	movs	r2, #2
   b43ea:	f10d 0106 	add.w	r1, sp, #6
   b43ee:	4620      	mov	r0, r4
   b43f0:	f000 f8bc 	bl	b456c <HAL_EEPROM_Put>
    Particle.publish("Fan Speed", "Low");
   b43f4:	4a20      	ldr	r2, [pc, #128]	; (b4478 <_Z4Test6String+0x120>)
    Particle.publish("Fan Speed", "High");
   b43f6:	4921      	ldr	r1, [pc, #132]	; (b447c <_Z4Test6String+0x124>)
   b43f8:	e7c8      	b.n	b438c <_Z4Test6String+0x34>
   b43fa:	4921      	ldr	r1, [pc, #132]	; (b4480 <_Z4Test6String+0x128>)
   b43fc:	4620      	mov	r0, r4
   b43fe:	f001 f8a0 	bl	b5542 <_ZNK6String6equalsEPKc>
  } else if (command == "medium") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
   b4402:	b188      	cbz	r0, b4428 <_Z4Test6String+0xd0>
    Serial.print("fan speed medium");
   b4404:	f001 f9e4 	bl	b57d0 <_Z16_fetch_usbserialv>
    uint16_t value = 2;
   b4408:	2402      	movs	r4, #2
    Serial.print("fan speed medium");
   b440a:	491e      	ldr	r1, [pc, #120]	; (b4484 <_Z4Test6String+0x12c>)
   b440c:	f000 ffc6 	bl	b539c <_ZN5Print5printEPKc>
    uint16_t value = 2;
   b4410:	f8ad 4006 	strh.w	r4, [sp, #6]
    EEPROM.put(addr, value);
   b4414:	f001 fb04 	bl	b5a20 <_Z21__fetch_global_EEPROMv>
   b4418:	4622      	mov	r2, r4
   b441a:	f10d 0106 	add.w	r1, sp, #6
   b441e:	2001      	movs	r0, #1
   b4420:	f000 f8a4 	bl	b456c <HAL_EEPROM_Put>
    Particle.publish("Fan Speed", "Medium");
   b4424:	4a18      	ldr	r2, [pc, #96]	; (b4488 <_Z4Test6String+0x130>)
   b4426:	e7e6      	b.n	b43f6 <_Z4Test6String+0x9e>
   b4428:	4918      	ldr	r1, [pc, #96]	; (b448c <_Z4Test6String+0x134>)
   b442a:	4620      	mov	r0, r4
   b442c:	f001 f889 	bl	b5542 <_ZNK6String6equalsEPKc>
  } else if (command == "high") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
   b4430:	b188      	cbz	r0, b4456 <_Z4Test6String+0xfe>
    Serial.print("fan speed high");
   b4432:	f001 f9cd 	bl	b57d0 <_Z16_fetch_usbserialv>
   b4436:	4916      	ldr	r1, [pc, #88]	; (b4490 <_Z4Test6String+0x138>)
   b4438:	f000 ffb0 	bl	b539c <_ZN5Print5printEPKc>
    uint16_t value = 3;
   b443c:	2303      	movs	r3, #3
   b443e:	f8ad 3006 	strh.w	r3, [sp, #6]
    EEPROM.put(addr, value);
   b4442:	f001 faed 	bl	b5a20 <_Z21__fetch_global_EEPROMv>
   b4446:	2202      	movs	r2, #2
   b4448:	f10d 0106 	add.w	r1, sp, #6
   b444c:	2001      	movs	r0, #1
   b444e:	f000 f88d 	bl	b456c <HAL_EEPROM_Put>
    Particle.publish("Fan Speed", "High");
   b4452:	4a10      	ldr	r2, [pc, #64]	; (b4494 <_Z4Test6String+0x13c>)
   b4454:	e7cf      	b.n	b43f6 <_Z4Test6String+0x9e>
  else return -1;
   b4456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b445a:	e79e      	b.n	b439a <_Z4Test6String+0x42>
   b445c:	000b5dcd 	.word	0x000b5dcd
   b4460:	000b5dc0 	.word	0x000b5dc0
   b4464:	000b5bf8 	.word	0x000b5bf8
   b4468:	000b5ddf 	.word	0x000b5ddf
   b446c:	000b5dd2 	.word	0x000b5dd2
   b4470:	000b5def 	.word	0x000b5def
   b4474:	000b5de5 	.word	0x000b5de5
   b4478:	000b5df3 	.word	0x000b5df3
   b447c:	000b5df7 	.word	0x000b5df7
   b4480:	000b5e0b 	.word	0x000b5e0b
   b4484:	000b5e01 	.word	0x000b5e01
   b4488:	000b5e12 	.word	0x000b5e12
   b448c:	000b5e23 	.word	0x000b5e23
   b4490:	000b5e19 	.word	0x000b5e19
   b4494:	000b5e28 	.word	0x000b5e28

000b4498 <_GLOBAL__sub_I_pinStateCurrent>:
}
   b4498:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b449a:	4b13      	ldr	r3, [pc, #76]	; (b44e8 <_GLOBAL__sub_I_pinStateCurrent+0x50>)
String fanValHigh = "028";
   b449c:	4d13      	ldr	r5, [pc, #76]	; (b44ec <_GLOBAL__sub_I_pinStateCurrent+0x54>)
   b449e:	4c14      	ldr	r4, [pc, #80]	; (b44f0 <_GLOBAL__sub_I_pinStateCurrent+0x58>)
   b44a0:	2100      	movs	r1, #0
   b44a2:	7019      	strb	r1, [r3, #0]
SYSTEM_THREAD(ENABLED);
   b44a4:	2001      	movs	r0, #1
   b44a6:	f000 f969 	bl	b477c <system_thread_set_state>
String fanValHigh = "028";
   b44aa:	4912      	ldr	r1, [pc, #72]	; (b44f4 <_GLOBAL__sub_I_pinStateCurrent+0x5c>)
   b44ac:	4628      	mov	r0, r5
   b44ae:	f001 f81a 	bl	b54e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b44b2:	4628      	mov	r0, r5
String fanValMed = "015";
   b44b4:	4d10      	ldr	r5, [pc, #64]	; (b44f8 <_GLOBAL__sub_I_pinStateCurrent+0x60>)
String fanValHigh = "028";
   b44b6:	4a11      	ldr	r2, [pc, #68]	; (b44fc <_GLOBAL__sub_I_pinStateCurrent+0x64>)
   b44b8:	4621      	mov	r1, r4
   b44ba:	f001 fb05 	bl	b5ac8 <__aeabi_atexit>
String fanValMed = "015";
   b44be:	4910      	ldr	r1, [pc, #64]	; (b4500 <_GLOBAL__sub_I_pinStateCurrent+0x68>)
   b44c0:	4628      	mov	r0, r5
   b44c2:	f001 f810 	bl	b54e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b44c6:	4628      	mov	r0, r5
String fanValLow = "010";
   b44c8:	4d0e      	ldr	r5, [pc, #56]	; (b4504 <_GLOBAL__sub_I_pinStateCurrent+0x6c>)
String fanValMed = "015";
   b44ca:	4a0c      	ldr	r2, [pc, #48]	; (b44fc <_GLOBAL__sub_I_pinStateCurrent+0x64>)
   b44cc:	4621      	mov	r1, r4
   b44ce:	f001 fafb 	bl	b5ac8 <__aeabi_atexit>
String fanValLow = "010";
   b44d2:	490d      	ldr	r1, [pc, #52]	; (b4508 <_GLOBAL__sub_I_pinStateCurrent+0x70>)
   b44d4:	4628      	mov	r0, r5
   b44d6:	f001 f806 	bl	b54e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b44da:	4621      	mov	r1, r4
   b44dc:	4628      	mov	r0, r5
   b44de:	4a07      	ldr	r2, [pc, #28]	; (b44fc <_GLOBAL__sub_I_pinStateCurrent+0x64>)
}
   b44e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
String fanValLow = "010";
   b44e4:	f001 baf0 	b.w	b5ac8 <__aeabi_atexit>
   b44e8:	2003e6d0 	.word	0x2003e6d0
   b44ec:	2003e6d8 	.word	0x2003e6d8
   b44f0:	000b5451 	.word	0x000b5451
   b44f4:	000b5e2d 	.word	0x000b5e2d
   b44f8:	2003e6f8 	.word	0x2003e6f8
   b44fc:	2003e6cc 	.word	0x2003e6cc
   b4500:	000b5e31 	.word	0x000b5e31
   b4504:	2003e6e8 	.word	0x2003e6e8
   b4508:	000b5e35 	.word	0x000b5e35

000b450c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <os_mutex_recursive_create+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	00030248 	.word	0x00030248

000b451c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <os_mutex_recursive_destroy+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	00030248 	.word	0x00030248

000b452c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <HAL_RNG_GetRandomNumber+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	685b      	ldr	r3, [r3, #4]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	00030218 	.word	0x00030218

000b453c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	695b      	ldr	r3, [r3, #20]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	00030218 	.word	0x00030218

000b454c <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <HAL_EEPROM_Init+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	00030218 	.word	0x00030218

000b455c <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <HAL_EEPROM_Read+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	00030218 	.word	0x00030218

000b456c <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <HAL_EEPROM_Put+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	00030218 	.word	0x00030218

000b457c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <HAL_Pin_Mode+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	689b      	ldr	r3, [r3, #8]
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	0003022c 	.word	0x0003022c

000b458c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <HAL_Get_Pin_Mode+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	68db      	ldr	r3, [r3, #12]
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	0003022c 	.word	0x0003022c

000b459c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <HAL_GPIO_Read+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	695b      	ldr	r3, [r3, #20]
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	0003022c 	.word	0x0003022c

000b45ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b45ac:	b508      	push	{r3, lr}
   b45ae:	4b02      	ldr	r3, [pc, #8]	; (b45b8 <hal_i2c_write+0xc>)
   b45b0:	681b      	ldr	r3, [r3, #0]
   b45b2:	6a1b      	ldr	r3, [r3, #32]
   b45b4:	9301      	str	r3, [sp, #4]
   b45b6:	bd08      	pop	{r3, pc}
   b45b8:	00030228 	.word	0x00030228

000b45bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b45bc:	b508      	push	{r3, lr}
   b45be:	4b02      	ldr	r3, [pc, #8]	; (b45c8 <hal_i2c_available+0xc>)
   b45c0:	681b      	ldr	r3, [r3, #0]
   b45c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b45c4:	9301      	str	r3, [sp, #4]
   b45c6:	bd08      	pop	{r3, pc}
   b45c8:	00030228 	.word	0x00030228

000b45cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b02      	ldr	r3, [pc, #8]	; (b45d8 <hal_i2c_read+0xc>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b45d4:	9301      	str	r3, [sp, #4]
   b45d6:	bd08      	pop	{r3, pc}
   b45d8:	00030228 	.word	0x00030228

000b45dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b45dc:	b508      	push	{r3, lr}
   b45de:	4b02      	ldr	r3, [pc, #8]	; (b45e8 <hal_i2c_peek+0xc>)
   b45e0:	681b      	ldr	r3, [r3, #0]
   b45e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45e4:	9301      	str	r3, [sp, #4]
   b45e6:	bd08      	pop	{r3, pc}
   b45e8:	00030228 	.word	0x00030228

000b45ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b45ec:	b508      	push	{r3, lr}
   b45ee:	4b02      	ldr	r3, [pc, #8]	; (b45f8 <hal_i2c_flush+0xc>)
   b45f0:	681b      	ldr	r3, [r3, #0]
   b45f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45f4:	9301      	str	r3, [sp, #4]
   b45f6:	bd08      	pop	{r3, pc}
   b45f8:	00030228 	.word	0x00030228

000b45fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b45fc:	b508      	push	{r3, lr}
   b45fe:	4b02      	ldr	r3, [pc, #8]	; (b4608 <hal_i2c_is_enabled+0xc>)
   b4600:	681b      	ldr	r3, [r3, #0]
   b4602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4604:	9301      	str	r3, [sp, #4]
   b4606:	bd08      	pop	{r3, pc}
   b4608:	00030228 	.word	0x00030228

000b460c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b460c:	b508      	push	{r3, lr}
   b460e:	4b02      	ldr	r3, [pc, #8]	; (b4618 <hal_i2c_init+0xc>)
   b4610:	681b      	ldr	r3, [r3, #0]
   b4612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4614:	9301      	str	r3, [sp, #4]
   b4616:	bd08      	pop	{r3, pc}
   b4618:	00030228 	.word	0x00030228

000b461c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b02      	ldr	r3, [pc, #8]	; (b4628 <inet_inet_ntop+0xc>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	695b      	ldr	r3, [r3, #20]
   b4624:	9301      	str	r3, [sp, #4]
   b4626:	bd08      	pop	{r3, pc}
   b4628:	00030264 	.word	0x00030264

000b462c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b462c:	b508      	push	{r3, lr}
   b462e:	4b02      	ldr	r3, [pc, #8]	; (b4638 <netdb_freeaddrinfo+0xc>)
   b4630:	681b      	ldr	r3, [r3, #0]
   b4632:	689b      	ldr	r3, [r3, #8]
   b4634:	9301      	str	r3, [sp, #4]
   b4636:	bd08      	pop	{r3, pc}
   b4638:	00030268 	.word	0x00030268

000b463c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b463c:	b508      	push	{r3, lr}
   b463e:	4b02      	ldr	r3, [pc, #8]	; (b4648 <netdb_getaddrinfo+0xc>)
   b4640:	681b      	ldr	r3, [r3, #0]
   b4642:	68db      	ldr	r3, [r3, #12]
   b4644:	9301      	str	r3, [sp, #4]
   b4646:	bd08      	pop	{r3, pc}
   b4648:	00030268 	.word	0x00030268

000b464c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b464c:	b508      	push	{r3, lr}
   b464e:	4b02      	ldr	r3, [pc, #8]	; (b4658 <hal_spi_init+0xc>)
   b4650:	681b      	ldr	r3, [r3, #0]
   b4652:	69db      	ldr	r3, [r3, #28]
   b4654:	9301      	str	r3, [sp, #4]
   b4656:	bd08      	pop	{r3, pc}
   b4658:	00030230 	.word	0x00030230

000b465c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <hal_spi_is_enabled+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	6a1b      	ldr	r3, [r3, #32]
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	00030230 	.word	0x00030230

000b466c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <hal_usart_init+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	681b      	ldr	r3, [r3, #0]
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	0003023c 	.word	0x0003023c

000b467c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b02      	ldr	r3, [pc, #8]	; (b4688 <hal_usart_write+0xc>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	68db      	ldr	r3, [r3, #12]
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	bd08      	pop	{r3, pc}
   b4688:	0003023c 	.word	0x0003023c

000b468c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b02      	ldr	r3, [pc, #8]	; (b4698 <hal_usart_available+0xc>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	691b      	ldr	r3, [r3, #16]
   b4694:	9301      	str	r3, [sp, #4]
   b4696:	bd08      	pop	{r3, pc}
   b4698:	0003023c 	.word	0x0003023c

000b469c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b469c:	b508      	push	{r3, lr}
   b469e:	4b02      	ldr	r3, [pc, #8]	; (b46a8 <hal_usart_read+0xc>)
   b46a0:	681b      	ldr	r3, [r3, #0]
   b46a2:	695b      	ldr	r3, [r3, #20]
   b46a4:	9301      	str	r3, [sp, #4]
   b46a6:	bd08      	pop	{r3, pc}
   b46a8:	0003023c 	.word	0x0003023c

000b46ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b46ac:	b508      	push	{r3, lr}
   b46ae:	4b02      	ldr	r3, [pc, #8]	; (b46b8 <hal_usart_peek+0xc>)
   b46b0:	681b      	ldr	r3, [r3, #0]
   b46b2:	699b      	ldr	r3, [r3, #24]
   b46b4:	9301      	str	r3, [sp, #4]
   b46b6:	bd08      	pop	{r3, pc}
   b46b8:	0003023c 	.word	0x0003023c

000b46bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b46bc:	b508      	push	{r3, lr}
   b46be:	4b02      	ldr	r3, [pc, #8]	; (b46c8 <hal_usart_flush+0xc>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	69db      	ldr	r3, [r3, #28]
   b46c4:	9301      	str	r3, [sp, #4]
   b46c6:	bd08      	pop	{r3, pc}
   b46c8:	0003023c 	.word	0x0003023c

000b46cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b46cc:	b508      	push	{r3, lr}
   b46ce:	4b02      	ldr	r3, [pc, #8]	; (b46d8 <hal_usart_is_enabled+0xc>)
   b46d0:	681b      	ldr	r3, [r3, #0]
   b46d2:	6a1b      	ldr	r3, [r3, #32]
   b46d4:	9301      	str	r3, [sp, #4]
   b46d6:	bd08      	pop	{r3, pc}
   b46d8:	0003023c 	.word	0x0003023c

000b46dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <hal_usart_available_data_for_write+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	0003023c 	.word	0x0003023c

000b46ec <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <hal_usart_begin_config+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	0003023c 	.word	0x0003023c

000b46fc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <HAL_USB_USART_Init+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	681b      	ldr	r3, [r3, #0]
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	0003024c 	.word	0x0003024c

000b470c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <HAL_USB_USART_Begin+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	685b      	ldr	r3, [r3, #4]
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	0003024c 	.word	0x0003024c

000b471c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <HAL_USB_USART_Available_Data+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	691b      	ldr	r3, [r3, #16]
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	0003024c 	.word	0x0003024c

000b472c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	695b      	ldr	r3, [r3, #20]
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	0003024c 	.word	0x0003024c

000b473c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <HAL_USB_USART_Receive_Data+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	699b      	ldr	r3, [r3, #24]
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	0003024c 	.word	0x0003024c

000b474c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <HAL_USB_USART_Send_Data+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	69db      	ldr	r3, [r3, #28]
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	0003024c 	.word	0x0003024c

000b475c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <HAL_USB_USART_Flush_Data+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	6a1b      	ldr	r3, [r3, #32]
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	0003024c 	.word	0x0003024c

000b476c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <set_system_mode+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	685b      	ldr	r3, [r3, #4]
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	00030220 	.word	0x00030220

000b477c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <system_thread_set_state+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	00030220 	.word	0x00030220

000b478c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <application_thread_current+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	00030220 	.word	0x00030220

000b479c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <application_thread_invoke+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	00030220 	.word	0x00030220

000b47ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b03      	ldr	r3, [pc, #12]	; (b47bc <system_ctrl_set_app_request_handler+0x10>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b47b6:	9301      	str	r3, [sp, #4]
   b47b8:	bd08      	pop	{r3, pc}
   b47ba:	0000      	.short	0x0000
   b47bc:	00030220 	.word	0x00030220

000b47c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b03      	ldr	r3, [pc, #12]	; (b47d0 <system_ctrl_set_result+0x10>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b47ca:	9301      	str	r3, [sp, #4]
   b47cc:	bd08      	pop	{r3, pc}
   b47ce:	0000      	.short	0x0000
   b47d0:	00030220 	.word	0x00030220

000b47d4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b47d4:	b508      	push	{r3, lr}
   b47d6:	4b02      	ldr	r3, [pc, #8]	; (b47e0 <spark_function+0xc>)
   b47d8:	681b      	ldr	r3, [r3, #0]
   b47da:	685b      	ldr	r3, [r3, #4]
   b47dc:	9301      	str	r3, [sp, #4]
   b47de:	bd08      	pop	{r3, pc}
   b47e0:	00030244 	.word	0x00030244

000b47e4 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b47e4:	b508      	push	{r3, lr}
   b47e6:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <spark_cloud_flag_connected+0xc>)
   b47e8:	681b      	ldr	r3, [r3, #0]
   b47ea:	695b      	ldr	r3, [r3, #20]
   b47ec:	9301      	str	r3, [sp, #4]
   b47ee:	bd08      	pop	{r3, pc}
   b47f0:	00030244 	.word	0x00030244

000b47f4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b02      	ldr	r3, [pc, #8]	; (b4800 <spark_send_event+0xc>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	6a1b      	ldr	r3, [r3, #32]
   b47fc:	9301      	str	r3, [sp, #4]
   b47fe:	bd08      	pop	{r3, pc}
   b4800:	00030244 	.word	0x00030244

000b4804 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4804:	b508      	push	{r3, lr}
   b4806:	4b02      	ldr	r3, [pc, #8]	; (b4810 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4808:	681b      	ldr	r3, [r3, #0]
   b480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b480c:	9301      	str	r3, [sp, #4]
   b480e:	bd08      	pop	{r3, pc}
   b4810:	00030244 	.word	0x00030244

000b4814 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4814:	b508      	push	{r3, lr}
   b4816:	4b02      	ldr	r3, [pc, #8]	; (b4820 <network_connect+0xc>)
   b4818:	681b      	ldr	r3, [r3, #0]
   b481a:	685b      	ldr	r3, [r3, #4]
   b481c:	9301      	str	r3, [sp, #4]
   b481e:	bd08      	pop	{r3, pc}
   b4820:	00030240 	.word	0x00030240

000b4824 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4824:	b508      	push	{r3, lr}
   b4826:	4b02      	ldr	r3, [pc, #8]	; (b4830 <network_connecting+0xc>)
   b4828:	681b      	ldr	r3, [r3, #0]
   b482a:	689b      	ldr	r3, [r3, #8]
   b482c:	9301      	str	r3, [sp, #4]
   b482e:	bd08      	pop	{r3, pc}
   b4830:	00030240 	.word	0x00030240

000b4834 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4834:	b508      	push	{r3, lr}
   b4836:	4b02      	ldr	r3, [pc, #8]	; (b4840 <network_disconnect+0xc>)
   b4838:	681b      	ldr	r3, [r3, #0]
   b483a:	68db      	ldr	r3, [r3, #12]
   b483c:	9301      	str	r3, [sp, #4]
   b483e:	bd08      	pop	{r3, pc}
   b4840:	00030240 	.word	0x00030240

000b4844 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4844:	b508      	push	{r3, lr}
   b4846:	4b02      	ldr	r3, [pc, #8]	; (b4850 <network_ready+0xc>)
   b4848:	681b      	ldr	r3, [r3, #0]
   b484a:	691b      	ldr	r3, [r3, #16]
   b484c:	9301      	str	r3, [sp, #4]
   b484e:	bd08      	pop	{r3, pc}
   b4850:	00030240 	.word	0x00030240

000b4854 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4854:	b508      	push	{r3, lr}
   b4856:	4b02      	ldr	r3, [pc, #8]	; (b4860 <network_on+0xc>)
   b4858:	681b      	ldr	r3, [r3, #0]
   b485a:	695b      	ldr	r3, [r3, #20]
   b485c:	9301      	str	r3, [sp, #4]
   b485e:	bd08      	pop	{r3, pc}
   b4860:	00030240 	.word	0x00030240

000b4864 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4864:	b508      	push	{r3, lr}
   b4866:	4b02      	ldr	r3, [pc, #8]	; (b4870 <network_off+0xc>)
   b4868:	681b      	ldr	r3, [r3, #0]
   b486a:	699b      	ldr	r3, [r3, #24]
   b486c:	9301      	str	r3, [sp, #4]
   b486e:	bd08      	pop	{r3, pc}
   b4870:	00030240 	.word	0x00030240

000b4874 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4874:	b508      	push	{r3, lr}
   b4876:	4b02      	ldr	r3, [pc, #8]	; (b4880 <network_listen+0xc>)
   b4878:	681b      	ldr	r3, [r3, #0]
   b487a:	69db      	ldr	r3, [r3, #28]
   b487c:	9301      	str	r3, [sp, #4]
   b487e:	bd08      	pop	{r3, pc}
   b4880:	00030240 	.word	0x00030240

000b4884 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4884:	b508      	push	{r3, lr}
   b4886:	4b02      	ldr	r3, [pc, #8]	; (b4890 <network_listening+0xc>)
   b4888:	681b      	ldr	r3, [r3, #0]
   b488a:	6a1b      	ldr	r3, [r3, #32]
   b488c:	9301      	str	r3, [sp, #4]
   b488e:	bd08      	pop	{r3, pc}
   b4890:	00030240 	.word	0x00030240

000b4894 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4894:	b508      	push	{r3, lr}
   b4896:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <network_set_listen_timeout+0xc>)
   b4898:	681b      	ldr	r3, [r3, #0]
   b489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b489c:	9301      	str	r3, [sp, #4]
   b489e:	bd08      	pop	{r3, pc}
   b48a0:	00030240 	.word	0x00030240

000b48a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b48a4:	b508      	push	{r3, lr}
   b48a6:	4b02      	ldr	r3, [pc, #8]	; (b48b0 <network_get_listen_timeout+0xc>)
   b48a8:	681b      	ldr	r3, [r3, #0]
   b48aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48ac:	9301      	str	r3, [sp, #4]
   b48ae:	bd08      	pop	{r3, pc}
   b48b0:	00030240 	.word	0x00030240

000b48b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b48b4:	b508      	push	{r3, lr}
   b48b6:	4b02      	ldr	r3, [pc, #8]	; (b48c0 <network_is_on+0xc>)
   b48b8:	681b      	ldr	r3, [r3, #0]
   b48ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48bc:	9301      	str	r3, [sp, #4]
   b48be:	bd08      	pop	{r3, pc}
   b48c0:	00030240 	.word	0x00030240

000b48c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b48c4:	b508      	push	{r3, lr}
   b48c6:	4b02      	ldr	r3, [pc, #8]	; (b48d0 <network_is_off+0xc>)
   b48c8:	681b      	ldr	r3, [r3, #0]
   b48ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48cc:	9301      	str	r3, [sp, #4]
   b48ce:	bd08      	pop	{r3, pc}
   b48d0:	00030240 	.word	0x00030240

000b48d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b48d4:	b508      	push	{r3, lr}
   b48d6:	4b02      	ldr	r3, [pc, #8]	; (b48e0 <malloc+0xc>)
   b48d8:	681b      	ldr	r3, [r3, #0]
   b48da:	681b      	ldr	r3, [r3, #0]
   b48dc:	9301      	str	r3, [sp, #4]
   b48de:	bd08      	pop	{r3, pc}
   b48e0:	0003021c 	.word	0x0003021c

000b48e4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b48e4:	b508      	push	{r3, lr}
   b48e6:	4b02      	ldr	r3, [pc, #8]	; (b48f0 <free+0xc>)
   b48e8:	681b      	ldr	r3, [r3, #0]
   b48ea:	685b      	ldr	r3, [r3, #4]
   b48ec:	9301      	str	r3, [sp, #4]
   b48ee:	bd08      	pop	{r3, pc}
   b48f0:	0003021c 	.word	0x0003021c

000b48f4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b48f4:	b508      	push	{r3, lr}
   b48f6:	4b02      	ldr	r3, [pc, #8]	; (b4900 <realloc+0xc>)
   b48f8:	681b      	ldr	r3, [r3, #0]
   b48fa:	689b      	ldr	r3, [r3, #8]
   b48fc:	9301      	str	r3, [sp, #4]
   b48fe:	bd08      	pop	{r3, pc}
   b4900:	0003021c 	.word	0x0003021c

000b4904 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4904:	b508      	push	{r3, lr}
   b4906:	4b02      	ldr	r3, [pc, #8]	; (b4910 <abort+0xc>)
   b4908:	681b      	ldr	r3, [r3, #0]
   b490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b490c:	9301      	str	r3, [sp, #4]
   b490e:	bd08      	pop	{r3, pc}
   b4910:	0003021c 	.word	0x0003021c

000b4914 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4914:	b508      	push	{r3, lr}
   b4916:	4b02      	ldr	r3, [pc, #8]	; (b4920 <_malloc_r+0xc>)
   b4918:	681b      	ldr	r3, [r3, #0]
   b491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b491c:	9301      	str	r3, [sp, #4]
   b491e:	bd08      	pop	{r3, pc}
   b4920:	0003021c 	.word	0x0003021c

000b4924 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4924:	b508      	push	{r3, lr}
   b4926:	4b02      	ldr	r3, [pc, #8]	; (b4930 <__assert_func+0xc>)
   b4928:	681b      	ldr	r3, [r3, #0]
   b492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b492c:	9301      	str	r3, [sp, #4]
   b492e:	bd08      	pop	{r3, pc}
   b4930:	0003021c 	.word	0x0003021c

000b4934 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4934:	b508      	push	{r3, lr}
   b4936:	4b02      	ldr	r3, [pc, #8]	; (b4940 <newlib_impure_ptr_callback+0xc>)
   b4938:	681b      	ldr	r3, [r3, #0]
   b493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b493c:	9301      	str	r3, [sp, #4]
   b493e:	bd08      	pop	{r3, pc}
   b4940:	0003021c 	.word	0x0003021c

000b4944 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4944:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4946:	6883      	ldr	r3, [r0, #8]
   b4948:	4604      	mov	r4, r0
   b494a:	b90b      	cbnz	r3, b4950 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b494c:	f001 f8c5 	bl	b5ada <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4950:	68c3      	ldr	r3, [r0, #12]
   b4952:	4798      	blx	r3
      if (_M_manager)
   b4954:	68a3      	ldr	r3, [r4, #8]
   b4956:	b11b      	cbz	r3, b4960 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4958:	2203      	movs	r2, #3
   b495a:	4621      	mov	r1, r4
   b495c:	4620      	mov	r0, r4
   b495e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4960:	4620      	mov	r0, r4
   b4962:	2110      	movs	r1, #16
}
   b4964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4968:	f001 b8b3 	b.w	b5ad2 <_ZdlPvj>

000b496c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b496c:	b510      	push	{r4, lr}
   b496e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b4970:	6800      	ldr	r0, [r0, #0]
   b4972:	b108      	cbz	r0, b4978 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b4974:	f7ff fdd2 	bl	b451c <os_mutex_recursive_destroy>
    }
   b4978:	4620      	mov	r0, r4
   b497a:	bd10      	pop	{r4, pc}

000b497c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b497c:	b510      	push	{r4, lr}
      if (_M_manager)
   b497e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4980:	4604      	mov	r4, r0
      if (_M_manager)
   b4982:	b113      	cbz	r3, b498a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4984:	2203      	movs	r2, #3
   b4986:	4601      	mov	r1, r0
   b4988:	4798      	blx	r3
    }
   b498a:	4620      	mov	r0, r4
   b498c:	bd10      	pop	{r4, pc}

000b498e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b498e:	b513      	push	{r0, r1, r4, lr}
   b4990:	460b      	mov	r3, r1
   b4992:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4994:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4998:	466c      	mov	r4, sp
   b499a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b499e:	e893 0003 	ldmia.w	r3, {r0, r1}
   b49a2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b49a6:	e894 0003 	ldmia.w	r4, {r0, r1}
   b49aa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b49ae:	b002      	add	sp, #8
   b49b0:	bd10      	pop	{r4, pc}
	...

000b49b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b49b4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b49b6:	4c06      	ldr	r4, [pc, #24]	; (b49d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b49b8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b49ba:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b49bc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b49be:	f7ff fda5 	bl	b450c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b49c2:	4620      	mov	r0, r4
   b49c4:	4a03      	ldr	r2, [pc, #12]	; (b49d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b49c6:	4904      	ldr	r1, [pc, #16]	; (b49d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b49c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b49cc:	f001 b87c 	b.w	b5ac8 <__aeabi_atexit>
   b49d0:	2003e714 	.word	0x2003e714
   b49d4:	2003e6cc 	.word	0x2003e6cc
   b49d8:	000b496d 	.word	0x000b496d

000b49dc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b49dc:	2200      	movs	r2, #0
   b49de:	6840      	ldr	r0, [r0, #4]
   b49e0:	4611      	mov	r1, r2
   b49e2:	f7ff bf2f 	b.w	b4844 <network_ready>

000b49e6 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b49e6:	2200      	movs	r2, #0
   b49e8:	6840      	ldr	r0, [r0, #4]
   b49ea:	4611      	mov	r1, r2
   b49ec:	f7ff bf4a 	b.w	b4884 <network_listening>

000b49f0 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b49f0:	2200      	movs	r2, #0
   b49f2:	6840      	ldr	r0, [r0, #4]
   b49f4:	4611      	mov	r1, r2
   b49f6:	f7ff bf55 	b.w	b48a4 <network_get_listen_timeout>

000b49fa <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b49fa:	6840      	ldr	r0, [r0, #4]
   b49fc:	2200      	movs	r2, #0
   b49fe:	f7ff bf49 	b.w	b4894 <network_set_listen_timeout>

000b4a02 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4a02:	6840      	ldr	r0, [r0, #4]
   b4a04:	2200      	movs	r2, #0
   b4a06:	f081 0101 	eor.w	r1, r1, #1
   b4a0a:	f7ff bf33 	b.w	b4874 <network_listen>

000b4a0e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4a0e:	2300      	movs	r3, #0
   b4a10:	6840      	ldr	r0, [r0, #4]
   b4a12:	461a      	mov	r2, r3
   b4a14:	4619      	mov	r1, r3
   b4a16:	f7ff bf25 	b.w	b4864 <network_off>

000b4a1a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4a1a:	2300      	movs	r3, #0
   b4a1c:	6840      	ldr	r0, [r0, #4]
   b4a1e:	461a      	mov	r2, r3
   b4a20:	4619      	mov	r1, r3
   b4a22:	f7ff bf17 	b.w	b4854 <network_on>

000b4a26 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4a26:	2200      	movs	r2, #0
   b4a28:	6840      	ldr	r0, [r0, #4]
   b4a2a:	4611      	mov	r1, r2
   b4a2c:	f7ff befa 	b.w	b4824 <network_connecting>

000b4a30 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4a30:	6840      	ldr	r0, [r0, #4]
   b4a32:	2200      	movs	r2, #0
   b4a34:	2102      	movs	r1, #2
   b4a36:	f7ff befd 	b.w	b4834 <network_disconnect>

000b4a3a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4a3a:	2300      	movs	r3, #0
   b4a3c:	6840      	ldr	r0, [r0, #4]
   b4a3e:	461a      	mov	r2, r3
   b4a40:	f7ff bee8 	b.w	b4814 <network_connect>

000b4a44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4a44:	4b08      	ldr	r3, [pc, #32]	; (b4a68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4a46:	b510      	push	{r4, lr}
   b4a48:	2428      	movs	r4, #40	; 0x28
   b4a4a:	4622      	mov	r2, r4
   b4a4c:	4618      	mov	r0, r3
   b4a4e:	2100      	movs	r1, #0
   b4a50:	f001 f862 	bl	b5b18 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4a54:	4b05      	ldr	r3, [pc, #20]	; (b4a6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4a56:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4a5c:	6042      	str	r2, [r0, #4]
   b4a5e:	2204      	movs	r2, #4
   b4a60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4a62:	4a03      	ldr	r2, [pc, #12]	; (b4a70 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4a64:	601a      	str	r2, [r3, #0]
   b4a66:	bd10      	pop	{r4, pc}
   b4a68:	2003e720 	.word	0x2003e720
   b4a6c:	2003e718 	.word	0x2003e718
   b4a70:	000b5e44 	.word	0x000b5e44

000b4a74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4a74:	4770      	bx	lr

000b4a76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4a76:	2000      	movs	r0, #0
   b4a78:	4770      	bx	lr

000b4a7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4a7a:	b510      	push	{r4, lr}
   b4a7c:	2110      	movs	r1, #16
   b4a7e:	4604      	mov	r4, r0
   b4a80:	f001 f827 	bl	b5ad2 <_ZdlPvj>
   b4a84:	4620      	mov	r0, r4
   b4a86:	bd10      	pop	{r4, pc}

000b4a88 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4a88:	b508      	push	{r3, lr}
      { delete this; }
   b4a8a:	f7ff fff6 	bl	b4a7a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4a8e:	bd08      	pop	{r3, pc}

000b4a90 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4a90:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4a92:	2200      	movs	r2, #0
   b4a94:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4a98:	6002      	str	r2, [r0, #0]
   b4a9a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4a9c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4a9e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4aa0:	680c      	ldr	r4, [r1, #0]
   b4aa2:	8085      	strh	r5, [r0, #4]
   b4aa4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4aa6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4aa8:	bd30      	pop	{r4, r5, pc}

000b4aaa <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4aaa:	b510      	push	{r4, lr}
   b4aac:	4604      	mov	r4, r0
    free((void*)msg_);
   b4aae:	6800      	ldr	r0, [r0, #0]
   b4ab0:	f7ff ff18 	bl	b48e4 <free>
}
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	bd10      	pop	{r4, pc}

000b4ab8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4ab8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4aba:	68c4      	ldr	r4, [r0, #12]
   b4abc:	b1f4      	cbz	r4, b4afc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4abe:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4ac0:	2b02      	cmp	r3, #2
   b4ac2:	d103      	bne.n	b4acc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4ac4:	f104 000c 	add.w	r0, r4, #12
   b4ac8:	f7ff ffef 	bl	b4aaa <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4acc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4ace:	b135      	cbz	r5, b4ade <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4ad0:	4628      	mov	r0, r5
   b4ad2:	f7ff ff53 	bl	b497c <_ZNSt14_Function_baseD1Ev>
   b4ad6:	2110      	movs	r1, #16
   b4ad8:	4628      	mov	r0, r5
   b4ada:	f000 fffa 	bl	b5ad2 <_ZdlPvj>
   b4ade:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4ae0:	b135      	cbz	r5, b4af0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4ae2:	4628      	mov	r0, r5
   b4ae4:	f7ff ff4a 	bl	b497c <_ZNSt14_Function_baseD1Ev>
   b4ae8:	2110      	movs	r1, #16
   b4aea:	4628      	mov	r0, r5
   b4aec:	f000 fff1 	bl	b5ad2 <_ZdlPvj>
   b4af0:	4620      	mov	r0, r4
   b4af2:	2114      	movs	r1, #20
   b4af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4af8:	f000 bfeb 	b.w	b5ad2 <_ZdlPvj>
   b4afc:	bd38      	pop	{r3, r4, r5, pc}

000b4afe <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b4afe:	b510      	push	{r4, lr}
   b4b00:	b088      	sub	sp, #32
   b4b02:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b4b04:	4668      	mov	r0, sp
   b4b06:	f000 fcee 	bl	b54e6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b4b0a:	4669      	mov	r1, sp
   b4b0c:	a804      	add	r0, sp, #16
   b4b0e:	f000 fd0d 	bl	b552c <_ZN6StringC1ERKS_>
   b4b12:	a804      	add	r0, sp, #16
   b4b14:	47a0      	blx	r4
   b4b16:	4604      	mov	r4, r0
   b4b18:	a804      	add	r0, sp, #16
   b4b1a:	f000 fc99 	bl	b5450 <_ZN6StringD1Ev>
    String p(param);
   b4b1e:	4668      	mov	r0, sp
   b4b20:	f000 fc96 	bl	b5450 <_ZN6StringD1Ev>
}
   b4b24:	4620      	mov	r0, r4
   b4b26:	b008      	add	sp, #32
   b4b28:	bd10      	pop	{r4, pc}

000b4b2a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b4b2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b4b2c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b4b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b4b32:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b4b34:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b4b36:	461a      	mov	r2, r3
   b4b38:	4669      	mov	r1, sp
   b4b3a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b4b3c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b4b40:	f8ad 4000 	strh.w	r4, [sp]
   b4b44:	f7ff fe46 	bl	b47d4 <spark_function>
}
   b4b48:	b004      	add	sp, #16
   b4b4a:	bd10      	pop	{r4, pc}

000b4b4c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4b4c:	680b      	ldr	r3, [r1, #0]
   b4b4e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4b50:	684b      	ldr	r3, [r1, #4]
   b4b52:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4b54:	b113      	cbz	r3, b4b5c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4b56:	685a      	ldr	r2, [r3, #4]
   b4b58:	3201      	adds	r2, #1
   b4b5a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4b5c:	4770      	bx	lr

000b4b5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4b5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4b60:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4b62:	4668      	mov	r0, sp
   b4b64:	460d      	mov	r5, r1
   b4b66:	f7ff fff1 	bl	b4b4c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4b6a:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4b6c:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4b6e:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4b70:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4b72:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4b74:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4b76:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4b78:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4b7a:	f7ff fac5 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4b7e:	b135      	cbz	r5, b4b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4b80:	1d28      	adds	r0, r5, #4
   b4b82:	f7ff fac1 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4b86:	2108      	movs	r1, #8
   b4b88:	4628      	mov	r0, r5
   b4b8a:	f000 ffa2 	bl	b5ad2 <_ZdlPvj>
        return p;
    }
   b4b8e:	4620      	mov	r0, r4
   b4b90:	b003      	add	sp, #12
   b4b92:	bd30      	pop	{r4, r5, pc}

000b4b94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4b94:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4b96:	b510      	push	{r4, lr}
      if (_M_empty())
   b4b98:	b90a      	cbnz	r2, b4b9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4b9a:	f000 ff9e 	bl	b5ada <_ZSt25__throw_bad_function_callv>
    }
   b4b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ba2:	68c3      	ldr	r3, [r0, #12]
   b4ba4:	4718      	bx	r3

000b4ba6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4ba6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4ba8:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4baa:	f100 0110 	add.w	r1, r0, #16
   b4bae:	f7ff fff1 	bl	b4b94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4bb2:	bd08      	pop	{r3, pc}

000b4bb4 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4bb4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4bb6:	b510      	push	{r4, lr}
      if (_M_empty())
   b4bb8:	b90a      	cbnz	r2, b4bbe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4bba:	f000 ff8e 	bl	b5ada <_ZSt25__throw_bad_function_callv>
    }
   b4bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4bc2:	68c3      	ldr	r3, [r0, #12]
   b4bc4:	4718      	bx	r3

000b4bc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4bc6:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4bc8:	6800      	ldr	r0, [r0, #0]
   b4bca:	f100 0110 	add.w	r1, r0, #16
   b4bce:	f7ff fff1 	bl	b4bb4 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4bd2:	bd08      	pop	{r3, pc}

000b4bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4bd4:	b538      	push	{r3, r4, r5, lr}
   b4bd6:	2300      	movs	r3, #0
   b4bd8:	4604      	mov	r4, r0
   b4bda:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4bdc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4bde:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4be0:	f7ff fa57 	bl	b4092 <_Znwj>
   b4be4:	b128      	cbz	r0, b4bf2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4be6:	2301      	movs	r3, #1
   b4be8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4bec:	4b02      	ldr	r3, [pc, #8]	; (b4bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4bee:	6003      	str	r3, [r0, #0]
   b4bf0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4bf2:	6020      	str	r0, [r4, #0]
	}
   b4bf4:	4620      	mov	r0, r4
   b4bf6:	bd38      	pop	{r3, r4, r5, pc}
   b4bf8:	000b5e80 	.word	0x000b5e80

000b4bfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4bfc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4bfe:	2300      	movs	r3, #0
   b4c00:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4c02:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4c04:	4604      	mov	r4, r0
   b4c06:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4c08:	b12b      	cbz	r3, b4c16 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4c0a:	2202      	movs	r2, #2
   b4c0c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4c0e:	68eb      	ldr	r3, [r5, #12]
   b4c10:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4c12:	68ab      	ldr	r3, [r5, #8]
   b4c14:	60a3      	str	r3, [r4, #8]
    }
   b4c16:	4620      	mov	r0, r4
   b4c18:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4c1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4c1e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4c20:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4c22:	4668      	mov	r0, sp
   b4c24:	f7ff ff34 	bl	b4a90 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4c28:	f04f 0302 	mov.w	r3, #2
   b4c2c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4c30:	2a00      	cmp	r2, #0
   b4c32:	d103      	bne.n	b4c3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4c34:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4c38:	2900      	cmp	r1, #0
   b4c3a:	d1f7      	bne.n	b4c2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4c3c:	d125      	bne.n	b4c8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4c3e:	f104 050c 	add.w	r5, r4, #12
   b4c42:	4669      	mov	r1, sp
   b4c44:	4628      	mov	r0, r5
   b4c46:	f7ff ff23 	bl	b4a90 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4c4a:	f3bf 8f5b 	dmb	ish
   b4c4e:	2301      	movs	r3, #1
   b4c50:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4c52:	2000      	movs	r0, #0
   b4c54:	f104 0308 	add.w	r3, r4, #8
   b4c58:	f3bf 8f5b 	dmb	ish
   b4c5c:	e853 6f00 	ldrex	r6, [r3]
   b4c60:	e843 0200 	strex	r2, r0, [r3]
   b4c64:	2a00      	cmp	r2, #0
   b4c66:	d1f9      	bne.n	b4c5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4c68:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4c6c:	b16e      	cbz	r6, b4c8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4c6e:	f7ff fd8d 	bl	b478c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4c72:	b178      	cbz	r0, b4c94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4c74:	4629      	mov	r1, r5
   b4c76:	4630      	mov	r0, r6
   b4c78:	f7ff ff8c 	bl	b4b94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4c7c:	4630      	mov	r0, r6
   b4c7e:	f7ff fe7d 	bl	b497c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4c82:	2110      	movs	r1, #16
   b4c84:	4630      	mov	r0, r6
   b4c86:	f000 ff24 	bl	b5ad2 <_ZdlPvj>
        p_->setError(std::move(error));
   b4c8a:	4668      	mov	r0, sp
   b4c8c:	f7ff ff0d 	bl	b4aaa <_ZN8particle5ErrorD1Ev>
    }
   b4c90:	b009      	add	sp, #36	; 0x24
   b4c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4c94:	4631      	mov	r1, r6
   b4c96:	a802      	add	r0, sp, #8
   b4c98:	f7ff ffb0 	bl	b4bfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4c9c:	68e0      	ldr	r0, [r4, #12]
   b4c9e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4ca2:	b108      	cbz	r0, b4ca8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4ca4:	f000 ff78 	bl	b5b98 <strdup>
        type_(type) {
   b4ca8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4caa:	2010      	movs	r0, #16
   b4cac:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4cb0:	f7ff f9ef 	bl	b4092 <_Znwj>
   b4cb4:	4605      	mov	r5, r0
   b4cb6:	b1e8      	cbz	r0, b4cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4cb8:	2700      	movs	r7, #0
   b4cba:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4cbc:	2018      	movs	r0, #24
   b4cbe:	f7ff f9e8 	bl	b4092 <_Znwj>
   b4cc2:	4604      	mov	r4, r0
   b4cc4:	b188      	cbz	r0, b4cea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4cc6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4cc8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4cca:	a802      	add	r0, sp, #8
   b4ccc:	f7ff fe5f 	bl	b498e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cd0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4cd2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4cd4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4cd6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4cd8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4cda:	a906      	add	r1, sp, #24
   b4cdc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4cde:	60e3      	str	r3, [r4, #12]
   b4ce0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b4ce4:	9205      	str	r2, [sp, #20]
   b4ce6:	f7ff fed3 	bl	b4a90 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b4cea:	4b08      	ldr	r3, [pc, #32]	; (b4d0c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b4cec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4cee:	4b08      	ldr	r3, [pc, #32]	; (b4d10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4cf0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4cf2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b4cf4:	a806      	add	r0, sp, #24
   b4cf6:	f7ff fed8 	bl	b4aaa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4cfa:	a802      	add	r0, sp, #8
   b4cfc:	f7ff fe3e 	bl	b497c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4d00:	2200      	movs	r2, #0
   b4d02:	4629      	mov	r1, r5
   b4d04:	4803      	ldr	r0, [pc, #12]	; (b4d14 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b4d06:	f7ff fd49 	bl	b479c <application_thread_invoke>
   b4d0a:	e7b7      	b.n	b4c7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4d0c:	000b4ba7 	.word	0x000b4ba7
   b4d10:	000b4e29 	.word	0x000b4e29
   b4d14:	000b4945 	.word	0x000b4945

000b4d18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d1c:	b08b      	sub	sp, #44	; 0x2c
   b4d1e:	4605      	mov	r5, r0
   b4d20:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b4d24:	460f      	mov	r7, r1
   b4d26:	4690      	mov	r8, r2
   b4d28:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4d2a:	f7ff fd5b 	bl	b47e4 <spark_cloud_flag_connected>
   b4d2e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4d30:	4683      	mov	fp, r0
   b4d32:	bb38      	cbnz	r0, b4d84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b4d34:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4d38:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4d3a:	a905      	add	r1, sp, #20
   b4d3c:	4630      	mov	r0, r6
   b4d3e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4d42:	f7ff fea5 	bl	b4a90 <_ZN8particle5ErrorC1EOS0_>
   b4d46:	2014      	movs	r0, #20
   b4d48:	f7ff f9a3 	bl	b4092 <_Znwj>
   b4d4c:	4604      	mov	r4, r0
   b4d4e:	b148      	cbz	r0, b4d64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4d50:	2302      	movs	r3, #2
   b4d52:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4d54:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4d56:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4d5a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4d5c:	4631      	mov	r1, r6
   b4d5e:	300c      	adds	r0, #12
   b4d60:	f7ff fe96 	bl	b4a90 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4d64:	4628      	mov	r0, r5
	: __shared_count(__p)
   b4d66:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4d68:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4d6c:	f7ff ff32 	bl	b4bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4d70:	4630      	mov	r0, r6
   b4d72:	f7ff fe9a 	bl	b4aaa <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b4d76:	a805      	add	r0, sp, #20
   b4d78:	f7ff fe97 	bl	b4aaa <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4d7c:	4628      	mov	r0, r5
   b4d7e:	b00b      	add	sp, #44	; 0x2c
   b4d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   b4d84:	230c      	movs	r3, #12
   b4d86:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4d88:	2014      	movs	r0, #20
   b4d8a:	e9cd 4408 	strd	r4, r4, [sp, #32]
   b4d8e:	9307      	str	r3, [sp, #28]
   b4d90:	f7ff f97f 	bl	b4092 <_Znwj>
   b4d94:	4601      	mov	r1, r0
   b4d96:	b118      	cbz	r0, b4da0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4d98:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4d9c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4d9e:	7044      	strb	r4, [r0, #1]
   b4da0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4da2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b4da4:	f7ff ff16 	bl	b4bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b4da8:	4b1e      	ldr	r3, [pc, #120]	; (b4e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b4daa:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b4dac:	2008      	movs	r0, #8
   b4dae:	f7ff f970 	bl	b4092 <_Znwj>
   b4db2:	4604      	mov	r4, r0
   b4db4:	b110      	cbz	r0, b4dbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b4db6:	a903      	add	r1, sp, #12
   b4db8:	f7ff fec8 	bl	b4b4c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4dbc:	9600      	str	r6, [sp, #0]
   b4dbe:	fa5f f38a 	uxtb.w	r3, sl
   b4dc2:	464a      	mov	r2, r9
   b4dc4:	4641      	mov	r1, r8
   b4dc6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b4dc8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b4dca:	f7ff fd13 	bl	b47f4 <spark_send_event>
   b4dce:	b9b8      	cbnz	r0, b4e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b4dd0:	9b03      	ldr	r3, [sp, #12]
   b4dd2:	785b      	ldrb	r3, [r3, #1]
   b4dd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b4dd8:	b993      	cbnz	r3, b4e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b4dda:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b4dde:	a905      	add	r1, sp, #20
   b4de0:	a803      	add	r0, sp, #12
   b4de2:	9205      	str	r2, [sp, #20]
   b4de4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4de8:	f7ff ff18 	bl	b4c1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4dec:	a805      	add	r0, sp, #20
   b4dee:	f7ff fe5c 	bl	b4aaa <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b4df2:	a805      	add	r0, sp, #20
   b4df4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b4df6:	f7ff feb2 	bl	b4b5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b4dfa:	a806      	add	r0, sp, #24
   b4dfc:	f7ff f984 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e00:	a903      	add	r1, sp, #12
   b4e02:	a805      	add	r0, sp, #20
   b4e04:	f7ff fea2 	bl	b4b4c <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e08:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4e0a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e0c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4e0e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4e10:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4e12:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4e14:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4e16:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4e18:	f7ff f976 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4e1c:	a804      	add	r0, sp, #16
   b4e1e:	f7ff f973 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4e22:	e7ab      	b.n	b4d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4e24:	000b4ea5 	.word	0x000b4ea5

000b4e28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4e28:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e2c:	4605      	mov	r5, r0
	switch (__op)
   b4e2e:	d103      	bne.n	b4e38 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4e30:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4e32:	6003      	str	r3, [r0, #0]
      }
   b4e34:	2000      	movs	r0, #0
   b4e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4e38:	2a02      	cmp	r2, #2
   b4e3a:	d010      	beq.n	b4e5e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4e3c:	2a03      	cmp	r2, #3
   b4e3e:	d1f9      	bne.n	b4e34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4e40:	6804      	ldr	r4, [r0, #0]
   b4e42:	2c00      	cmp	r4, #0
   b4e44:	d0f6      	beq.n	b4e34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4e46:	f104 0010 	add.w	r0, r4, #16
   b4e4a:	f7ff fe2e 	bl	b4aaa <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4e4e:	4620      	mov	r0, r4
   b4e50:	f7ff fd94 	bl	b497c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4e54:	2118      	movs	r1, #24
   b4e56:	4620      	mov	r0, r4
   b4e58:	f000 fe3b 	bl	b5ad2 <_ZdlPvj>
   b4e5c:	e7ea      	b.n	b4e34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e5e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4e60:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e62:	f7ff f916 	bl	b4092 <_Znwj>
   b4e66:	4604      	mov	r4, r0
   b4e68:	b150      	cbz	r0, b4e80 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4e6a:	4631      	mov	r1, r6
   b4e6c:	f7ff fec6 	bl	b4bfc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4e70:	6930      	ldr	r0, [r6, #16]
   b4e72:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4e76:	b108      	cbz	r0, b4e7c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4e78:	f000 fe8e 	bl	b5b98 <strdup>
        type_(type) {
   b4e7c:	6120      	str	r0, [r4, #16]
   b4e7e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4e80:	602c      	str	r4, [r5, #0]
	}
   b4e82:	e7d7      	b.n	b4e34 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4e84 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4e84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4e86:	2300      	movs	r3, #0
   b4e88:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4e8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4e8c:	4604      	mov	r4, r0
   b4e8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4e90:	b12b      	cbz	r3, b4e9e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4e92:	2202      	movs	r2, #2
   b4e94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4e96:	68eb      	ldr	r3, [r5, #12]
   b4e98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4e9a:	68ab      	ldr	r3, [r5, #8]
   b4e9c:	60a3      	str	r3, [r4, #8]
    }
   b4e9e:	4620      	mov	r0, r4
   b4ea0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ea4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4ea6:	b089      	sub	sp, #36	; 0x24
   b4ea8:	4604      	mov	r4, r0
   b4eaa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4eac:	a801      	add	r0, sp, #4
   b4eae:	4611      	mov	r1, r2
   b4eb0:	f7ff fe55 	bl	b4b5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4eb4:	b1a4      	cbz	r4, b4ee0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4eb6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4eb8:	b11d      	cbz	r5, b4ec2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4eba:	4628      	mov	r0, r5
   b4ebc:	f000 fe6c 	bl	b5b98 <strdup>
   b4ec0:	4605      	mov	r5, r0
   b4ec2:	a801      	add	r0, sp, #4
   b4ec4:	a903      	add	r1, sp, #12
        type_(type) {
   b4ec6:	9503      	str	r5, [sp, #12]
   b4ec8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4ecc:	f7ff fea6 	bl	b4c1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4ed0:	a803      	add	r0, sp, #12
   b4ed2:	f7ff fdea 	bl	b4aaa <_ZN8particle5ErrorD1Ev>
   b4ed6:	a802      	add	r0, sp, #8
   b4ed8:	f7ff f916 	bl	b4108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4edc:	b009      	add	sp, #36	; 0x24
   b4ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4ee0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4ee2:	2301      	movs	r3, #1
   b4ee4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4ee8:	2a00      	cmp	r2, #0
   b4eea:	d103      	bne.n	b4ef4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4eec:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4ef0:	2900      	cmp	r1, #0
   b4ef2:	d1f7      	bne.n	b4ee4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4ef4:	d1ef      	bne.n	b4ed6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4ef6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b4ef8:	f3bf 8f5b 	dmb	ish
   b4efc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4efe:	1d2b      	adds	r3, r5, #4
   b4f00:	f3bf 8f5b 	dmb	ish
   b4f04:	e853 6f00 	ldrex	r6, [r3]
   b4f08:	e843 4200 	strex	r2, r4, [r3]
   b4f0c:	2a00      	cmp	r2, #0
   b4f0e:	d1f9      	bne.n	b4f04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b4f10:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4f14:	2e00      	cmp	r6, #0
   b4f16:	d0de      	beq.n	b4ed6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b4f18:	4620      	mov	r0, r4
   b4f1a:	f7ff fc37 	bl	b478c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4f1e:	4607      	mov	r7, r0
   b4f20:	b160      	cbz	r0, b4f3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4f22:	f105 010c 	add.w	r1, r5, #12
   b4f26:	4630      	mov	r0, r6
   b4f28:	f7ff fe44 	bl	b4bb4 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b4f2c:	4630      	mov	r0, r6
   b4f2e:	f7ff fd25 	bl	b497c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4f32:	2110      	movs	r1, #16
   b4f34:	4630      	mov	r0, r6
   b4f36:	f000 fdcc 	bl	b5ad2 <_ZdlPvj>
   b4f3a:	e7cc      	b.n	b4ed6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4f3c:	4631      	mov	r1, r6
   b4f3e:	a803      	add	r0, sp, #12
   b4f40:	f7ff ffa0 	bl	b4e84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4f44:	7b2b      	ldrb	r3, [r5, #12]
   b4f46:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4f4a:	2010      	movs	r0, #16
   b4f4c:	f7ff f8a1 	bl	b4092 <_Znwj>
   b4f50:	4605      	mov	r5, r0
   b4f52:	b1d0      	cbz	r0, b4f8a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b4f54:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f56:	2014      	movs	r0, #20
   b4f58:	f7ff f89b 	bl	b4092 <_Znwj>
   b4f5c:	4604      	mov	r4, r0
   b4f5e:	b178      	cbz	r0, b4f80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b4f60:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4f62:	4601      	mov	r1, r0
   b4f64:	a803      	add	r0, sp, #12
   b4f66:	f7ff fd12 	bl	b498e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f6a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4f6c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f6e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4f70:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b4f72:	9205      	str	r2, [sp, #20]
   b4f74:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4f76:	60e3      	str	r3, [r4, #12]
   b4f78:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b4f7c:	9206      	str	r2, [sp, #24]
   b4f7e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b4f80:	4b06      	ldr	r3, [pc, #24]	; (b4f9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b4f82:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4f84:	4b06      	ldr	r3, [pc, #24]	; (b4fa0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4f86:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4f88:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b4f8a:	a803      	add	r0, sp, #12
   b4f8c:	f7ff fcf6 	bl	b497c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4f90:	2200      	movs	r2, #0
   b4f92:	4629      	mov	r1, r5
   b4f94:	4803      	ldr	r0, [pc, #12]	; (b4fa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b4f96:	f7ff fc01 	bl	b479c <application_thread_invoke>
   b4f9a:	e7c7      	b.n	b4f2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b4f9c:	000b4bc7 	.word	0x000b4bc7
   b4fa0:	000b4fa9 	.word	0x000b4fa9
   b4fa4:	000b4945 	.word	0x000b4945

000b4fa8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b4fa8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4faa:	b570      	push	{r4, r5, r6, lr}
   b4fac:	4604      	mov	r4, r0
	switch (__op)
   b4fae:	d103      	bne.n	b4fb8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4fb0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4fb2:	6003      	str	r3, [r0, #0]
      }
   b4fb4:	2000      	movs	r0, #0
   b4fb6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b4fb8:	2a02      	cmp	r2, #2
   b4fba:	d00c      	beq.n	b4fd6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b4fbc:	2a03      	cmp	r2, #3
   b4fbe:	d1f9      	bne.n	b4fb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4fc0:	6804      	ldr	r4, [r0, #0]
   b4fc2:	2c00      	cmp	r4, #0
   b4fc4:	d0f6      	beq.n	b4fb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4fc6:	4620      	mov	r0, r4
   b4fc8:	f7ff fcd8 	bl	b497c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4fcc:	2114      	movs	r1, #20
   b4fce:	4620      	mov	r0, r4
   b4fd0:	f000 fd7f 	bl	b5ad2 <_ZdlPvj>
   b4fd4:	e7ee      	b.n	b4fb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4fd6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b4fd8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4fda:	f7ff f85a 	bl	b4092 <_Znwj>
   b4fde:	4605      	mov	r5, r0
   b4fe0:	b120      	cbz	r0, b4fec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b4fe2:	4631      	mov	r1, r6
   b4fe4:	f7ff ff4e 	bl	b4e84 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b4fe8:	7c33      	ldrb	r3, [r6, #16]
   b4fea:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b4fec:	6025      	str	r5, [r4, #0]
	}
   b4fee:	e7e1      	b.n	b4fb4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b4ff0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4ff0:	2200      	movs	r2, #0
   b4ff2:	6840      	ldr	r0, [r0, #4]
   b4ff4:	4611      	mov	r1, r2
   b4ff6:	f7ff bc45 	b.w	b4884 <network_listening>

000b4ffa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ffa:	2200      	movs	r2, #0
   b4ffc:	6840      	ldr	r0, [r0, #4]
   b4ffe:	4611      	mov	r1, r2
   b5000:	f7ff bc50 	b.w	b48a4 <network_get_listen_timeout>

000b5004 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5004:	6840      	ldr	r0, [r0, #4]
   b5006:	2200      	movs	r2, #0
   b5008:	f7ff bc44 	b.w	b4894 <network_set_listen_timeout>

000b500c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b500c:	6840      	ldr	r0, [r0, #4]
   b500e:	2200      	movs	r2, #0
   b5010:	f081 0101 	eor.w	r1, r1, #1
   b5014:	f7ff bc2e 	b.w	b4874 <network_listen>

000b5018 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5018:	2300      	movs	r3, #0
   b501a:	6840      	ldr	r0, [r0, #4]
   b501c:	461a      	mov	r2, r3
   b501e:	4619      	mov	r1, r3
   b5020:	f7ff bc20 	b.w	b4864 <network_off>

000b5024 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5024:	2300      	movs	r3, #0
   b5026:	6840      	ldr	r0, [r0, #4]
   b5028:	461a      	mov	r2, r3
   b502a:	4619      	mov	r1, r3
   b502c:	f7ff bc12 	b.w	b4854 <network_on>

000b5030 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5030:	2200      	movs	r2, #0
   b5032:	6840      	ldr	r0, [r0, #4]
   b5034:	4611      	mov	r1, r2
   b5036:	f7ff bc05 	b.w	b4844 <network_ready>

000b503a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b503a:	2200      	movs	r2, #0
   b503c:	6840      	ldr	r0, [r0, #4]
   b503e:	4611      	mov	r1, r2
   b5040:	f7ff bbf0 	b.w	b4824 <network_connecting>

000b5044 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5044:	6840      	ldr	r0, [r0, #4]
   b5046:	2200      	movs	r2, #0
   b5048:	2102      	movs	r1, #2
   b504a:	f7ff bbf3 	b.w	b4834 <network_disconnect>

000b504e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b504e:	2300      	movs	r3, #0
   b5050:	6840      	ldr	r0, [r0, #4]
   b5052:	461a      	mov	r2, r3
   b5054:	f7ff bbde 	b.w	b4814 <network_connect>

000b5058 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5058:	4b02      	ldr	r3, [pc, #8]	; (b5064 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b505a:	2203      	movs	r2, #3
   b505c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b505e:	4a02      	ldr	r2, [pc, #8]	; (b5068 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5060:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5062:	4770      	bx	lr
   b5064:	2003e748 	.word	0x2003e748
   b5068:	000b5e9c 	.word	0x000b5e9c

000b506c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b506c:	4770      	bx	lr

000b506e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b506e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5070:	4606      	mov	r6, r0
   b5072:	4615      	mov	r5, r2
   b5074:	460c      	mov	r4, r1
   b5076:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5078:	42bc      	cmp	r4, r7
   b507a:	d006      	beq.n	b508a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b507c:	6833      	ldr	r3, [r6, #0]
   b507e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5082:	689b      	ldr	r3, [r3, #8]
   b5084:	4630      	mov	r0, r6
   b5086:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5088:	e7f6      	b.n	b5078 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b508a:	4628      	mov	r0, r5
   b508c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b508e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b508e:	7c00      	ldrb	r0, [r0, #16]
   b5090:	2200      	movs	r2, #0
   b5092:	f7ff ba8b 	b.w	b45ac <hal_i2c_write>

000b5096 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5096:	7c00      	ldrb	r0, [r0, #16]
   b5098:	2100      	movs	r1, #0
   b509a:	f7ff ba8f 	b.w	b45bc <hal_i2c_available>

000b509e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b509e:	7c00      	ldrb	r0, [r0, #16]
   b50a0:	2100      	movs	r1, #0
   b50a2:	f7ff ba93 	b.w	b45cc <hal_i2c_read>

000b50a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b50a6:	7c00      	ldrb	r0, [r0, #16]
   b50a8:	2100      	movs	r1, #0
   b50aa:	f7ff ba97 	b.w	b45dc <hal_i2c_peek>

000b50ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b50ae:	7c00      	ldrb	r0, [r0, #16]
   b50b0:	2100      	movs	r1, #0
   b50b2:	f7ff ba9b 	b.w	b45ec <hal_i2c_flush>

000b50b6 <_ZN7TwoWireD0Ev>:
   b50b6:	b510      	push	{r4, lr}
   b50b8:	2114      	movs	r1, #20
   b50ba:	4604      	mov	r4, r0
   b50bc:	f000 fd09 	bl	b5ad2 <_ZdlPvj>
   b50c0:	4620      	mov	r0, r4
   b50c2:	bd10      	pop	{r4, pc}

000b50c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b50c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b50c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b50ca:	4604      	mov	r4, r0
   b50cc:	4608      	mov	r0, r1
   b50ce:	2100      	movs	r1, #0
   b50d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b50d4:	4b03      	ldr	r3, [pc, #12]	; (b50e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b50d6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b50d8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b50da:	4611      	mov	r1, r2
   b50dc:	f7ff fa96 	bl	b460c <hal_i2c_init>
}
   b50e0:	4620      	mov	r0, r4
   b50e2:	bd10      	pop	{r4, pc}
   b50e4:	000b5ed8 	.word	0x000b5ed8

000b50e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b50e8:	4770      	bx	lr

000b50ea <_ZN9IPAddressD0Ev>:
   b50ea:	b510      	push	{r4, lr}
   b50ec:	2118      	movs	r1, #24
   b50ee:	4604      	mov	r4, r0
   b50f0:	f000 fcef 	bl	b5ad2 <_ZdlPvj>
   b50f4:	4620      	mov	r0, r4
   b50f6:	bd10      	pop	{r4, pc}

000b50f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b50f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b50fa:	7d03      	ldrb	r3, [r0, #20]
   b50fc:	2b06      	cmp	r3, #6
{
   b50fe:	b08d      	sub	sp, #52	; 0x34
   b5100:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5102:	f100 0704 	add.w	r7, r0, #4
   b5106:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b510a:	d012      	beq.n	b5132 <_ZNK9IPAddress7printToER5Print+0x3a>
   b510c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5110:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5114:	220a      	movs	r2, #10
   b5116:	4630      	mov	r0, r6
   b5118:	f000 f95d 	bl	b53d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b511c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b511e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5120:	d019      	beq.n	b5156 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5122:	2c00      	cmp	r4, #0
   b5124:	d0f4      	beq.n	b5110 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5126:	212e      	movs	r1, #46	; 0x2e
   b5128:	4630      	mov	r0, r6
   b512a:	f000 f93b 	bl	b53a4 <_ZN5Print5printEc>
   b512e:	4404      	add	r4, r0
   b5130:	e7ee      	b.n	b5110 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5132:	232f      	movs	r3, #47	; 0x2f
   b5134:	466a      	mov	r2, sp
   b5136:	4639      	mov	r1, r7
   b5138:	200a      	movs	r0, #10
		buf[0] = 0;
   b513a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b513e:	f7ff fa6d 	bl	b461c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5142:	4668      	mov	r0, sp
   b5144:	f000 fd45 	bl	b5bd2 <strlen>
   b5148:	6833      	ldr	r3, [r6, #0]
   b514a:	4602      	mov	r2, r0
   b514c:	68db      	ldr	r3, [r3, #12]
   b514e:	4669      	mov	r1, sp
   b5150:	4630      	mov	r0, r6
   b5152:	4798      	blx	r3
   b5154:	4604      	mov	r4, r0
    }
    return n;
}
   b5156:	4620      	mov	r0, r4
   b5158:	b00d      	add	sp, #52	; 0x34
   b515a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b515c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b515c:	b510      	push	{r4, lr}
   b515e:	4b05      	ldr	r3, [pc, #20]	; (b5174 <_ZN9IPAddressC1Ev+0x18>)
   b5160:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5162:	2211      	movs	r2, #17
   b5164:	f840 3b04 	str.w	r3, [r0], #4
   b5168:	2100      	movs	r1, #0
   b516a:	f000 fcd5 	bl	b5b18 <memset>
}
   b516e:	4620      	mov	r0, r4
   b5170:	bd10      	pop	{r4, pc}
   b5172:	bf00      	nop
   b5174:	000b5f00 	.word	0x000b5f00

000b5178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5178:	4603      	mov	r3, r0
   b517a:	4a07      	ldr	r2, [pc, #28]	; (b5198 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b517c:	b510      	push	{r4, lr}
   b517e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5182:	f101 0210 	add.w	r2, r1, #16
   b5186:	f851 4b04 	ldr.w	r4, [r1], #4
   b518a:	f843 4b04 	str.w	r4, [r3], #4
   b518e:	4291      	cmp	r1, r2
   b5190:	d1f9      	bne.n	b5186 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5192:	780a      	ldrb	r2, [r1, #0]
   b5194:	701a      	strb	r2, [r3, #0]
}
   b5196:	bd10      	pop	{r4, pc}
   b5198:	000b5f00 	.word	0x000b5f00

000b519c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b519c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b519e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b51a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b51a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b51aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b51ae:	2304      	movs	r3, #4
   b51b0:	6041      	str	r1, [r0, #4]
   b51b2:	7503      	strb	r3, [r0, #20]
}
   b51b4:	bd10      	pop	{r4, pc}
	...

000b51b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b51b8:	b507      	push	{r0, r1, r2, lr}
   b51ba:	4b06      	ldr	r3, [pc, #24]	; (b51d4 <_ZN9IPAddressC1EPKh+0x1c>)
   b51bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b51be:	78cb      	ldrb	r3, [r1, #3]
   b51c0:	9300      	str	r3, [sp, #0]
   b51c2:	788b      	ldrb	r3, [r1, #2]
   b51c4:	784a      	ldrb	r2, [r1, #1]
   b51c6:	7809      	ldrb	r1, [r1, #0]
   b51c8:	f7ff ffe8 	bl	b519c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b51cc:	b003      	add	sp, #12
   b51ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b51d2:	bf00      	nop
   b51d4:	000b5f00 	.word	0x000b5f00

000b51d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b51d8:	4b01      	ldr	r3, [pc, #4]	; (b51e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b51da:	4a02      	ldr	r2, [pc, #8]	; (b51e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b51dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b51de:	4770      	bx	lr
   b51e0:	2003e750 	.word	0x2003e750
   b51e4:	000b5f0c 	.word	0x000b5f0c

000b51e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b51e8:	2300      	movs	r3, #0
   b51ea:	6840      	ldr	r0, [r0, #4]
   b51ec:	461a      	mov	r2, r3
   b51ee:	f7ff bb11 	b.w	b4814 <network_connect>

000b51f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b51f2:	6840      	ldr	r0, [r0, #4]
   b51f4:	2200      	movs	r2, #0
   b51f6:	2102      	movs	r1, #2
   b51f8:	f7ff bb1c 	b.w	b4834 <network_disconnect>

000b51fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b51fc:	2200      	movs	r2, #0
   b51fe:	6840      	ldr	r0, [r0, #4]
   b5200:	4611      	mov	r1, r2
   b5202:	f7ff bb0f 	b.w	b4824 <network_connecting>

000b5206 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5206:	2200      	movs	r2, #0
   b5208:	6840      	ldr	r0, [r0, #4]
   b520a:	4611      	mov	r1, r2
   b520c:	f7ff bb1a 	b.w	b4844 <network_ready>

000b5210 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5210:	2300      	movs	r3, #0
   b5212:	6840      	ldr	r0, [r0, #4]
   b5214:	461a      	mov	r2, r3
   b5216:	4619      	mov	r1, r3
   b5218:	f7ff bb1c 	b.w	b4854 <network_on>

000b521c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b521c:	2300      	movs	r3, #0
   b521e:	6840      	ldr	r0, [r0, #4]
   b5220:	461a      	mov	r2, r3
   b5222:	4619      	mov	r1, r3
   b5224:	f7ff bb1e 	b.w	b4864 <network_off>

000b5228 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5228:	6840      	ldr	r0, [r0, #4]
   b522a:	2100      	movs	r1, #0
   b522c:	f7ff bb42 	b.w	b48b4 <network_is_on>

000b5230 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5230:	6840      	ldr	r0, [r0, #4]
   b5232:	2100      	movs	r1, #0
   b5234:	f7ff bb46 	b.w	b48c4 <network_is_off>

000b5238 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5238:	6840      	ldr	r0, [r0, #4]
   b523a:	2200      	movs	r2, #0
   b523c:	f081 0101 	eor.w	r1, r1, #1
   b5240:	f7ff bb18 	b.w	b4874 <network_listen>

000b5244 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5244:	6840      	ldr	r0, [r0, #4]
   b5246:	2200      	movs	r2, #0
   b5248:	f7ff bb24 	b.w	b4894 <network_set_listen_timeout>

000b524c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b524c:	2200      	movs	r2, #0
   b524e:	6840      	ldr	r0, [r0, #4]
   b5250:	4611      	mov	r1, r2
   b5252:	f7ff bb27 	b.w	b48a4 <network_get_listen_timeout>

000b5256 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5256:	2200      	movs	r2, #0
   b5258:	6840      	ldr	r0, [r0, #4]
   b525a:	4611      	mov	r1, r2
   b525c:	f7ff bb12 	b.w	b4884 <network_listening>

000b5260 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5264:	b095      	sub	sp, #84	; 0x54
   b5266:	4614      	mov	r4, r2
   b5268:	460d      	mov	r5, r1
   b526a:	4607      	mov	r7, r0
    IPAddress addr;
   b526c:	f7ff ff76 	bl	b515c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5270:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5272:	221c      	movs	r2, #28
   b5274:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5276:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5278:	f000 fc4e 	bl	b5b18 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b527c:	2340      	movs	r3, #64	; 0x40
   b527e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5280:	4620      	mov	r0, r4
   b5282:	466b      	mov	r3, sp
   b5284:	aa0c      	add	r2, sp, #48	; 0x30
   b5286:	2100      	movs	r1, #0
   b5288:	f7ff f9d8 	bl	b463c <netdb_getaddrinfo>
    if (!r) {
   b528c:	4604      	mov	r4, r0
   b528e:	2800      	cmp	r0, #0
   b5290:	d14b      	bne.n	b532a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5292:	4602      	mov	r2, r0
   b5294:	2101      	movs	r1, #1
   b5296:	6868      	ldr	r0, [r5, #4]
   b5298:	f7ff fad4 	bl	b4844 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b529c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b529e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52a0:	4622      	mov	r2, r4
   b52a2:	6868      	ldr	r0, [r5, #4]
   b52a4:	f7ff face 	bl	b4844 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52a8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52aa:	4681      	mov	r9, r0
        bool ok = false;
   b52ac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52ae:	2e00      	cmp	r6, #0
   b52b0:	d03b      	beq.n	b532a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b52b2:	2900      	cmp	r1, #0
   b52b4:	d139      	bne.n	b532a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b52b6:	6873      	ldr	r3, [r6, #4]
   b52b8:	2b02      	cmp	r3, #2
   b52ba:	d003      	beq.n	b52c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b52bc:	2b0a      	cmp	r3, #10
   b52be:	d011      	beq.n	b52e4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52c0:	69f6      	ldr	r6, [r6, #28]
   b52c2:	e7f4      	b.n	b52ae <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b52c4:	f1b8 0f00 	cmp.w	r8, #0
   b52c8:	d0fa      	beq.n	b52c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b52ca:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b52cc:	a806      	add	r0, sp, #24
   b52ce:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b52d0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b52d2:	f7ff ff71 	bl	b51b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b52d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52d8:	1d3c      	adds	r4, r7, #4
   b52da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52dc:	682b      	ldr	r3, [r5, #0]
   b52de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b52e0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b52e2:	e7ed      	b.n	b52c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b52e4:	f1b9 0f00 	cmp.w	r9, #0
   b52e8:	d0ea      	beq.n	b52c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b52ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b52ec:	2210      	movs	r2, #16
   b52ee:	a801      	add	r0, sp, #4
   b52f0:	f000 fc12 	bl	b5b18 <memset>
                    a.v = 6;
   b52f4:	2306      	movs	r3, #6
   b52f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b52fa:	ad01      	add	r5, sp, #4
   b52fc:	f104 0308 	add.w	r3, r4, #8
   b5300:	3418      	adds	r4, #24
   b5302:	6818      	ldr	r0, [r3, #0]
   b5304:	6859      	ldr	r1, [r3, #4]
   b5306:	462a      	mov	r2, r5
   b5308:	c203      	stmia	r2!, {r0, r1}
   b530a:	3308      	adds	r3, #8
   b530c:	42a3      	cmp	r3, r4
   b530e:	4615      	mov	r5, r2
   b5310:	d1f7      	bne.n	b5302 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5312:	a901      	add	r1, sp, #4
   b5314:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5316:	ad07      	add	r5, sp, #28
   b5318:	f7ff ff2e 	bl	b5178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b531c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b531e:	1d3c      	adds	r4, r7, #4
   b5320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5322:	682b      	ldr	r3, [r5, #0]
   b5324:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5326:	4649      	mov	r1, r9
   b5328:	e7ca      	b.n	b52c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b532a:	9800      	ldr	r0, [sp, #0]
   b532c:	f7ff f97e 	bl	b462c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5330:	4638      	mov	r0, r7
   b5332:	b015      	add	sp, #84	; 0x54
   b5334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5338 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5338:	4b02      	ldr	r3, [pc, #8]	; (b5344 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b533a:	4a03      	ldr	r2, [pc, #12]	; (b5348 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b533c:	601a      	str	r2, [r3, #0]
   b533e:	2200      	movs	r2, #0
   b5340:	605a      	str	r2, [r3, #4]

} // spark
   b5342:	4770      	bx	lr
   b5344:	2003e754 	.word	0x2003e754
   b5348:	000b5f18 	.word	0x000b5f18

000b534c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b534c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b534e:	4606      	mov	r6, r0
   b5350:	460d      	mov	r5, r1
  size_t n = 0;
   b5352:	188f      	adds	r7, r1, r2
   b5354:	2400      	movs	r4, #0
  while (size--) {
   b5356:	42bd      	cmp	r5, r7
   b5358:	d00c      	beq.n	b5374 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b535a:	6833      	ldr	r3, [r6, #0]
   b535c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5360:	689b      	ldr	r3, [r3, #8]
   b5362:	4630      	mov	r0, r6
   b5364:	4798      	blx	r3
     if (chunk>=0)
   b5366:	1e03      	subs	r3, r0, #0
   b5368:	db01      	blt.n	b536e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b536a:	441c      	add	r4, r3
  while (size--) {
   b536c:	e7f3      	b.n	b5356 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b536e:	2c00      	cmp	r4, #0
   b5370:	bf08      	it	eq
   b5372:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5374:	4620      	mov	r0, r4
   b5376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5378 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5378:	b513      	push	{r0, r1, r4, lr}
   b537a:	4604      	mov	r4, r0
    }
   b537c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b537e:	b159      	cbz	r1, b5398 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5380:	9101      	str	r1, [sp, #4]
   b5382:	f000 fc26 	bl	b5bd2 <strlen>
   b5386:	6823      	ldr	r3, [r4, #0]
   b5388:	9901      	ldr	r1, [sp, #4]
   b538a:	68db      	ldr	r3, [r3, #12]
   b538c:	4602      	mov	r2, r0
   b538e:	4620      	mov	r0, r4
    }
   b5390:	b002      	add	sp, #8
   b5392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5396:	4718      	bx	r3
    }
   b5398:	b002      	add	sp, #8
   b539a:	bd10      	pop	{r4, pc}

000b539c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b539c:	b508      	push	{r3, lr}
  return write(str);
   b539e:	f7ff ffeb 	bl	b5378 <_ZN5Print5writeEPKc>
}
   b53a2:	bd08      	pop	{r3, pc}

000b53a4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b53a4:	6803      	ldr	r3, [r0, #0]
   b53a6:	689b      	ldr	r3, [r3, #8]
   b53a8:	4718      	bx	r3

000b53aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b53aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b53ac:	210d      	movs	r1, #13
{
   b53ae:	4605      	mov	r5, r0
  size_t n = print('\r');
   b53b0:	f7ff fff8 	bl	b53a4 <_ZN5Print5printEc>
  n += print('\n');
   b53b4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b53b6:	4604      	mov	r4, r0
  n += print('\n');
   b53b8:	4628      	mov	r0, r5
   b53ba:	f7ff fff3 	bl	b53a4 <_ZN5Print5printEc>
  return n;
}
   b53be:	4420      	add	r0, r4
   b53c0:	bd38      	pop	{r3, r4, r5, pc}

000b53c2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b53c2:	b538      	push	{r3, r4, r5, lr}
   b53c4:	4605      	mov	r5, r0
  return write(str);
   b53c6:	f7ff ffd7 	bl	b5378 <_ZN5Print5writeEPKc>
   b53ca:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b53cc:	4628      	mov	r0, r5
   b53ce:	f7ff ffec 	bl	b53aa <_ZN5Print7printlnEv>
  return n;
}
   b53d2:	4420      	add	r0, r4
   b53d4:	bd38      	pop	{r3, r4, r5, pc}

000b53d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b53d6:	b530      	push	{r4, r5, lr}
   b53d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b53da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b53dc:	2a01      	cmp	r2, #1
  *str = '\0';
   b53de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b53e2:	bf98      	it	ls
   b53e4:	220a      	movls	r2, #10
   b53e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b53e8:	460d      	mov	r5, r1
   b53ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b53ee:	fb01 5312 	mls	r3, r1, r2, r5
   b53f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b53f6:	2b09      	cmp	r3, #9
   b53f8:	bf94      	ite	ls
   b53fa:	3330      	addls	r3, #48	; 0x30
   b53fc:	3337      	addhi	r3, #55	; 0x37
   b53fe:	b2db      	uxtb	r3, r3
  } while(n);
   b5400:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5402:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5406:	d9ef      	bls.n	b53e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5408:	4621      	mov	r1, r4
   b540a:	f7ff ffb5 	bl	b5378 <_ZN5Print5writeEPKc>
}
   b540e:	b00b      	add	sp, #44	; 0x2c
   b5410:	bd30      	pop	{r4, r5, pc}

000b5412 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b5412:	b510      	push	{r4, lr}
   b5414:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b5416:	f7ff fab1 	bl	b497c <_ZNSt14_Function_baseD1Ev>
   b541a:	4620      	mov	r0, r4
   b541c:	bd10      	pop	{r4, pc}
	...

000b5420 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5420:	4803      	ldr	r0, [pc, #12]	; (b5430 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b5422:	4a04      	ldr	r2, [pc, #16]	; (b5434 <_GLOBAL__sub_I_RGB+0x14>)
   b5424:	4904      	ldr	r1, [pc, #16]	; (b5438 <_GLOBAL__sub_I_RGB+0x18>)
   b5426:	2300      	movs	r3, #0
   b5428:	6083      	str	r3, [r0, #8]
   b542a:	f000 bb4d 	b.w	b5ac8 <__aeabi_atexit>
   b542e:	bf00      	nop
   b5430:	2003e75c 	.word	0x2003e75c
   b5434:	2003e6cc 	.word	0x2003e6cc
   b5438:	000b5413 	.word	0x000b5413

000b543c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b543c:	b510      	push	{r4, lr}
   b543e:	4604      	mov	r4, r0
   b5440:	4608      	mov	r0, r1
{
    _spi = spi;
   b5442:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5444:	f7ff f902 	bl	b464c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5448:	2300      	movs	r3, #0
   b544a:	6063      	str	r3, [r4, #4]
}
   b544c:	4620      	mov	r0, r4
   b544e:	bd10      	pop	{r4, pc}

000b5450 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5450:	b510      	push	{r4, lr}
   b5452:	4604      	mov	r4, r0
{
	free(buffer);
   b5454:	6800      	ldr	r0, [r0, #0]
   b5456:	f7ff fa45 	bl	b48e4 <free>
}
   b545a:	4620      	mov	r0, r4
   b545c:	bd10      	pop	{r4, pc}

000b545e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b545e:	b510      	push	{r4, lr}
   b5460:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5462:	6800      	ldr	r0, [r0, #0]
   b5464:	b108      	cbz	r0, b546a <_ZN6String10invalidateEv+0xc>
   b5466:	f7ff fa3d 	bl	b48e4 <free>
	buffer = NULL;
   b546a:	2300      	movs	r3, #0
	capacity = len = 0;
   b546c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5470:	6023      	str	r3, [r4, #0]
}
   b5472:	bd10      	pop	{r4, pc}

000b5474 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5474:	b538      	push	{r3, r4, r5, lr}
   b5476:	4604      	mov	r4, r0
   b5478:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b547a:	6800      	ldr	r0, [r0, #0]
   b547c:	3101      	adds	r1, #1
   b547e:	f7ff fa39 	bl	b48f4 <realloc>
	if (newbuffer) {
   b5482:	b110      	cbz	r0, b548a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5484:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5488:	2001      	movs	r0, #1
	}
	return 0;
}
   b548a:	bd38      	pop	{r3, r4, r5, pc}

000b548c <_ZN6String7reserveEj>:
{
   b548c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b548e:	6803      	ldr	r3, [r0, #0]
{
   b5490:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5492:	b123      	cbz	r3, b549e <_ZN6String7reserveEj+0x12>
   b5494:	6843      	ldr	r3, [r0, #4]
   b5496:	428b      	cmp	r3, r1
   b5498:	d301      	bcc.n	b549e <_ZN6String7reserveEj+0x12>
   b549a:	2001      	movs	r0, #1
}
   b549c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b549e:	4620      	mov	r0, r4
   b54a0:	f7ff ffe8 	bl	b5474 <_ZN6String12changeBufferEj>
   b54a4:	2800      	cmp	r0, #0
   b54a6:	d0f9      	beq.n	b549c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b54a8:	68a3      	ldr	r3, [r4, #8]
   b54aa:	2b00      	cmp	r3, #0
   b54ac:	d1f5      	bne.n	b549a <_ZN6String7reserveEj+0xe>
   b54ae:	6822      	ldr	r2, [r4, #0]
   b54b0:	7013      	strb	r3, [r2, #0]
   b54b2:	e7f2      	b.n	b549a <_ZN6String7reserveEj+0xe>

000b54b4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b54b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b54b6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b54b8:	4611      	mov	r1, r2
   b54ba:	9201      	str	r2, [sp, #4]
{
   b54bc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b54be:	f7ff ffe5 	bl	b548c <_ZN6String7reserveEj>
   b54c2:	9a01      	ldr	r2, [sp, #4]
   b54c4:	b928      	cbnz	r0, b54d2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b54c6:	4620      	mov	r0, r4
   b54c8:	f7ff ffc9 	bl	b545e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b54cc:	4620      	mov	r0, r4
   b54ce:	b003      	add	sp, #12
   b54d0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b54d2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b54d4:	4629      	mov	r1, r5
   b54d6:	6820      	ldr	r0, [r4, #0]
   b54d8:	f000 fb10 	bl	b5afc <memcpy>
	buffer[len] = 0;
   b54dc:	6822      	ldr	r2, [r4, #0]
   b54de:	68a3      	ldr	r3, [r4, #8]
   b54e0:	2100      	movs	r1, #0
   b54e2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b54e4:	e7f2      	b.n	b54cc <_ZN6String4copyEPKcj+0x18>

000b54e6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b54e6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b54e8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b54ea:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b54ee:	4604      	mov	r4, r0
	len = 0;
   b54f0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b54f2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b54f4:	b141      	cbz	r1, b5508 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b54f6:	4608      	mov	r0, r1
   b54f8:	9101      	str	r1, [sp, #4]
   b54fa:	f000 fb6a 	bl	b5bd2 <strlen>
   b54fe:	9901      	ldr	r1, [sp, #4]
   b5500:	4602      	mov	r2, r0
   b5502:	4620      	mov	r0, r4
   b5504:	f7ff ffd6 	bl	b54b4 <_ZN6String4copyEPKcj>
}
   b5508:	4620      	mov	r0, r4
   b550a:	b002      	add	sp, #8
   b550c:	bd10      	pop	{r4, pc}

000b550e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b550e:	4288      	cmp	r0, r1
{
   b5510:	b510      	push	{r4, lr}
   b5512:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5514:	d005      	beq.n	b5522 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5516:	680b      	ldr	r3, [r1, #0]
   b5518:	b12b      	cbz	r3, b5526 <_ZN6StringaSERKS_+0x18>
   b551a:	688a      	ldr	r2, [r1, #8]
   b551c:	4619      	mov	r1, r3
   b551e:	f7ff ffc9 	bl	b54b4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5522:	4620      	mov	r0, r4
   b5524:	bd10      	pop	{r4, pc}
	else invalidate();
   b5526:	f7ff ff9a 	bl	b545e <_ZN6String10invalidateEv>
   b552a:	e7fa      	b.n	b5522 <_ZN6StringaSERKS_+0x14>

000b552c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b552c:	b510      	push	{r4, lr}
	buffer = NULL;
   b552e:	2300      	movs	r3, #0
String::String(const String &value)
   b5530:	4604      	mov	r4, r0
	capacity = 0;
   b5532:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5536:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5538:	7303      	strb	r3, [r0, #12]
	*this = value;
   b553a:	f7ff ffe8 	bl	b550e <_ZN6StringaSERKS_>
}
   b553e:	4620      	mov	r0, r4
   b5540:	bd10      	pop	{r4, pc}

000b5542 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b5542:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5544:	6882      	ldr	r2, [r0, #8]
   b5546:	b93a      	cbnz	r2, b5558 <_ZNK6String6equalsEPKc+0x16>
   b5548:	b121      	cbz	r1, b5554 <_ZNK6String6equalsEPKc+0x12>
   b554a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b554c:	fab0 f080 	clz	r0, r0
   b5550:	0940      	lsrs	r0, r0, #5
   b5552:	e000      	b.n	b5556 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b5554:	2001      	movs	r0, #1
}
   b5556:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b5558:	6800      	ldr	r0, [r0, #0]
   b555a:	b909      	cbnz	r1, b5560 <_ZNK6String6equalsEPKc+0x1e>
   b555c:	7800      	ldrb	r0, [r0, #0]
   b555e:	e7f5      	b.n	b554c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b5560:	f000 fb10 	bl	b5b84 <strcmp>
   b5564:	e7f2      	b.n	b554c <_ZNK6String6equalsEPKc+0xa>

000b5566 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b5566:	b510      	push	{r4, lr}
   b5568:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b556a:	6800      	ldr	r0, [r0, #0]
   b556c:	b118      	cbz	r0, b5576 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b556e:	f7ff f9b9 	bl	b48e4 <free>
            wakeupSource_ = nullptr;
   b5572:	2300      	movs	r3, #0
   b5574:	6023      	str	r3, [r4, #0]
        }
    }
   b5576:	bd10      	pop	{r4, pc}

000b5578 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b5578:	b510      	push	{r4, lr}
   b557a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   b557c:	f7ff fff3 	bl	b5566 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
class SystemClass {
   b5580:	4620      	mov	r0, r4
   b5582:	bd10      	pop	{r4, pc}

000b5584 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b5584:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5586:	4b09      	ldr	r3, [pc, #36]	; (b55ac <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   b5588:	4c09      	ldr	r4, [pc, #36]	; (b55b0 <_GLOBAL__sub_I_System+0x2c>)
   b558a:	2202      	movs	r2, #2
   b558c:	601a      	str	r2, [r3, #0]
   b558e:	2000      	movs	r0, #0
    SleepResult() {}
   b5590:	4b08      	ldr	r3, [pc, #32]	; (b55b4 <_GLOBAL__sub_I_System+0x30>)
   b5592:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5594:	e9c4 0000 	strd	r0, r0, [r4]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5598:	f7ff f8e8 	bl	b476c <set_system_mode>
SystemClass System;
   b559c:	4620      	mov	r0, r4
   b559e:	4a06      	ldr	r2, [pc, #24]	; (b55b8 <_GLOBAL__sub_I_System+0x34>)
   b55a0:	4906      	ldr	r1, [pc, #24]	; (b55bc <_GLOBAL__sub_I_System+0x38>)
   b55a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b55a6:	f000 ba8f 	b.w	b5ac8 <__aeabi_atexit>
   b55aa:	bf00      	nop
   b55ac:	2003e778 	.word	0x2003e778
   b55b0:	2003e76c 	.word	0x2003e76c
   b55b4:	ffff0000 	.word	0xffff0000
   b55b8:	2003e6cc 	.word	0x2003e6cc
   b55bc:	000b5579 	.word	0x000b5579

000b55c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b55c0:	4b02      	ldr	r3, [pc, #8]	; (b55cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b55c2:	681a      	ldr	r2, [r3, #0]
   b55c4:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b55c6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b55c8:	4770      	bx	lr
   b55ca:	bf00      	nop
   b55cc:	2003e664 	.word	0x2003e664
   b55d0:	2003e77c 	.word	0x2003e77c

000b55d4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b55d4:	4770      	bx	lr

000b55d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b55d6:	7441      	strb	r1, [r0, #17]
}
   b55d8:	4770      	bx	lr

000b55da <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b55da:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b55dc:	7c00      	ldrb	r0, [r0, #16]
   b55de:	f7ff f87d 	bl	b46dc <hal_usart_available_data_for_write>
}
   b55e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55e6:	bd08      	pop	{r3, pc}

000b55e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b55e8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b55ea:	7c00      	ldrb	r0, [r0, #16]
   b55ec:	f7ff f84e 	bl	b468c <hal_usart_available>
}
   b55f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b55f4:	bd08      	pop	{r3, pc}

000b55f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b55f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b55f8:	7c00      	ldrb	r0, [r0, #16]
   b55fa:	f7ff f857 	bl	b46ac <hal_usart_peek>
}
   b55fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5602:	bd08      	pop	{r3, pc}

000b5604 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5604:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5606:	7c00      	ldrb	r0, [r0, #16]
   b5608:	f7ff f848 	bl	b469c <hal_usart_read>
}
   b560c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5610:	bd08      	pop	{r3, pc}

000b5612 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5612:	7c00      	ldrb	r0, [r0, #16]
   b5614:	f7ff b852 	b.w	b46bc <hal_usart_flush>

000b5618 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5618:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b561a:	7c45      	ldrb	r5, [r0, #17]
{
   b561c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b561e:	b12d      	cbz	r5, b562c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5620:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5622:	b003      	add	sp, #12
   b5624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5628:	f7ff b828 	b.w	b467c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b562c:	7c00      	ldrb	r0, [r0, #16]
   b562e:	9101      	str	r1, [sp, #4]
   b5630:	f7ff f854 	bl	b46dc <hal_usart_available_data_for_write>
   b5634:	2800      	cmp	r0, #0
   b5636:	9901      	ldr	r1, [sp, #4]
   b5638:	dcf2      	bgt.n	b5620 <_ZN11USARTSerial5writeEh+0x8>
}
   b563a:	4628      	mov	r0, r5
   b563c:	b003      	add	sp, #12
   b563e:	bd30      	pop	{r4, r5, pc}

000b5640 <_ZN11USARTSerialD0Ev>:
   b5640:	b510      	push	{r4, lr}
   b5642:	2114      	movs	r1, #20
   b5644:	4604      	mov	r4, r0
   b5646:	f000 fa44 	bl	b5ad2 <_ZdlPvj>
   b564a:	4620      	mov	r0, r4
   b564c:	bd10      	pop	{r4, pc}
	...

000b5650 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b5650:	b510      	push	{r4, lr}
   b5652:	f04f 0c00 	mov.w	ip, #0
   b5656:	4604      	mov	r4, r0
   b5658:	4608      	mov	r0, r1
   b565a:	4611      	mov	r1, r2
   b565c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5660:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b5664:	4a04      	ldr	r2, [pc, #16]	; (b5678 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b5666:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b5668:	2201      	movs	r2, #1
  _serial = serial;
   b566a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b566c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b566e:	461a      	mov	r2, r3
   b5670:	f7fe fffc 	bl	b466c <hal_usart_init>
}
   b5674:	4620      	mov	r0, r4
   b5676:	bd10      	pop	{r4, pc}
   b5678:	000b5f70 	.word	0x000b5f70

000b567c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b567c:	7c00      	ldrb	r0, [r0, #16]
   b567e:	2300      	movs	r3, #0
   b5680:	f7ff b834 	b.w	b46ec <hal_usart_begin_config>

000b5684 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5684:	2200      	movs	r2, #0
   b5686:	f7ff bff9 	b.w	b567c <_ZN11USARTSerial5beginEmm>
	...

000b568c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b568c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   b568e:	4d1b      	ldr	r5, [pc, #108]	; (b56fc <_Z22__fetch_global_Serial1v+0x70>)
   b5690:	682e      	ldr	r6, [r5, #0]
   b5692:	b94e      	cbnz	r6, b56a8 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   b5694:	2084      	movs	r0, #132	; 0x84
   b5696:	f7fe fcfc 	bl	b4092 <_Znwj>
   b569a:	4604      	mov	r4, r0
   b569c:	b118      	cbz	r0, b56a6 <_Z22__fetch_global_Serial1v+0x1a>
   b569e:	2284      	movs	r2, #132	; 0x84
   b56a0:	4631      	mov	r1, r6
   b56a2:	f000 fa39 	bl	b5b18 <memset>
   b56a6:	602c      	str	r4, [r5, #0]
  }
  if (!serial1_tx_buffer) {
   b56a8:	4e15      	ldr	r6, [pc, #84]	; (b5700 <_Z22__fetch_global_Serial1v+0x74>)
   b56aa:	6837      	ldr	r7, [r6, #0]
   b56ac:	b94f      	cbnz	r7, b56c2 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   b56ae:	2084      	movs	r0, #132	; 0x84
   b56b0:	f7fe fcef 	bl	b4092 <_Znwj>
   b56b4:	4604      	mov	r4, r0
   b56b6:	b118      	cbz	r0, b56c0 <_Z22__fetch_global_Serial1v+0x34>
   b56b8:	2284      	movs	r2, #132	; 0x84
   b56ba:	4639      	mov	r1, r7
   b56bc:	f000 fa2c 	bl	b5b18 <memset>
   b56c0:	6034      	str	r4, [r6, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   b56c2:	4c10      	ldr	r4, [pc, #64]	; (b5704 <_Z22__fetch_global_Serial1v+0x78>)
   b56c4:	7821      	ldrb	r1, [r4, #0]
   b56c6:	f3bf 8f5b 	dmb	ish
   b56ca:	f011 0101 	ands.w	r1, r1, #1
   b56ce:	d112      	bne.n	b56f6 <_Z22__fetch_global_Serial1v+0x6a>
   b56d0:	4620      	mov	r0, r4
   b56d2:	9101      	str	r1, [sp, #4]
   b56d4:	f7fe fce3 	bl	b409e <__cxa_guard_acquire>
   b56d8:	9901      	ldr	r1, [sp, #4]
   b56da:	b160      	cbz	r0, b56f6 <_Z22__fetch_global_Serial1v+0x6a>
   b56dc:	682a      	ldr	r2, [r5, #0]
   b56de:	6833      	ldr	r3, [r6, #0]
   b56e0:	4809      	ldr	r0, [pc, #36]	; (b5708 <_Z22__fetch_global_Serial1v+0x7c>)
   b56e2:	f7ff ffb5 	bl	b5650 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b56e6:	4620      	mov	r0, r4
   b56e8:	f7fe fcde 	bl	b40a8 <__cxa_guard_release>
   b56ec:	4a07      	ldr	r2, [pc, #28]	; (b570c <_Z22__fetch_global_Serial1v+0x80>)
   b56ee:	4908      	ldr	r1, [pc, #32]	; (b5710 <_Z22__fetch_global_Serial1v+0x84>)
   b56f0:	4805      	ldr	r0, [pc, #20]	; (b5708 <_Z22__fetch_global_Serial1v+0x7c>)
   b56f2:	f000 f9e9 	bl	b5ac8 <__aeabi_atexit>
#endif
	return serial1;
}
   b56f6:	4804      	ldr	r0, [pc, #16]	; (b5708 <_Z22__fetch_global_Serial1v+0x7c>)
   b56f8:	b003      	add	sp, #12
   b56fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b56fc:	2003e784 	.word	0x2003e784
   b5700:	2003e788 	.word	0x2003e788
   b5704:	2003e780 	.word	0x2003e780
   b5708:	2003e78c 	.word	0x2003e78c
   b570c:	2003e6cc 	.word	0x2003e6cc
   b5710:	000b55d5 	.word	0x000b55d5

000b5714 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5714:	7441      	strb	r1, [r0, #17]
}
   b5716:	4770      	bx	lr

000b5718 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5718:	4770      	bx	lr

000b571a <_ZN9USBSerial4readEv>:
{
   b571a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b571c:	2100      	movs	r1, #0
   b571e:	7c00      	ldrb	r0, [r0, #16]
   b5720:	f7ff f80c 	bl	b473c <HAL_USB_USART_Receive_Data>
}
   b5724:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5728:	bd08      	pop	{r3, pc}

000b572a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b572a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b572c:	2101      	movs	r1, #1
   b572e:	7c00      	ldrb	r0, [r0, #16]
   b5730:	f7ff f804 	bl	b473c <HAL_USB_USART_Receive_Data>
}
   b5734:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5738:	bd08      	pop	{r3, pc}

000b573a <_ZN9USBSerial17availableForWriteEv>:
{
   b573a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b573c:	7c00      	ldrb	r0, [r0, #16]
   b573e:	f7fe fff5 	bl	b472c <HAL_USB_USART_Available_Data_For_Write>
}
   b5742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5746:	bd08      	pop	{r3, pc}

000b5748 <_ZN9USBSerial9availableEv>:
{
   b5748:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b574a:	7c00      	ldrb	r0, [r0, #16]
   b574c:	f7fe ffe6 	bl	b471c <HAL_USB_USART_Available_Data>
}
   b5750:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5754:	bd08      	pop	{r3, pc}

000b5756 <_ZN9USBSerial5writeEh>:
{
   b5756:	b513      	push	{r0, r1, r4, lr}
   b5758:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b575a:	7c00      	ldrb	r0, [r0, #16]
{
   b575c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b575e:	f7fe ffe5 	bl	b472c <HAL_USB_USART_Available_Data_For_Write>
   b5762:	2800      	cmp	r0, #0
   b5764:	9901      	ldr	r1, [sp, #4]
   b5766:	dc01      	bgt.n	b576c <_ZN9USBSerial5writeEh+0x16>
   b5768:	7c60      	ldrb	r0, [r4, #17]
   b576a:	b120      	cbz	r0, b5776 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b576c:	7c20      	ldrb	r0, [r4, #16]
   b576e:	f7fe ffed 	bl	b474c <HAL_USB_USART_Send_Data>
   b5772:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5776:	b002      	add	sp, #8
   b5778:	bd10      	pop	{r4, pc}

000b577a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b577a:	7c00      	ldrb	r0, [r0, #16]
   b577c:	f7fe bfee 	b.w	b475c <HAL_USB_USART_Flush_Data>

000b5780 <_ZN9USBSerialD0Ev>:
   b5780:	b510      	push	{r4, lr}
   b5782:	2114      	movs	r1, #20
   b5784:	4604      	mov	r4, r0
   b5786:	f000 f9a4 	bl	b5ad2 <_ZdlPvj>
   b578a:	4620      	mov	r0, r4
   b578c:	bd10      	pop	{r4, pc}
	...

000b5790 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5790:	b510      	push	{r4, lr}
   b5792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5796:	4604      	mov	r4, r0
   b5798:	4608      	mov	r0, r1
   b579a:	2100      	movs	r1, #0
   b579c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b57a0:	4b04      	ldr	r3, [pc, #16]	; (b57b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b57a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b57a4:	2301      	movs	r3, #1
  _serial = serial;
   b57a6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b57a8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b57aa:	4611      	mov	r1, r2
   b57ac:	f7fe ffa6 	bl	b46fc <HAL_USB_USART_Init>
}
   b57b0:	4620      	mov	r0, r4
   b57b2:	bd10      	pop	{r4, pc}
   b57b4:	000b5fa0 	.word	0x000b5fa0

000b57b8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b57b8:	7c00      	ldrb	r0, [r0, #16]
   b57ba:	2200      	movs	r2, #0
   b57bc:	f7fe bfa6 	b.w	b470c <HAL_USB_USART_Begin>

000b57c0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b57c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b57c2:	2214      	movs	r2, #20
{
   b57c4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b57c6:	2100      	movs	r1, #0
   b57c8:	f000 f9a6 	bl	b5b18 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b57cc:	4620      	mov	r0, r4
   b57ce:	bd10      	pop	{r4, pc}

000b57d0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b57d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57d2:	4c10      	ldr	r4, [pc, #64]	; (b5814 <_Z16_fetch_usbserialv+0x44>)
{
   b57d4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b57d6:	a803      	add	r0, sp, #12
   b57d8:	f7ff fff2 	bl	b57c0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b57dc:	7821      	ldrb	r1, [r4, #0]
   b57de:	f3bf 8f5b 	dmb	ish
   b57e2:	f011 0101 	ands.w	r1, r1, #1
   b57e6:	d111      	bne.n	b580c <_Z16_fetch_usbserialv+0x3c>
   b57e8:	4620      	mov	r0, r4
   b57ea:	9101      	str	r1, [sp, #4]
   b57ec:	f7fe fc57 	bl	b409e <__cxa_guard_acquire>
   b57f0:	9901      	ldr	r1, [sp, #4]
   b57f2:	b158      	cbz	r0, b580c <_Z16_fetch_usbserialv+0x3c>
   b57f4:	aa03      	add	r2, sp, #12
   b57f6:	4808      	ldr	r0, [pc, #32]	; (b5818 <_Z16_fetch_usbserialv+0x48>)
   b57f8:	f7ff ffca 	bl	b5790 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b57fc:	4620      	mov	r0, r4
   b57fe:	f7fe fc53 	bl	b40a8 <__cxa_guard_release>
   b5802:	4a06      	ldr	r2, [pc, #24]	; (b581c <_Z16_fetch_usbserialv+0x4c>)
   b5804:	4906      	ldr	r1, [pc, #24]	; (b5820 <_Z16_fetch_usbserialv+0x50>)
   b5806:	4804      	ldr	r0, [pc, #16]	; (b5818 <_Z16_fetch_usbserialv+0x48>)
   b5808:	f000 f95e 	bl	b5ac8 <__aeabi_atexit>
	return _usbserial;
}
   b580c:	4802      	ldr	r0, [pc, #8]	; (b5818 <_Z16_fetch_usbserialv+0x48>)
   b580e:	b008      	add	sp, #32
   b5810:	bd10      	pop	{r4, pc}
   b5812:	bf00      	nop
   b5814:	2003e7a0 	.word	0x2003e7a0
   b5818:	2003e7a4 	.word	0x2003e7a4
   b581c:	2003e6cc 	.word	0x2003e6cc
   b5820:	000b5719 	.word	0x000b5719

000b5824 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5824:	4b01      	ldr	r3, [pc, #4]	; (b582c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5826:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5828:	4770      	bx	lr
   b582a:	bf00      	nop
   b582c:	2003e668 	.word	0x2003e668

000b5830 <serialEventRun>:
{
   b5830:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5832:	4b0b      	ldr	r3, [pc, #44]	; (b5860 <serialEventRun+0x30>)
   b5834:	b143      	cbz	r3, b5848 <serialEventRun+0x18>
   b5836:	f7ff ffcb 	bl	b57d0 <_Z16_fetch_usbserialv>
   b583a:	6803      	ldr	r3, [r0, #0]
   b583c:	691b      	ldr	r3, [r3, #16]
   b583e:	4798      	blx	r3
   b5840:	2800      	cmp	r0, #0
   b5842:	dd01      	ble.n	b5848 <serialEventRun+0x18>
        serialEvent();
   b5844:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5848:	4b06      	ldr	r3, [pc, #24]	; (b5864 <serialEventRun+0x34>)
   b584a:	b143      	cbz	r3, b585e <serialEventRun+0x2e>
   b584c:	f7ff ff1e 	bl	b568c <_Z22__fetch_global_Serial1v>
   b5850:	6803      	ldr	r3, [r0, #0]
   b5852:	691b      	ldr	r3, [r3, #16]
   b5854:	4798      	blx	r3
   b5856:	2800      	cmp	r0, #0
   b5858:	dd01      	ble.n	b585e <serialEventRun+0x2e>
        serialEvent1();
   b585a:	f3af 8000 	nop.w
}
   b585e:	bd08      	pop	{r3, pc}
	...

000b5868 <_post_loop>:
{
   b5868:	b508      	push	{r3, lr}
	serialEventRun();
   b586a:	f7ff ffe1 	bl	b5830 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b586e:	f7fe fe65 	bl	b453c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5872:	4b01      	ldr	r3, [pc, #4]	; (b5878 <_post_loop+0x10>)
   b5874:	6018      	str	r0, [r3, #0]
}
   b5876:	bd08      	pop	{r3, pc}
   b5878:	2003e7cc 	.word	0x2003e7cc

000b587c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b587c:	4805      	ldr	r0, [pc, #20]	; (b5894 <_Z33system_initialize_user_backup_ramv+0x18>)
   b587e:	4a06      	ldr	r2, [pc, #24]	; (b5898 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5880:	4906      	ldr	r1, [pc, #24]	; (b589c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5882:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5884:	1a12      	subs	r2, r2, r0
   b5886:	f000 f939 	bl	b5afc <memcpy>
    __backup_sram_signature = signature;
   b588a:	4b05      	ldr	r3, [pc, #20]	; (b58a0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b588c:	4a05      	ldr	r2, [pc, #20]	; (b58a4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b588e:	601a      	str	r2, [r3, #0]
}
   b5890:	bd08      	pop	{r3, pc}
   b5892:	bf00      	nop
   b5894:	2003f400 	.word	0x2003f400
   b5898:	2003f404 	.word	0x2003f404
   b589c:	000b6060 	.word	0x000b6060
   b58a0:	2003f400 	.word	0x2003f400
   b58a4:	9a271c1e 	.word	0x9a271c1e

000b58a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b58a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b58aa:	2300      	movs	r3, #0
   b58ac:	9300      	str	r3, [sp, #0]
   b58ae:	461a      	mov	r2, r3
   b58b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b58b4:	f7fe ff84 	bl	b47c0 <system_ctrl_set_result>
}
   b58b8:	b003      	add	sp, #12
   b58ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b58c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b58c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b58c2:	8843      	ldrh	r3, [r0, #2]
   b58c4:	2b0a      	cmp	r3, #10
   b58c6:	d008      	beq.n	b58da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b58c8:	2b50      	cmp	r3, #80	; 0x50
   b58ca:	d10b      	bne.n	b58e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b58cc:	4b09      	ldr	r3, [pc, #36]	; (b58f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b58ce:	681b      	ldr	r3, [r3, #0]
   b58d0:	b14b      	cbz	r3, b58e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b58d2:	b003      	add	sp, #12
   b58d4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b58d8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b58da:	f7ff ffe5 	bl	b58a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b58de:	b003      	add	sp, #12
   b58e0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b58e4:	2300      	movs	r3, #0
   b58e6:	9300      	str	r3, [sp, #0]
   b58e8:	461a      	mov	r2, r3
   b58ea:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b58ee:	f7fe ff67 	bl	b47c0 <system_ctrl_set_result>
}
   b58f2:	e7f4      	b.n	b58de <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b58f4:	2003e7bc 	.word	0x2003e7bc

000b58f8 <module_user_init_hook>:
{
   b58f8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b58fa:	4812      	ldr	r0, [pc, #72]	; (b5944 <module_user_init_hook+0x4c>)
   b58fc:	2100      	movs	r1, #0
   b58fe:	f7ff f819 	bl	b4934 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5902:	4b11      	ldr	r3, [pc, #68]	; (b5948 <module_user_init_hook+0x50>)
   b5904:	681a      	ldr	r2, [r3, #0]
   b5906:	4b11      	ldr	r3, [pc, #68]	; (b594c <module_user_init_hook+0x54>)
   b5908:	429a      	cmp	r2, r3
   b590a:	4b11      	ldr	r3, [pc, #68]	; (b5950 <module_user_init_hook+0x58>)
   b590c:	bf0c      	ite	eq
   b590e:	2201      	moveq	r2, #1
   b5910:	2200      	movne	r2, #0
   b5912:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5914:	d001      	beq.n	b591a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5916:	f7ff ffb1 	bl	b587c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b591a:	f7fe fe07 	bl	b452c <HAL_RNG_GetRandomNumber>
   b591e:	4604      	mov	r4, r0
    srand(seed);
   b5920:	f000 f902 	bl	b5b28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5924:	4b0b      	ldr	r3, [pc, #44]	; (b5954 <module_user_init_hook+0x5c>)
   b5926:	b113      	cbz	r3, b592e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5928:	4620      	mov	r0, r4
   b592a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b592e:	2100      	movs	r1, #0
   b5930:	4808      	ldr	r0, [pc, #32]	; (b5954 <module_user_init_hook+0x5c>)
   b5932:	f7fe ff67 	bl	b4804 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b593a:	4807      	ldr	r0, [pc, #28]	; (b5958 <module_user_init_hook+0x60>)
   b593c:	2100      	movs	r1, #0
   b593e:	f7fe bf35 	b.w	b47ac <system_ctrl_set_app_request_handler>
   b5942:	bf00      	nop
   b5944:	000b5825 	.word	0x000b5825
   b5948:	2003f400 	.word	0x2003f400
   b594c:	9a271c1e 	.word	0x9a271c1e
   b5950:	2003e7b8 	.word	0x2003e7b8
   b5954:	00000000 	.word	0x00000000
   b5958:	000b58c1 	.word	0x000b58c1

000b595c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b595c:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b595e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5960:	d902      	bls.n	b5968 <pinAvailable+0xc>
    return false;
   b5962:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5964:	b002      	add	sp, #8
   b5966:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5968:	f1a0 030b 	sub.w	r3, r0, #11
   b596c:	2b02      	cmp	r3, #2
   b596e:	d81a      	bhi.n	b59a6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5970:	4c17      	ldr	r4, [pc, #92]	; (b59d0 <pinAvailable+0x74>)
   b5972:	7821      	ldrb	r1, [r4, #0]
   b5974:	f3bf 8f5b 	dmb	ish
   b5978:	f011 0101 	ands.w	r1, r1, #1
   b597c:	d10b      	bne.n	b5996 <pinAvailable+0x3a>
   b597e:	4620      	mov	r0, r4
   b5980:	9101      	str	r1, [sp, #4]
   b5982:	f7fe fb8c 	bl	b409e <__cxa_guard_acquire>
   b5986:	9901      	ldr	r1, [sp, #4]
   b5988:	b128      	cbz	r0, b5996 <pinAvailable+0x3a>
   b598a:	4812      	ldr	r0, [pc, #72]	; (b59d4 <pinAvailable+0x78>)
   b598c:	f7ff fd56 	bl	b543c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5990:	4620      	mov	r0, r4
   b5992:	f7fe fb89 	bl	b40a8 <__cxa_guard_release>
   b5996:	4b0f      	ldr	r3, [pc, #60]	; (b59d4 <pinAvailable+0x78>)
   b5998:	7818      	ldrb	r0, [r3, #0]
   b599a:	f7fe fe5f 	bl	b465c <hal_spi_is_enabled>
   b599e:	2800      	cmp	r0, #0
   b59a0:	d1df      	bne.n	b5962 <pinAvailable+0x6>
  return true; // 'pin' is available
   b59a2:	2001      	movs	r0, #1
   b59a4:	e7de      	b.n	b5964 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b59a6:	2801      	cmp	r0, #1
   b59a8:	d809      	bhi.n	b59be <pinAvailable+0x62>
   b59aa:	f000 f865 	bl	b5a78 <_Z19__fetch_global_Wirev>
   b59ae:	2100      	movs	r1, #0
   b59b0:	7c00      	ldrb	r0, [r0, #16]
   b59b2:	f7fe fe23 	bl	b45fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b59b6:	f080 0001 	eor.w	r0, r0, #1
   b59ba:	b2c0      	uxtb	r0, r0
   b59bc:	e7d2      	b.n	b5964 <pinAvailable+0x8>
   b59be:	3809      	subs	r0, #9
   b59c0:	2801      	cmp	r0, #1
   b59c2:	d8ee      	bhi.n	b59a2 <pinAvailable+0x46>
   b59c4:	f7ff fe62 	bl	b568c <_Z22__fetch_global_Serial1v>
   b59c8:	7c00      	ldrb	r0, [r0, #16]
   b59ca:	f7fe fe7f 	bl	b46cc <hal_usart_is_enabled>
   b59ce:	e7f2      	b.n	b59b6 <pinAvailable+0x5a>
   b59d0:	2003e7c0 	.word	0x2003e7c0
   b59d4:	2003e7c4 	.word	0x2003e7c4

000b59d8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b59d8:	2825      	cmp	r0, #37	; 0x25
{
   b59da:	b538      	push	{r3, r4, r5, lr}
   b59dc:	4604      	mov	r4, r0
   b59de:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b59e0:	d80a      	bhi.n	b59f8 <pinMode+0x20>
   b59e2:	29ff      	cmp	r1, #255	; 0xff
   b59e4:	d008      	beq.n	b59f8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b59e6:	f7ff ffb9 	bl	b595c <pinAvailable>
   b59ea:	b128      	cbz	r0, b59f8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b59ec:	4629      	mov	r1, r5
   b59ee:	4620      	mov	r0, r4
}
   b59f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b59f4:	f7fe bdc2 	b.w	b457c <HAL_Pin_Mode>
}
   b59f8:	bd38      	pop	{r3, r4, r5, pc}

000b59fa <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b59fa:	b510      	push	{r4, lr}
   b59fc:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b59fe:	f7fe fdc5 	bl	b458c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5a02:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5a04:	b2db      	uxtb	r3, r3
   b5a06:	2b01      	cmp	r3, #1
   b5a08:	d908      	bls.n	b5a1c <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5a0a:	4620      	mov	r0, r4
   b5a0c:	f7ff ffa6 	bl	b595c <pinAvailable>
   b5a10:	b120      	cbz	r0, b5a1c <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b5a12:	4620      	mov	r0, r4
}
   b5a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b5a18:	f7fe bdc0 	b.w	b459c <HAL_GPIO_Read>
}
   b5a1c:	2000      	movs	r0, #0
   b5a1e:	bd10      	pop	{r4, pc}

000b5a20 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b5a20:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b5a22:	4c08      	ldr	r4, [pc, #32]	; (b5a44 <_Z21__fetch_global_EEPROMv+0x24>)
   b5a24:	7823      	ldrb	r3, [r4, #0]
   b5a26:	f3bf 8f5b 	dmb	ish
   b5a2a:	07db      	lsls	r3, r3, #31
   b5a2c:	d408      	bmi.n	b5a40 <_Z21__fetch_global_EEPROMv+0x20>
   b5a2e:	4620      	mov	r0, r4
   b5a30:	f7fe fb35 	bl	b409e <__cxa_guard_acquire>
   b5a34:	b120      	cbz	r0, b5a40 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b5a36:	f7fe fd89 	bl	b454c <HAL_EEPROM_Init>
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	f7fe fb34 	bl	b40a8 <__cxa_guard_release>
	return eeprom;
}
   b5a40:	4801      	ldr	r0, [pc, #4]	; (b5a48 <_Z21__fetch_global_EEPROMv+0x28>)
   b5a42:	bd10      	pop	{r4, pc}
   b5a44:	2003e7d0 	.word	0x2003e7d0
   b5a48:	2003e7d4 	.word	0x2003e7d4

000b5a4c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b5a4c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5a4e:	2520      	movs	r5, #32
   b5a50:	2314      	movs	r3, #20
{
   b5a52:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5a54:	6003      	str	r3, [r0, #0]
   b5a56:	6085      	str	r5, [r0, #8]
   b5a58:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a5a:	4906      	ldr	r1, [pc, #24]	; (b5a74 <_Z17acquireWireBufferv+0x28>)
   b5a5c:	4628      	mov	r0, r5
   b5a5e:	f000 f83a 	bl	b5ad6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a62:	4904      	ldr	r1, [pc, #16]	; (b5a74 <_Z17acquireWireBufferv+0x28>)
	};
   b5a64:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5a66:	4628      	mov	r0, r5
   b5a68:	f000 f835 	bl	b5ad6 <_ZnajRKSt9nothrow_t>
	};
   b5a6c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b5a6e:	4620      	mov	r0, r4
   b5a70:	bd38      	pop	{r3, r4, r5, pc}
   b5a72:	bf00      	nop
   b5a74:	000b5fc8 	.word	0x000b5fc8

000b5a78 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b5a78:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5a7a:	4d0f      	ldr	r5, [pc, #60]	; (b5ab8 <_Z19__fetch_global_Wirev+0x40>)
   b5a7c:	7829      	ldrb	r1, [r5, #0]
   b5a7e:	f3bf 8f5b 	dmb	ish
   b5a82:	f011 0401 	ands.w	r4, r1, #1
{
   b5a86:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5a88:	d113      	bne.n	b5ab2 <_Z19__fetch_global_Wirev+0x3a>
   b5a8a:	4628      	mov	r0, r5
   b5a8c:	f7fe fb07 	bl	b409e <__cxa_guard_acquire>
   b5a90:	b178      	cbz	r0, b5ab2 <_Z19__fetch_global_Wirev+0x3a>
   b5a92:	a801      	add	r0, sp, #4
   b5a94:	f7ff ffda 	bl	b5a4c <_Z17acquireWireBufferv>
   b5a98:	aa01      	add	r2, sp, #4
   b5a9a:	4621      	mov	r1, r4
   b5a9c:	4807      	ldr	r0, [pc, #28]	; (b5abc <_Z19__fetch_global_Wirev+0x44>)
   b5a9e:	f7ff fb11 	bl	b50c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5aa2:	4628      	mov	r0, r5
   b5aa4:	f7fe fb00 	bl	b40a8 <__cxa_guard_release>
   b5aa8:	4a05      	ldr	r2, [pc, #20]	; (b5ac0 <_Z19__fetch_global_Wirev+0x48>)
   b5aaa:	4906      	ldr	r1, [pc, #24]	; (b5ac4 <_Z19__fetch_global_Wirev+0x4c>)
   b5aac:	4803      	ldr	r0, [pc, #12]	; (b5abc <_Z19__fetch_global_Wirev+0x44>)
   b5aae:	f000 f80b 	bl	b5ac8 <__aeabi_atexit>
	return wire;
}
   b5ab2:	4802      	ldr	r0, [pc, #8]	; (b5abc <_Z19__fetch_global_Wirev+0x44>)
   b5ab4:	b007      	add	sp, #28
   b5ab6:	bd30      	pop	{r4, r5, pc}
   b5ab8:	2003e7d8 	.word	0x2003e7d8
   b5abc:	2003e7dc 	.word	0x2003e7dc
   b5ac0:	2003e6cc 	.word	0x2003e6cc
   b5ac4:	000b506d 	.word	0x000b506d

000b5ac8 <__aeabi_atexit>:
   b5ac8:	460b      	mov	r3, r1
   b5aca:	4601      	mov	r1, r0
   b5acc:	4618      	mov	r0, r3
   b5ace:	f000 b807 	b.w	b5ae0 <__cxa_atexit>

000b5ad2 <_ZdlPvj>:
   b5ad2:	f7fe bae2 	b.w	b409a <_ZdlPv>

000b5ad6 <_ZnajRKSt9nothrow_t>:
   b5ad6:	f7fe bade 	b.w	b4096 <_Znaj>

000b5ada <_ZSt25__throw_bad_function_callv>:
   b5ada:	b508      	push	{r3, lr}
   b5adc:	f7fe ff12 	bl	b4904 <abort>

000b5ae0 <__cxa_atexit>:
   b5ae0:	b510      	push	{r4, lr}
   b5ae2:	4c05      	ldr	r4, [pc, #20]	; (b5af8 <__cxa_atexit+0x18>)
   b5ae4:	4613      	mov	r3, r2
   b5ae6:	b12c      	cbz	r4, b5af4 <__cxa_atexit+0x14>
   b5ae8:	460a      	mov	r2, r1
   b5aea:	4601      	mov	r1, r0
   b5aec:	2002      	movs	r0, #2
   b5aee:	f3af 8000 	nop.w
   b5af2:	bd10      	pop	{r4, pc}
   b5af4:	4620      	mov	r0, r4
   b5af6:	e7fc      	b.n	b5af2 <__cxa_atexit+0x12>
   b5af8:	00000000 	.word	0x00000000

000b5afc <memcpy>:
   b5afc:	440a      	add	r2, r1
   b5afe:	4291      	cmp	r1, r2
   b5b00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5b04:	d100      	bne.n	b5b08 <memcpy+0xc>
   b5b06:	4770      	bx	lr
   b5b08:	b510      	push	{r4, lr}
   b5b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5b12:	4291      	cmp	r1, r2
   b5b14:	d1f9      	bne.n	b5b0a <memcpy+0xe>
   b5b16:	bd10      	pop	{r4, pc}

000b5b18 <memset>:
   b5b18:	4402      	add	r2, r0
   b5b1a:	4603      	mov	r3, r0
   b5b1c:	4293      	cmp	r3, r2
   b5b1e:	d100      	bne.n	b5b22 <memset+0xa>
   b5b20:	4770      	bx	lr
   b5b22:	f803 1b01 	strb.w	r1, [r3], #1
   b5b26:	e7f9      	b.n	b5b1c <memset+0x4>

000b5b28 <srand>:
   b5b28:	b538      	push	{r3, r4, r5, lr}
   b5b2a:	4b10      	ldr	r3, [pc, #64]	; (b5b6c <srand+0x44>)
   b5b2c:	681d      	ldr	r5, [r3, #0]
   b5b2e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5b30:	4604      	mov	r4, r0
   b5b32:	b9b3      	cbnz	r3, b5b62 <srand+0x3a>
   b5b34:	2018      	movs	r0, #24
   b5b36:	f7fe fecd 	bl	b48d4 <malloc>
   b5b3a:	4602      	mov	r2, r0
   b5b3c:	63a8      	str	r0, [r5, #56]	; 0x38
   b5b3e:	b920      	cbnz	r0, b5b4a <srand+0x22>
   b5b40:	4b0b      	ldr	r3, [pc, #44]	; (b5b70 <srand+0x48>)
   b5b42:	480c      	ldr	r0, [pc, #48]	; (b5b74 <srand+0x4c>)
   b5b44:	2142      	movs	r1, #66	; 0x42
   b5b46:	f7fe feed 	bl	b4924 <__assert_func>
   b5b4a:	490b      	ldr	r1, [pc, #44]	; (b5b78 <srand+0x50>)
   b5b4c:	4b0b      	ldr	r3, [pc, #44]	; (b5b7c <srand+0x54>)
   b5b4e:	e9c0 1300 	strd	r1, r3, [r0]
   b5b52:	4b0b      	ldr	r3, [pc, #44]	; (b5b80 <srand+0x58>)
   b5b54:	6083      	str	r3, [r0, #8]
   b5b56:	230b      	movs	r3, #11
   b5b58:	8183      	strh	r3, [r0, #12]
   b5b5a:	2100      	movs	r1, #0
   b5b5c:	2001      	movs	r0, #1
   b5b5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5b62:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5b64:	2200      	movs	r2, #0
   b5b66:	611c      	str	r4, [r3, #16]
   b5b68:	615a      	str	r2, [r3, #20]
   b5b6a:	bd38      	pop	{r3, r4, r5, pc}
   b5b6c:	2003e668 	.word	0x2003e668
   b5b70:	000b5fc9 	.word	0x000b5fc9
   b5b74:	000b5fe0 	.word	0x000b5fe0
   b5b78:	abcd330e 	.word	0xabcd330e
   b5b7c:	e66d1234 	.word	0xe66d1234
   b5b80:	0005deec 	.word	0x0005deec

000b5b84 <strcmp>:
   b5b84:	f810 2b01 	ldrb.w	r2, [r0], #1
   b5b88:	f811 3b01 	ldrb.w	r3, [r1], #1
   b5b8c:	2a01      	cmp	r2, #1
   b5b8e:	bf28      	it	cs
   b5b90:	429a      	cmpcs	r2, r3
   b5b92:	d0f7      	beq.n	b5b84 <strcmp>
   b5b94:	1ad0      	subs	r0, r2, r3
   b5b96:	4770      	bx	lr

000b5b98 <strdup>:
   b5b98:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <strdup+0xc>)
   b5b9a:	4601      	mov	r1, r0
   b5b9c:	6818      	ldr	r0, [r3, #0]
   b5b9e:	f000 b803 	b.w	b5ba8 <_strdup_r>
   b5ba2:	bf00      	nop
   b5ba4:	2003e668 	.word	0x2003e668

000b5ba8 <_strdup_r>:
   b5ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5baa:	4604      	mov	r4, r0
   b5bac:	4608      	mov	r0, r1
   b5bae:	460d      	mov	r5, r1
   b5bb0:	f000 f80f 	bl	b5bd2 <strlen>
   b5bb4:	1c42      	adds	r2, r0, #1
   b5bb6:	4611      	mov	r1, r2
   b5bb8:	4620      	mov	r0, r4
   b5bba:	9201      	str	r2, [sp, #4]
   b5bbc:	f7fe feaa 	bl	b4914 <_malloc_r>
   b5bc0:	4604      	mov	r4, r0
   b5bc2:	b118      	cbz	r0, b5bcc <_strdup_r+0x24>
   b5bc4:	9a01      	ldr	r2, [sp, #4]
   b5bc6:	4629      	mov	r1, r5
   b5bc8:	f7ff ff98 	bl	b5afc <memcpy>
   b5bcc:	4620      	mov	r0, r4
   b5bce:	b003      	add	sp, #12
   b5bd0:	bd30      	pop	{r4, r5, pc}

000b5bd2 <strlen>:
   b5bd2:	4603      	mov	r3, r0
   b5bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5bd8:	2a00      	cmp	r2, #0
   b5bda:	d1fb      	bne.n	b5bd4 <strlen+0x2>
   b5bdc:	1a18      	subs	r0, r3, r0
   b5bde:	3801      	subs	r0, #1
   b5be0:	4770      	bx	lr

000b5be2 <link_code_end>:
	...

000b5be4 <dynalib_user>:
   b5be4:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5bf4:	0000 0000 6146 206e 764f 7265 6972 6564     ....Fan Override
   b5c04:	7200 6e75 696e 676e 6620 7269 7473 6c20     .running first l
   b5c14:	6f6f 2070 6362 6620 6e61 6f20 6576 7272     oop bc fan overr
   b5c24:	6469 2065 7369 3020 5400 7365 6974 676e     ide is 0.Testing
   b5c34:	7320 7574 6666 0021 7572 6e6e 6e69 2067      stuff!.running 
   b5c44:	6e32 2064 6f6c 706f 202c 6176 756c 2065     2nd loop, value 
   b5c54:	7369 3120 4d00 746f 6f69 206e 6564 6574     is 1.Motion dete
   b5c64:	7463 6465 0021 3330 0030 7554 6e72 6465     cted!.030.Turned
   b5c74:	6620 6e61 2073 6f74 3320 2530 4d00 746f      fans to 30%.Mot
   b5c84:	6f69 206e 6564 6574 7463 6465 2021 696c     ion detected! li
   b5c94:	6867 7374 6f43 646e 7469 6f69 5f6e 2031     ghtsCondition_1 
   b5ca4:	6573 2074 6f74 7420 7572 0065 6f4d 6974     set to true.Moti
   b5cb4:	6e6f 7320 6f74 7070 6465 2021 696c 6867     on stopped! ligh
   b5cc4:	4374 6e6f 6964 6974 6e6f 315f 7320 7465     tCondition_1 set
   b5cd4:	7420 206f 6166 736c 0065 004d 6f62 6874      to false.M.both
   b5ce4:	6c20 6769 7468 6320 6e6f 6964 6974 6e6f      light condition
   b5cf4:	2073 7274 6575 202c 6573 2074 696c 6867     s true, set ligh
   b5d04:	7374 7420 206f 204d 6f6d 6564 6c00 6769     ts to M mode.lig
   b5d14:	7468 4373 6e6f 6964 6974 6e6f 315f 7220     htsCondition_1 r
   b5d24:	7365 7465 7420 206f 6166 736c 0065 696c     eset to false.li
   b5d34:	6867 7374 6f43 646e 7469 6f69 5f6e 2032     ghtsCondition_2 
   b5d44:	6572 6573 2074 6f74 6620 6c61 6573 4e00     reset to false.N
   b5d54:	206f 6f6d 6974 6e6f 6620 726f 3120 2035     o motion for 15 
   b5d64:	696d 216e 7420 7275 696e 676e 7320 7574     min! turning stu
   b5d74:	6666 6f20 6666 4f00 5300 7465 6c20 6769     ff off.O.Set lig
   b5d84:	7468 2073 6f74 4f20 4646 3000 3030 4600     hts to OFF.000.F
   b5d94:	6e61 2073 6573 2074 6f74 3020 0025 696c     ans set to 0%.li
   b5da4:	6867 7374 6f43 646e 7469 6f69 5f6e 2032     ghtsCondition_2 
   b5db4:	6573 2074 6f74 7420 7572 0065 6166 206e     set to true.fan 
   b5dc4:	766f 7265 6972 6564 7420 7572 0065 6166     override true.fa
   b5dd4:	206e 766f 7265 6972 6564 6620 6c61 6573     n override false
   b5de4:	6600 6e61 7320 6570 6465 6c20 776f 4c00     .fan speed low.L
   b5df4:	776f 4600 6e61 5320 6570 6465 6600 6e61     ow.Fan Speed.fan
   b5e04:	7320 6570 6465 6d20 6465 7569 006d 654d      speed medium.Me
   b5e14:	6964 6d75 6600 6e61 7320 6570 6465 6820     dium.fan speed h
   b5e24:	6769 0068 6948 6867 3000 3832 3000 3531     igh.High.028.015
   b5e34:	3000 3031 0000 0000                         .010....

000b5e3c <_ZTVN5spark13CellularClassE>:
	...
   b5e44:	4a3b 000b 4a31 000b 4a27 000b 49dd 000b     ;J..1J..'J...I..
   b5e54:	4a1b 000b 4a0f 000b 5229 000b 5231 000b     .J...J..)R..1R..
   b5e64:	4a03 000b 49fb 000b 49f1 000b 49e7 000b     .J...I...I...I..
   b5e74:	5261 000b                                   aR..

000b5e78 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b5e80:	4a75 000b 4a7b 000b 4ab9 000b 4a89 000b     uJ..{J...J...J..
   b5e90:	4a77 000b                                   wJ..

000b5e94 <_ZTVN5spark13EthernetClassE>:
	...
   b5e9c:	504f 000b 5045 000b 503b 000b 5031 000b     OP..EP..;P..1P..
   b5eac:	5025 000b 5019 000b 5229 000b 5231 000b     %P...P..)R..1R..
   b5ebc:	500d 000b 5005 000b 4ffb 000b 4ff1 000b     .P...P...O...O..
   b5ecc:	5261 000b                                   aR..

000b5ed0 <_ZTV7TwoWire>:
	...
   b5ed8:	506d 000b 50b7 000b 508f 000b 506f 000b     mP...P...P..oP..
   b5ee8:	5097 000b 509f 000b 50a7 000b 50af 000b     .P...P...P...P..

000b5ef8 <_ZTV9IPAddress>:
	...
   b5f00:	50f9 000b 50e9 000b 50eb 000b 7061 0070     .P...P...P..app.

000b5f10 <_ZTVN5spark12NetworkClassE>:
	...
   b5f18:	51e9 000b 51f3 000b 51fd 000b 5207 000b     .Q...Q...Q...R..
   b5f28:	5211 000b 521d 000b 5229 000b 5231 000b     .R...R..)R..1R..
   b5f38:	5239 000b 5245 000b 524d 000b 5257 000b     9R..ER..MR..WR..
   b5f48:	5261 000b 5925 252d 2d6d 6425 2554 3a48     aR..%Y-%m-%dT%H:
   b5f58:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5f68 <_ZTV11USARTSerial>:
	...
   b5f70:	55d5 000b 5641 000b 5619 000b 534d 000b     .U..AV...V..MS..
   b5f80:	55e9 000b 5605 000b 55f7 000b 5613 000b     .U...V...U...V..
   b5f90:	55d7 000b 55db 000b                         .U...U..

000b5f98 <_ZTV9USBSerial>:
	...
   b5fa0:	5719 000b 5781 000b 5757 000b 534d 000b     .W...W..WW..MS..
   b5fb0:	5749 000b 571b 000b 572b 000b 577b 000b     IW...W..+W..{W..
   b5fc0:	573b 000b 5715 000b                         ;W...W..

000b5fc8 <_ZSt7nothrow>:
   b5fc8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5fd8:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5fe8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5ff8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6008:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b6018:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6028:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6039 <link_const_variable_data_end>:
   b6039:	00          	.byte	0x00
	...

000b603c <link_constructors_location>:
   b603c:	000b4499 	.word	0x000b4499
   b6040:	000b49b5 	.word	0x000b49b5
   b6044:	000b4a45 	.word	0x000b4a45
   b6048:	000b5059 	.word	0x000b5059
   b604c:	000b51d9 	.word	0x000b51d9
   b6050:	000b5339 	.word	0x000b5339
   b6054:	000b5421 	.word	0x000b5421
   b6058:	000b5585 	.word	0x000b5585
   b605c:	000b55c1 	.word	0x000b55c1
