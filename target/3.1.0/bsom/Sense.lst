
c:/Users/ro/OneDrive/Documents/Firmware/Sense/target/3.1.0/bsom/Sense.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004350  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000b8370  000b8370  00008370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8378  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e62c  000b837c  0001e62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000154  2003e69c  2003e69c  0002e69c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b83ec  000b83ec  000283ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8414  000b8414  00028414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001078f5  00000000  00000000  00028418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001248f  00000000  00000000  0012fd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00036fd9  00000000  00000000  0014219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002970  00000000  00000000  00179175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009f28  00000000  00000000  0017bae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037bad  00000000  00000000  00185a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003a26b  00000000  00000000  001bd5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012d0bb  00000000  00000000  001f7825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007874  00000000  00000000  003248e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 ff65 	bl	b7f00 <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 ff6d 	bl	b7f1c <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e62c 	.word	0x2003e62c
   b404c:	000b837c 	.word	0x000b837c
   b4050:	2003e69c 	.word	0x2003e69c
   b4054:	2003e69c 	.word	0x2003e69c
   b4058:	2003e7f0 	.word	0x2003e7f0

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f001 f95b 	bl	b531c <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42a5      	cmp	r5, r4
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b834c 	.word	0x000b834c
   b4080:	000b8370 	.word	0x000b8370

000b4084 <module_user_setup>:
   b4084:	f000 b824 	b.w	b40d0 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f000 f869 	bl	b4160 <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f001 b8fb 	b.w	b528c <_post_loop>

000b4096 <_Znwj>:
   b4096:	f000 be0f 	b.w	b4cb8 <malloc>

000b409a <_Znaj>:
   b409a:	f000 be0d 	b.w	b4cb8 <malloc>

000b409e <_ZdlPv>:
   b409e:	f000 be13 	b.w	b4cc8 <free>

000b40a2 <__cxa_guard_acquire>:
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40b4:	b513      	push	{r0, r1, r4, lr}
   b40b6:	4b05      	ldr	r3, [pc, #20]	; (b40cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b40b8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40ba:	f88d 3000 	strb.w	r3, [sp]
   b40be:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40c0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40c2:	f001 faaf 	bl	b5624 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b40c6:	4620      	mov	r0, r4
   b40c8:	b002      	add	sp, #8
   b40ca:	bd10      	pop	{r4, pc}
   b40cc:	2003e6a5 	.word	0x2003e6a5

000b40d0 <setup>:

//Temperature Sensor
TSYS01 sensor;
int reportTemp(String command);

void setup() {
   b40d0:	b510      	push	{r4, lr}
        return register_function(call_raw_user_function, (void*)func, funcKey);
   b40d2:	4c12      	ldr	r4, [pc, #72]	; (b411c <setup+0x4c>)
  Serial.begin(9600);
   b40d4:	f001 fce8 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b40d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40dc:	f001 fcd8 	bl	b5a90 <_ZN9USBSerial5beginEl>
   b40e0:	4a0f      	ldr	r2, [pc, #60]	; (b4120 <setup+0x50>)
   b40e2:	4910      	ldr	r1, [pc, #64]	; (b4124 <setup+0x54>)
   b40e4:	4620      	mov	r0, r4
   b40e6:	f001 f9a6 	bl	b5436 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   b40ea:	4a0f      	ldr	r2, [pc, #60]	; (b4128 <setup+0x58>)
   b40ec:	490f      	ldr	r1, [pc, #60]	; (b412c <setup+0x5c>)
   b40ee:	4620      	mov	r0, r4
   b40f0:	f001 f9a1 	bl	b5436 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.function("Fan Override", enableOverride);
  Particle.function("Report Temperature", reportTemp); 
  Serial1.begin(9600);// initialize UART to MR Logic PCBA
   b40f4:	f001 fdaa 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b40f8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40fc:	f001 fda2 	bl	b5c44 <_ZN11USARTSerial5beginEm>
  pinMode(PIN_TO_SENSOR, INPUT_PULLDOWN); // set pinmode
   b4100:	2103      	movs	r1, #3
   b4102:	201c      	movs	r0, #28
   b4104:	f001 ff68 	bl	b5fd8 <pinMode>
  Wire.begin();
   b4108:	f001 ffb6 	bl	b6078 <_Z19__fetch_global_Wirev>
   b410c:	f001 fe34 	bl	b5d78 <_ZN7TwoWire5beginEv>
  sensor.init();
}
   b4110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sensor.init();
   b4114:	4806      	ldr	r0, [pc, #24]	; (b4130 <setup+0x60>)
   b4116:	f000 ba66 	b.w	b45e6 <_ZN6TSYS014initEv>
   b411a:	bf00      	nop
   b411c:	000b540b 	.word	0x000b540b
   b4120:	000b7ffc 	.word	0x000b7ffc
   b4124:	000b43f9 	.word	0x000b43f9
   b4128:	000b8009 	.word	0x000b8009
   b412c:	000b4399 	.word	0x000b4399
   b4130:	2003e6e8 	.word	0x2003e6e8

000b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4134:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4136:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4138:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b413a:	b17c      	cbz	r4, b415c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b413c:	6863      	ldr	r3, [r4, #4]
   b413e:	3b01      	subs	r3, #1
   b4140:	6063      	str	r3, [r4, #4]
   b4142:	b95b      	cbnz	r3, b415c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4144:	6823      	ldr	r3, [r4, #0]
   b4146:	4620      	mov	r0, r4
   b4148:	689b      	ldr	r3, [r3, #8]
   b414a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b414c:	68a3      	ldr	r3, [r4, #8]
   b414e:	3b01      	subs	r3, #1
   b4150:	60a3      	str	r3, [r4, #8]
   b4152:	b91b      	cbnz	r3, b415c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4154:	6823      	ldr	r3, [r4, #0]
   b4156:	4620      	mov	r0, r4
   b4158:	68db      	ldr	r3, [r3, #12]
   b415a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b415c:	4628      	mov	r0, r5
   b415e:	bd38      	pop	{r3, r4, r5, pc}

000b4160 <loop>:

void loop()
{
   b4160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  //EEPROM Read of fan enable and fan speed byes.
  uint8_t value = EEPROM.read(0);
   b4164:	f001 ff5c 	bl	b6020 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b4168:	2000      	movs	r0, #0
   b416a:	f000 fbd9 	bl	b4920 <HAL_EEPROM_Read>
   b416e:	4604      	mov	r4, r0
  uint8_t value1 = EEPROM.read(1); 
   b4170:	f001 ff56 	bl	b6020 <_Z21__fetch_global_EEPROMv>
   b4174:	2001      	movs	r0, #1
   b4176:	f000 fbd3 	bl	b4920 <HAL_EEPROM_Read>

//Checks the fan speed condition once and sets it to one of 3 pre-set FW values.
  if (value1 == 1) {
   b417a:	2801      	cmp	r0, #1
   b417c:	d165      	bne.n	b424a <loop+0xea>
    setFanSpeed = fanValLow;
   b417e:	496c      	ldr	r1, [pc, #432]	; (b4330 <loop+0x1d0>)
  } else if (value1 == 2){
    setFanSpeed = fanValMed;
  } else if (value1 == 3) {
    setFanSpeed = fanValHigh;
   b4180:	486c      	ldr	r0, [pc, #432]	; (b4334 <loop+0x1d4>)
   b4182:	f000 ff44 	bl	b500e <_ZN6StringaSERKS_>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4186:	f8df 81ac 	ldr.w	r8, [pc, #428]	; b4334 <loop+0x1d4>
  }
  Serial.print(setFanSpeed);

  pinStatePrevious = pinStateCurrent; // store state
   b418a:	4f6b      	ldr	r7, [pc, #428]	; (b4338 <loop+0x1d8>)
   b418c:	f8df 9204 	ldr.w	r9, [pc, #516]	; b4394 <loop+0x234>
   b4190:	4d6a      	ldr	r5, [pc, #424]	; (b433c <loop+0x1dc>)
  Serial.print(setFanSpeed);
   b4192:	f001 fc89 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4196:	f8d8 1000 	ldr.w	r1, [r8]
   b419a:	f000 ffef 	bl	b517c <_ZN5Print5printEPKc>
  pinStatePrevious = pinStateCurrent; // store state
   b419e:	683b      	ldr	r3, [r7, #0]
   b41a0:	f8c9 3000 	str.w	r3, [r9]
  pinStateCurrent =! digitalRead(PIN_TO_SENSOR);  // read new state
   b41a4:	201c      	movs	r0, #28
   b41a6:	f001 ff28 	bl	b5ffa <digitalRead>

  if (pinStatePrevious == LOW && pinStateCurrent == HIGH && Motion_setDelayExpired == true) {   // pin state change: LOW -> HIGH
   b41aa:	f8d9 a000 	ldr.w	sl, [r9]
  pinStateCurrent =! digitalRead(PIN_TO_SENSOR);  // read new state
   b41ae:	4606      	mov	r6, r0
   b41b0:	fab0 f080 	clz	r0, r0
   b41b4:	0940      	lsrs	r0, r0, #5
   b41b6:	6038      	str	r0, [r7, #0]
  if (pinStatePrevious == LOW && pinStateCurrent == HIGH && Motion_setDelayExpired == true) {   // pin state change: LOW -> HIGH
   b41b8:	f1ba 0f00 	cmp.w	sl, #0
   b41bc:	d14d      	bne.n	b425a <loop+0xfa>
   b41be:	2e00      	cmp	r6, #0
   b41c0:	d15b      	bne.n	b427a <loop+0x11a>
   b41c2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; b437c <loop+0x21c>
   b41c6:	f89a 3000 	ldrb.w	r3, [sl]
   b41ca:	2b00      	cmp	r3, #0
   b41cc:	d055      	beq.n	b427a <loop+0x11a>
    Serial.println("Motion detected!");
   b41ce:	f001 fc6b 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b41d2:	495b      	ldr	r1, [pc, #364]	; (b4340 <loop+0x1e0>)
   b41d4:	f000 ffe5 	bl	b51a2 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b41d8:	4b5a      	ldr	r3, [pc, #360]	; (b4344 <loop+0x1e4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b41da:	4a5b      	ldr	r2, [pc, #364]	; (b4348 <loop+0x1e8>)
   b41dc:	781b      	ldrb	r3, [r3, #0]
   b41de:	495b      	ldr	r1, [pc, #364]	; (b434c <loop+0x1ec>)
   b41e0:	f88d 3000 	strb.w	r3, [sp]
   b41e4:	a802      	add	r0, sp, #8
   b41e6:	233c      	movs	r3, #60	; 0x3c
   b41e8:	f001 fa1c 	bl	b5624 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b41ec:	a803      	add	r0, sp, #12
   b41ee:	f7ff ffa1 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("M", "1", PRIVATE);
    Motion_delayEnabled = false; // disable delay
   b41f2:	702e      	strb	r6, [r5, #0]
    Motion_setDelayExpired = false;
   b41f4:	f88a 6000 	strb.w	r6, [sl]
    Motion_setDelayExpired = true;
  }


//Override IF Statements
if (pinStatePrevious == LOW && pinStateCurrent == HIGH && value == 1) {   // pin state change: LOW -> HIGH
   b41f8:	f8d9 9000 	ldr.w	r9, [r9]
   b41fc:	4d54      	ldr	r5, [pc, #336]	; (b4350 <loop+0x1f0>)
   b41fe:	4e55      	ldr	r6, [pc, #340]	; (b4354 <loop+0x1f4>)
   b4200:	f1b9 0f00 	cmp.w	r9, #0
   b4204:	d15c      	bne.n	b42c0 <loop+0x160>
   b4206:	683b      	ldr	r3, [r7, #0]
   b4208:	2b01      	cmp	r3, #1
   b420a:	d166      	bne.n	b42da <loop+0x17a>
   b420c:	2c01      	cmp	r4, #1
   b420e:	d164      	bne.n	b42da <loop+0x17a>
    Serial1.print("F"); 
   b4210:	f001 fd1c 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b4214:	4950      	ldr	r1, [pc, #320]	; (b4358 <loop+0x1f8>)
   b4216:	f000 ffb1 	bl	b517c <_ZN5Print5printEPKc>
    Serial1.print(setFanSpeed); 
   b421a:	f001 fd17 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b421e:	f8d8 1000 	ldr.w	r1, [r8]
   b4222:	f000 ffab 	bl	b517c <_ZN5Print5printEPKc>
    delayEnabled = false; // disable delay
   b4226:	f885 9000 	strb.w	r9, [r5]
    lightsCondition1 = true; 
   b422a:	7034      	strb	r4, [r6, #0]
    delayEnabled = true; // enable delay
    lightsCondition1 = false;
    delayStartTime = millis(); // set start time
    
  }
  if (lightsCondition1 == true && lightsCondition2 == true && value == 1) {
   b422c:	4f4b      	ldr	r7, [pc, #300]	; (b435c <loop+0x1fc>)
   b422e:	783b      	ldrb	r3, [r7, #0]
   b4230:	2b00      	cmp	r3, #0
   b4232:	d055      	beq.n	b42e0 <loop+0x180>
   b4234:	2c01      	cmp	r4, #1
   b4236:	d153      	bne.n	b42e0 <loop+0x180>
    Serial1.print("M");
   b4238:	f001 fd08 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b423c:	4943      	ldr	r1, [pc, #268]	; (b434c <loop+0x1ec>)
   b423e:	f000 ff9d 	bl	b517c <_ZN5Print5printEPKc>
    lightsCondition1 = false;
   b4242:	2300      	movs	r3, #0
   b4244:	7033      	strb	r3, [r6, #0]
    lightsCondition2 = false;
   b4246:	703b      	strb	r3, [r7, #0]
   b4248:	e04a      	b.n	b42e0 <loop+0x180>
  } else if (value1 == 2){
   b424a:	2802      	cmp	r0, #2
   b424c:	d101      	bne.n	b4252 <loop+0xf2>
    setFanSpeed = fanValMed;
   b424e:	4944      	ldr	r1, [pc, #272]	; (b4360 <loop+0x200>)
   b4250:	e796      	b.n	b4180 <loop+0x20>
  } else if (value1 == 3) {
   b4252:	2803      	cmp	r0, #3
   b4254:	d197      	bne.n	b4186 <loop+0x26>
    setFanSpeed = fanValHigh;
   b4256:	4943      	ldr	r1, [pc, #268]	; (b4364 <loop+0x204>)
   b4258:	e792      	b.n	b4180 <loop+0x20>
  else if (pinStatePrevious == HIGH && pinStateCurrent == LOW) {   // pin state change: HIGH -> LOW
   b425a:	f1ba 0f01 	cmp.w	sl, #1
   b425e:	d10c      	bne.n	b427a <loop+0x11a>
   b4260:	b15e      	cbz	r6, b427a <loop+0x11a>
    Serial.println("Motion stopped!");
   b4262:	f001 fc21 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4266:	4940      	ldr	r1, [pc, #256]	; (b4368 <loop+0x208>)
   b4268:	f000 ff9b 	bl	b51a2 <_ZN5Print7printlnEPKc>
    Motion_delayEnabled = true; // enable delay
   b426c:	f885 a000 	strb.w	sl, [r5]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4270:	f000 fb46 	bl	b4900 <HAL_Timer_Get_Milli_Seconds>
    Motion_delayStartTime = millis(); // set start time
   b4274:	4b3d      	ldr	r3, [pc, #244]	; (b436c <loop+0x20c>)
   b4276:	6018      	str	r0, [r3, #0]
   b4278:	e7be      	b.n	b41f8 <loop+0x98>
   else if (Motion_delayEnabled == true && (millis() - Motion_delayStartTime) >= Motion_DELAY_TIME_MS) {
   b427a:	782b      	ldrb	r3, [r5, #0]
   b427c:	2b00      	cmp	r3, #0
   b427e:	d0bb      	beq.n	b41f8 <loop+0x98>
   b4280:	f000 fb3e 	bl	b4900 <HAL_Timer_Get_Milli_Seconds>
   b4284:	4b39      	ldr	r3, [pc, #228]	; (b436c <loop+0x20c>)
   b4286:	681b      	ldr	r3, [r3, #0]
   b4288:	1ac0      	subs	r0, r0, r3
   b428a:	4b39      	ldr	r3, [pc, #228]	; (b4370 <loop+0x210>)
   b428c:	4298      	cmp	r0, r3
   b428e:	d9b3      	bls.n	b41f8 <loop+0x98>
    Serial.println("No motion for 180 seconds!");
   b4290:	f001 fc0a 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b4294:	4937      	ldr	r1, [pc, #220]	; (b4374 <loop+0x214>)
   b4296:	f000 ff84 	bl	b51a2 <_ZN5Print7printlnEPKc>
   b429a:	4b2a      	ldr	r3, [pc, #168]	; (b4344 <loop+0x1e4>)
   b429c:	4a36      	ldr	r2, [pc, #216]	; (b4378 <loop+0x218>)
   b429e:	781b      	ldrb	r3, [r3, #0]
   b42a0:	492a      	ldr	r1, [pc, #168]	; (b434c <loop+0x1ec>)
   b42a2:	f88d 3000 	strb.w	r3, [sp]
   b42a6:	a802      	add	r0, sp, #8
   b42a8:	233c      	movs	r3, #60	; 0x3c
   b42aa:	f001 f9bb 	bl	b5624 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b42ae:	a803      	add	r0, sp, #12
   b42b0:	f7ff ff40 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Motion_delayEnabled = false; // disable delay
   b42b4:	2300      	movs	r3, #0
   b42b6:	702b      	strb	r3, [r5, #0]
    Motion_setDelayExpired = true;
   b42b8:	4b30      	ldr	r3, [pc, #192]	; (b437c <loop+0x21c>)
   b42ba:	2201      	movs	r2, #1
   b42bc:	701a      	strb	r2, [r3, #0]
   b42be:	e79b      	b.n	b41f8 <loop+0x98>
  else if (pinStatePrevious == HIGH && pinStateCurrent == LOW && value == 1) {   // pin state change: HIGH -> LOW
   b42c0:	f1b9 0f01 	cmp.w	r9, #1
   b42c4:	d109      	bne.n	b42da <loop+0x17a>
   b42c6:	683b      	ldr	r3, [r7, #0]
   b42c8:	b93b      	cbnz	r3, b42da <loop+0x17a>
   b42ca:	2c01      	cmp	r4, #1
   b42cc:	d105      	bne.n	b42da <loop+0x17a>
    lightsCondition1 = false;
   b42ce:	7033      	strb	r3, [r6, #0]
    delayEnabled = true; // enable delay
   b42d0:	702c      	strb	r4, [r5, #0]
   b42d2:	f000 fb15 	bl	b4900 <HAL_Timer_Get_Milli_Seconds>
    delayStartTime = millis(); // set start time
   b42d6:	4b2a      	ldr	r3, [pc, #168]	; (b4380 <loop+0x220>)
   b42d8:	6018      	str	r0, [r3, #0]
  if (lightsCondition1 == true && lightsCondition2 == true && value == 1) {
   b42da:	7833      	ldrb	r3, [r6, #0]
   b42dc:	2b00      	cmp	r3, #0
   b42de:	d1a5      	bne.n	b422c <loop+0xcc>
  };
  if (delayEnabled == true && (millis() - delayStartTime) >= DELAY_TIME_MS && value == 1) {
   b42e0:	782b      	ldrb	r3, [r5, #0]
   b42e2:	b30b      	cbz	r3, b4328 <loop+0x1c8>
   b42e4:	f000 fb0c 	bl	b4900 <HAL_Timer_Get_Milli_Seconds>
   b42e8:	4b25      	ldr	r3, [pc, #148]	; (b4380 <loop+0x220>)
   b42ea:	681b      	ldr	r3, [r3, #0]
   b42ec:	1ac0      	subs	r0, r0, r3
   b42ee:	4b25      	ldr	r3, [pc, #148]	; (b4384 <loop+0x224>)
   b42f0:	4298      	cmp	r0, r3
   b42f2:	d919      	bls.n	b4328 <loop+0x1c8>
   b42f4:	2c01      	cmp	r4, #1
   b42f6:	d117      	bne.n	b4328 <loop+0x1c8>
    Serial.println("No motion for 20 seconds! turning stuff off"); 
   b42f8:	f001 fbd6 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b42fc:	4922      	ldr	r1, [pc, #136]	; (b4388 <loop+0x228>)
   b42fe:	f000 ff50 	bl	b51a2 <_ZN5Print7printlnEPKc>
    Serial1.print("O");
   b4302:	f001 fca3 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b4306:	4921      	ldr	r1, [pc, #132]	; (b438c <loop+0x22c>)
   b4308:	f000 ff38 	bl	b517c <_ZN5Print5printEPKc>
    Serial1.print("F");
   b430c:	f001 fc9e 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b4310:	4911      	ldr	r1, [pc, #68]	; (b4358 <loop+0x1f8>)
   b4312:	f000 ff33 	bl	b517c <_ZN5Print5printEPKc>
    Serial1.print("000");
   b4316:	f001 fc99 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b431a:	491d      	ldr	r1, [pc, #116]	; (b4390 <loop+0x230>)
   b431c:	f000 ff2e 	bl	b517c <_ZN5Print5printEPKc>
    delayEnabled = false; // disable delay
   b4320:	2300      	movs	r3, #0
   b4322:	702b      	strb	r3, [r5, #0]
    lightsCondition2 = true; 
   b4324:	4b0d      	ldr	r3, [pc, #52]	; (b435c <loop+0x1fc>)
   b4326:	701c      	strb	r4, [r3, #0]
  }
}
   b4328:	b004      	add	sp, #16
   b432a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b432e:	bf00      	nop
   b4330:	2003e6bc 	.word	0x2003e6bc
   b4334:	2003e704 	.word	0x2003e704
   b4338:	2003e6e0 	.word	0x2003e6e0
   b433c:	2003e62c 	.word	0x2003e62c
   b4340:	000b801c 	.word	0x000b801c
   b4344:	2003e6a6 	.word	0x2003e6a6
   b4348:	000b802d 	.word	0x000b802d
   b434c:	000b802f 	.word	0x000b802f
   b4350:	2003e62d 	.word	0x2003e62d
   b4354:	2003e6dc 	.word	0x2003e6dc
   b4358:	000b805c 	.word	0x000b805c
   b435c:	2003e6dd 	.word	0x2003e6dd
   b4360:	2003e6cc 	.word	0x2003e6cc
   b4364:	2003e6ac 	.word	0x2003e6ac
   b4368:	000b8031 	.word	0x000b8031
   b436c:	2003e6a0 	.word	0x2003e6a0
   b4370:	0002bf1f 	.word	0x0002bf1f
   b4374:	000b8041 	.word	0x000b8041
   b4378:	000b808e 	.word	0x000b808e
   b437c:	2003e6a4 	.word	0x2003e6a4
   b4380:	2003e6a8 	.word	0x2003e6a8
   b4384:	0087cd9f 	.word	0x0087cd9f
   b4388:	000b805e 	.word	0x000b805e
   b438c:	000b808a 	.word	0x000b808a
   b4390:	000b808c 	.word	0x000b808c
   b4394:	2003e6e4 	.word	0x2003e6e4

000b4398 <_Z10reportTemp6String>:

//--------------------------------------TEMPERATURE REPORTING CLOUD FUNCTION----------------------------------------//
int reportTemp(String command) {
   b4398:	b500      	push	{lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b439a:	4913      	ldr	r1, [pc, #76]	; (b43e8 <_Z10reportTemp6String+0x50>)
   b439c:	b089      	sub	sp, #36	; 0x24
   b439e:	f000 fe7c 	bl	b509a <_ZNK6String6equalsEPKc>
  if(command == "report") {
   b43a2:	b1e8      	cbz	r0, b43e0 <_Z10reportTemp6String+0x48>
  float temperatureReading;
  sensor.read();
   b43a4:	4811      	ldr	r0, [pc, #68]	; (b43ec <_Z10reportTemp6String+0x54>)
   b43a6:	f000 fa33 	bl	b4810 <_ZN6TSYS014readEv>
  temperatureReading = sensor.temperature();
   b43aa:	4810      	ldr	r0, [pc, #64]	; (b43ec <_Z10reportTemp6String+0x54>)
   b43ac:	f000 fa75 	bl	b489a <_ZN6TSYS0111temperatureEv>
  Particle.publish("Temperature", String(temperatureReading), PRIVATE);
   b43b0:	2106      	movs	r1, #6
   b43b2:	a804      	add	r0, sp, #16
   b43b4:	f000 fe57 	bl	b5066 <_ZN6StringC1Efi>
   b43b8:	4b0d      	ldr	r3, [pc, #52]	; (b43f0 <_Z10reportTemp6String+0x58>)
   b43ba:	9a04      	ldr	r2, [sp, #16]
   b43bc:	781b      	ldrb	r3, [r3, #0]
   b43be:	490d      	ldr	r1, [pc, #52]	; (b43f4 <_Z10reportTemp6String+0x5c>)
   b43c0:	f88d 3000 	strb.w	r3, [sp]
   b43c4:	a802      	add	r0, sp, #8
   b43c6:	233c      	movs	r3, #60	; 0x3c
   b43c8:	f001 f92c 	bl	b5624 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b43cc:	a803      	add	r0, sp, #12
   b43ce:	f7ff feb1 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b43d2:	a804      	add	r0, sp, #16
   b43d4:	f000 fdbc 	bl	b4f50 <_ZN6StringD1Ev>
   b43d8:	2001      	movs	r0, #1
  return 1;
  } else return -1;
}
   b43da:	b009      	add	sp, #36	; 0x24
   b43dc:	f85d fb04 	ldr.w	pc, [sp], #4
  } else return -1;
   b43e0:	f04f 30ff 	mov.w	r0, #4294967295
   b43e4:	e7f9      	b.n	b43da <_Z10reportTemp6String+0x42>
   b43e6:	bf00      	nop
   b43e8:	000b8090 	.word	0x000b8090
   b43ec:	2003e6e8 	.word	0x2003e6e8
   b43f0:	2003e6a6 	.word	0x2003e6a6
   b43f4:	000b8010 	.word	0x000b8010

000b43f8 <_Z14enableOverride6String>:


//--------------------------------------FAN OVERRIDE CLOUD FUNCTION----------------------------------------//
int enableOverride(String command) {
   b43f8:	b530      	push	{r4, r5, lr}
   b43fa:	4940      	ldr	r1, [pc, #256]	; (b44fc <_Z14enableOverride6String+0x104>)
   b43fc:	b085      	sub	sp, #20
   b43fe:	4604      	mov	r4, r0
   b4400:	f000 fe4b 	bl	b509a <_ZNK6String6equalsEPKc>
  if(command == "true")   //if cmd from cloud is true, permanently sets EEPROM byte on address 0 to 1;
   b4404:	4605      	mov	r5, r0
   b4406:	b1d0      	cbz	r0, b443e <_Z14enableOverride6String+0x46>
  {
    Serial.print("fan override true");  
   b4408:	f001 fb4e 	bl	b5aa8 <_Z16_fetch_usbserialv>
    int addr = 0;
    uint16_t value = 1;
   b440c:	2401      	movs	r4, #1
    Serial.print("fan override true");  
   b440e:	493c      	ldr	r1, [pc, #240]	; (b4500 <_Z14enableOverride6String+0x108>)
   b4410:	f000 feb4 	bl	b517c <_ZN5Print5printEPKc>
    uint16_t value = 1;
   b4414:	f8ad 4006 	strh.w	r4, [sp, #6]
    EEPROM.put(addr, value);
   b4418:	f001 fe02 	bl	b6020 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b441c:	2202      	movs	r2, #2
   b441e:	f10d 0106 	add.w	r1, sp, #6
   b4422:	2000      	movs	r0, #0
   b4424:	f000 fa84 	bl	b4930 <HAL_EEPROM_Put>
    Particle.publish("Fan Override", "true");
   b4428:	4a34      	ldr	r2, [pc, #208]	; (b44fc <_Z14enableOverride6String+0x104>)
  } else if (command == "false") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
    Serial.print("fan override false");
    int addr = 0;
    uint16_t value = 0;
    EEPROM.put(addr, value);
    Particle.publish("Fan Override", "false");
   b442a:	4936      	ldr	r1, [pc, #216]	; (b4504 <_Z14enableOverride6String+0x10c>)
  } else if (command == "high") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
    Serial.print("fan speed high");
    int addr = 1;
    uint16_t value = 3;
    EEPROM.put(addr, value);
    Particle.publish("Fan Speed", "High");
   b442c:	a802      	add	r0, sp, #8
   b442e:	f7ff fe41 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b4432:	a803      	add	r0, sp, #12
   b4434:	f7ff fe7e 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
   b4438:	2001      	movs	r0, #1

  }

  
  else return -1;
}
   b443a:	b005      	add	sp, #20
   b443c:	bd30      	pop	{r4, r5, pc}
   b443e:	4932      	ldr	r1, [pc, #200]	; (b4508 <_Z14enableOverride6String+0x110>)
   b4440:	4620      	mov	r0, r4
   b4442:	f000 fe2a 	bl	b509a <_ZNK6String6equalsEPKc>
  } else if (command == "false") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
   b4446:	b180      	cbz	r0, b446a <_Z14enableOverride6String+0x72>
    Serial.print("fan override false");
   b4448:	f001 fb2e 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b444c:	492f      	ldr	r1, [pc, #188]	; (b450c <_Z14enableOverride6String+0x114>)
   b444e:	f000 fe95 	bl	b517c <_ZN5Print5printEPKc>
    uint16_t value = 0;
   b4452:	f8ad 5006 	strh.w	r5, [sp, #6]
    EEPROM.put(addr, value);
   b4456:	f001 fde3 	bl	b6020 <_Z21__fetch_global_EEPROMv>
   b445a:	2202      	movs	r2, #2
   b445c:	f10d 0106 	add.w	r1, sp, #6
   b4460:	4628      	mov	r0, r5
   b4462:	f000 fa65 	bl	b4930 <HAL_EEPROM_Put>
    Particle.publish("Fan Override", "false");
   b4466:	4a28      	ldr	r2, [pc, #160]	; (b4508 <_Z14enableOverride6String+0x110>)
   b4468:	e7df      	b.n	b442a <_Z14enableOverride6String+0x32>
   b446a:	4929      	ldr	r1, [pc, #164]	; (b4510 <_Z14enableOverride6String+0x118>)
   b446c:	4620      	mov	r0, r4
   b446e:	f000 fe14 	bl	b509a <_ZNK6String6equalsEPKc>
    else if(command == "low") { //if cmd from cloud is true, permanently sets EEPROM byte on address 0 to 1;
   b4472:	b190      	cbz	r0, b449a <_Z14enableOverride6String+0xa2>
    Serial.print("fan speed low");  
   b4474:	f001 fb18 	bl	b5aa8 <_Z16_fetch_usbserialv>
    uint16_t value = 1;
   b4478:	2401      	movs	r4, #1
    Serial.print("fan speed low");  
   b447a:	4926      	ldr	r1, [pc, #152]	; (b4514 <_Z14enableOverride6String+0x11c>)
   b447c:	f000 fe7e 	bl	b517c <_ZN5Print5printEPKc>
    uint16_t value = 1;
   b4480:	f8ad 4006 	strh.w	r4, [sp, #6]
    EEPROM.put(addr, value);
   b4484:	f001 fdcc 	bl	b6020 <_Z21__fetch_global_EEPROMv>
   b4488:	2202      	movs	r2, #2
   b448a:	f10d 0106 	add.w	r1, sp, #6
   b448e:	4620      	mov	r0, r4
   b4490:	f000 fa4e 	bl	b4930 <HAL_EEPROM_Put>
    Particle.publish("Fan Speed", "Low");
   b4494:	4a20      	ldr	r2, [pc, #128]	; (b4518 <_Z14enableOverride6String+0x120>)
    Particle.publish("Fan Speed", "High");
   b4496:	4921      	ldr	r1, [pc, #132]	; (b451c <_Z14enableOverride6String+0x124>)
   b4498:	e7c8      	b.n	b442c <_Z14enableOverride6String+0x34>
   b449a:	4921      	ldr	r1, [pc, #132]	; (b4520 <_Z14enableOverride6String+0x128>)
   b449c:	4620      	mov	r0, r4
   b449e:	f000 fdfc 	bl	b509a <_ZNK6String6equalsEPKc>
  } else if (command == "medium") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
   b44a2:	b188      	cbz	r0, b44c8 <_Z14enableOverride6String+0xd0>
    Serial.print("fan speed medium");
   b44a4:	f001 fb00 	bl	b5aa8 <_Z16_fetch_usbserialv>
    uint16_t value = 2;
   b44a8:	2402      	movs	r4, #2
    Serial.print("fan speed medium");
   b44aa:	491e      	ldr	r1, [pc, #120]	; (b4524 <_Z14enableOverride6String+0x12c>)
   b44ac:	f000 fe66 	bl	b517c <_ZN5Print5printEPKc>
    uint16_t value = 2;
   b44b0:	f8ad 4006 	strh.w	r4, [sp, #6]
    EEPROM.put(addr, value);
   b44b4:	f001 fdb4 	bl	b6020 <_Z21__fetch_global_EEPROMv>
   b44b8:	4622      	mov	r2, r4
   b44ba:	f10d 0106 	add.w	r1, sp, #6
   b44be:	2001      	movs	r0, #1
   b44c0:	f000 fa36 	bl	b4930 <HAL_EEPROM_Put>
    Particle.publish("Fan Speed", "Medium");
   b44c4:	4a18      	ldr	r2, [pc, #96]	; (b4528 <_Z14enableOverride6String+0x130>)
   b44c6:	e7e6      	b.n	b4496 <_Z14enableOverride6String+0x9e>
   b44c8:	4918      	ldr	r1, [pc, #96]	; (b452c <_Z14enableOverride6String+0x134>)
   b44ca:	4620      	mov	r0, r4
   b44cc:	f000 fde5 	bl	b509a <_ZNK6String6equalsEPKc>
  } else if (command == "high") {  //if cmd from cloud is false, permanently sets EEPROM byte on address 0 to 0;
   b44d0:	b188      	cbz	r0, b44f6 <_Z14enableOverride6String+0xfe>
    Serial.print("fan speed high");
   b44d2:	f001 fae9 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b44d6:	4916      	ldr	r1, [pc, #88]	; (b4530 <_Z14enableOverride6String+0x138>)
   b44d8:	f000 fe50 	bl	b517c <_ZN5Print5printEPKc>
    uint16_t value = 3;
   b44dc:	2303      	movs	r3, #3
   b44de:	f8ad 3006 	strh.w	r3, [sp, #6]
    EEPROM.put(addr, value);
   b44e2:	f001 fd9d 	bl	b6020 <_Z21__fetch_global_EEPROMv>
   b44e6:	2202      	movs	r2, #2
   b44e8:	f10d 0106 	add.w	r1, sp, #6
   b44ec:	2001      	movs	r0, #1
   b44ee:	f000 fa1f 	bl	b4930 <HAL_EEPROM_Put>
    Particle.publish("Fan Speed", "High");
   b44f2:	4a10      	ldr	r2, [pc, #64]	; (b4534 <_Z14enableOverride6String+0x13c>)
   b44f4:	e7cf      	b.n	b4496 <_Z14enableOverride6String+0x9e>
  else return -1;
   b44f6:	f04f 30ff 	mov.w	r0, #4294967295
   b44fa:	e79e      	b.n	b443a <_Z14enableOverride6String+0x42>
   b44fc:	000b80a4 	.word	0x000b80a4
   b4500:	000b8097 	.word	0x000b8097
   b4504:	000b7ffc 	.word	0x000b7ffc
   b4508:	000b80b6 	.word	0x000b80b6
   b450c:	000b80a9 	.word	0x000b80a9
   b4510:	000b80c6 	.word	0x000b80c6
   b4514:	000b80bc 	.word	0x000b80bc
   b4518:	000b80ca 	.word	0x000b80ca
   b451c:	000b80ce 	.word	0x000b80ce
   b4520:	000b80e2 	.word	0x000b80e2
   b4524:	000b80d8 	.word	0x000b80d8
   b4528:	000b80e9 	.word	0x000b80e9
   b452c:	000b80fa 	.word	0x000b80fa
   b4530:	000b80f0 	.word	0x000b80f0
   b4534:	000b80ff 	.word	0x000b80ff

000b4538 <_GLOBAL__sub_I_fanValHigh>:
}
   b4538:	b538      	push	{r3, r4, r5, lr}
        val_(val) {
   b453a:	4b1b      	ldr	r3, [pc, #108]	; (b45a8 <_GLOBAL__sub_I_fanValHigh+0x70>)
String fanValHigh = "025";
   b453c:	4d1b      	ldr	r5, [pc, #108]	; (b45ac <_GLOBAL__sub_I_fanValHigh+0x74>)
   b453e:	4c1c      	ldr	r4, [pc, #112]	; (b45b0 <_GLOBAL__sub_I_fanValHigh+0x78>)
   b4540:	2100      	movs	r1, #0
   b4542:	7019      	strb	r1, [r3, #0]
   b4544:	4b1b      	ldr	r3, [pc, #108]	; (b45b4 <_GLOBAL__sub_I_fanValHigh+0x7c>)
   b4546:	2001      	movs	r0, #1
   b4548:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED);
   b454a:	f000 fb09 	bl	b4b60 <system_thread_set_state>
String fanValHigh = "025";
   b454e:	491a      	ldr	r1, [pc, #104]	; (b45b8 <_GLOBAL__sub_I_fanValHigh+0x80>)
   b4550:	4628      	mov	r0, r5
   b4552:	f000 fd48 	bl	b4fe6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4556:	4628      	mov	r0, r5
String fanValMed = "015";
   b4558:	4d18      	ldr	r5, [pc, #96]	; (b45bc <_GLOBAL__sub_I_fanValHigh+0x84>)
String fanValHigh = "025";
   b455a:	4a19      	ldr	r2, [pc, #100]	; (b45c0 <_GLOBAL__sub_I_fanValHigh+0x88>)
   b455c:	4621      	mov	r1, r4
   b455e:	f001 fdb3 	bl	b60c8 <__aeabi_atexit>
String fanValMed = "015";
   b4562:	4918      	ldr	r1, [pc, #96]	; (b45c4 <_GLOBAL__sub_I_fanValHigh+0x8c>)
   b4564:	4628      	mov	r0, r5
   b4566:	f000 fd3e 	bl	b4fe6 <_ZN6StringC1EPK19__FlashStringHelper>
   b456a:	4628      	mov	r0, r5
String fanValLow = "010";
   b456c:	4d16      	ldr	r5, [pc, #88]	; (b45c8 <_GLOBAL__sub_I_fanValHigh+0x90>)
String fanValMed = "015";
   b456e:	4a14      	ldr	r2, [pc, #80]	; (b45c0 <_GLOBAL__sub_I_fanValHigh+0x88>)
   b4570:	4621      	mov	r1, r4
   b4572:	f001 fda9 	bl	b60c8 <__aeabi_atexit>
String fanValLow = "010";
   b4576:	4915      	ldr	r1, [pc, #84]	; (b45cc <_GLOBAL__sub_I_fanValHigh+0x94>)
   b4578:	4628      	mov	r0, r5
   b457a:	f000 fd34 	bl	b4fe6 <_ZN6StringC1EPK19__FlashStringHelper>
   b457e:	4628      	mov	r0, r5
String setFanSpeed;
   b4580:	4d13      	ldr	r5, [pc, #76]	; (b45d0 <_GLOBAL__sub_I_fanValHigh+0x98>)
String fanValLow = "010";
   b4582:	4a0f      	ldr	r2, [pc, #60]	; (b45c0 <_GLOBAL__sub_I_fanValHigh+0x88>)
   b4584:	4621      	mov	r1, r4
   b4586:	f001 fd9f 	bl	b60c8 <__aeabi_atexit>
String setFanSpeed;
   b458a:	4912      	ldr	r1, [pc, #72]	; (b45d4 <_GLOBAL__sub_I_fanValHigh+0x9c>)
   b458c:	4628      	mov	r0, r5
   b458e:	f000 fd2a 	bl	b4fe6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4592:	4621      	mov	r1, r4
   b4594:	4628      	mov	r0, r5
   b4596:	4a0a      	ldr	r2, [pc, #40]	; (b45c0 <_GLOBAL__sub_I_fanValHigh+0x88>)
   b4598:	f001 fd96 	bl	b60c8 <__aeabi_atexit>
}
   b459c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
TSYS01 sensor;
   b45a0:	480d      	ldr	r0, [pc, #52]	; (b45d8 <_GLOBAL__sub_I_fanValHigh+0xa0>)
   b45a2:	f000 b81f 	b.w	b45e4 <_ZN6TSYS01C1Ev>
   b45a6:	bf00      	nop
   b45a8:	2003e6a5 	.word	0x2003e6a5
   b45ac:	2003e6ac 	.word	0x2003e6ac
   b45b0:	000b4f51 	.word	0x000b4f51
   b45b4:	2003e6a6 	.word	0x2003e6a6
   b45b8:	000b8104 	.word	0x000b8104
   b45bc:	2003e6cc 	.word	0x2003e6cc
   b45c0:	2003e69c 	.word	0x2003e69c
   b45c4:	000b8108 	.word	0x000b8108
   b45c8:	2003e6bc 	.word	0x2003e6bc
   b45cc:	000b810c 	.word	0x000b810c
   b45d0:	2003e704 	.word	0x2003e704
   b45d4:	000b8040 	.word	0x000b8040
   b45d8:	2003e6e8 	.word	0x2003e6e8

000b45dc <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b45dc:	6803      	ldr	r3, [r0, #0]
   b45de:	b2c9      	uxtb	r1, r1
   b45e0:	689b      	ldr	r3, [r3, #8]
   b45e2:	4718      	bx	r3

000b45e4 <_ZN6TSYS01C1Ev>:
#define TSYS01_ADC_TEMP_CONV               0x48
#define TSYS01_PROM_READ                   0XA0

TSYS01::TSYS01() {

}
   b45e4:	4770      	bx	lr

000b45e6 <_ZN6TSYS014initEv>:

void TSYS01::init() {
   b45e6:	b570      	push	{r4, r5, r6, lr}
   b45e8:	4604      	mov	r4, r0
	// Reset the TSYS01, per datasheet
	Wire.beginTransmission(TSYS01_ADDR);
   b45ea:	f001 fd45 	bl	b6078 <_Z19__fetch_global_Wirev>
   b45ee:	2177      	movs	r1, #119	; 0x77
   b45f0:	f001 fbf8 	bl	b5de4 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(TSYS01_RESET);
   b45f4:	f001 fd40 	bl	b6078 <_Z19__fetch_global_Wirev>
   b45f8:	211e      	movs	r1, #30
   b45fa:	f7ff ffef 	bl	b45dc <_ZN7TwoWire5writeEi.isra.0>
	Wire.endTransmission();
   b45fe:	f001 fd3b 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4602:	f001 fbf6 	bl	b5df2 <_ZN7TwoWire15endTransmissionEv>
	
	delay(10);
   b4606:	200a      	movs	r0, #10
   b4608:	f000 fe06 	bl	b5218 <delay>
	
		// Read calibration values
	for ( uint8_t i = 0 ; i < 8 ; i++ ) {
   b460c:	3c02      	subs	r4, #2
	delay(10);
   b460e:	25a0      	movs	r5, #160	; 0xa0
		Wire.beginTransmission(TSYS01_ADDR);
   b4610:	f001 fd32 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4614:	2177      	movs	r1, #119	; 0x77
   b4616:	f001 fbe5 	bl	b5de4 <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(TSYS01_PROM_READ+i*2);
   b461a:	f001 fd2d 	bl	b6078 <_Z19__fetch_global_Wirev>
   b461e:	4629      	mov	r1, r5
   b4620:	f7ff ffdc 	bl	b45dc <_ZN7TwoWire5writeEi.isra.0>
		Wire.endTransmission();
   b4624:	f001 fd28 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4628:	f001 fbe3 	bl	b5df2 <_ZN7TwoWire15endTransmissionEv>

		Wire.requestFrom(TSYS01_ADDR,2);
   b462c:	f001 fd24 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4630:	2202      	movs	r2, #2
   b4632:	2177      	movs	r1, #119	; 0x77
   b4634:	f001 fbcf 	bl	b5dd6 <_ZN7TwoWire11requestFromEhj>
		C[i] = (Wire.read() << 8) | Wire.read();
   b4638:	f001 fd1e 	bl	b6078 <_Z19__fetch_global_Wirev>
   b463c:	6803      	ldr	r3, [r0, #0]
   b463e:	695b      	ldr	r3, [r3, #20]
   b4640:	4798      	blx	r3
   b4642:	4606      	mov	r6, r0
   b4644:	f001 fd18 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4648:	6803      	ldr	r3, [r0, #0]
   b464a:	695b      	ldr	r3, [r3, #20]
   b464c:	4798      	blx	r3
	for ( uint8_t i = 0 ; i < 8 ; i++ ) {
   b464e:	3502      	adds	r5, #2
		C[i] = (Wire.read() << 8) | Wire.read();
   b4650:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	for ( uint8_t i = 0 ; i < 8 ; i++ ) {
   b4654:	2db0      	cmp	r5, #176	; 0xb0
		C[i] = (Wire.read() << 8) | Wire.read();
   b4656:	f824 0f02 	strh.w	r0, [r4, #2]!
	for ( uint8_t i = 0 ; i < 8 ; i++ ) {
   b465a:	d1d9      	bne.n	b4610 <_ZN6TSYS014initEv+0x2a>
	}

}
   b465c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4660 <_ZN6TSYS019calculateEv>:
	adc = DD1/256;

	calculate();
}

void TSYS01::calculate() {	
   b4660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4664:	ed2d 8b02 	vpush	{d8}
	adc = DD1/256; 

TEMP = (-2) * float(C[1]) / 1000000000000000000000.0f * pow(adc,4) + 
   b4668:	8843      	ldrh	r3, [r0, #2]
   b466a:	eddf 7a63 	vldr	s15, [pc, #396]	; b47f8 <_ZN6TSYS019calculateEv+0x198>
	adc = DD1/256; 
   b466e:	6905      	ldr	r5, [r0, #16]
TEMP = (-2) * float(C[1]) / 1000000000000000000000.0f * pow(adc,4) + 
   b4670:	ee07 3a10 	vmov	s14, r3
   b4674:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b4678:	eeb8 8a00 	vmov.f32	s16, #128	; 0xc0000000 -2.0
   b467c:	ee27 7a08 	vmul.f32	s14, s14, s16
	adc = DD1/256; 
   b4680:	0a2d      	lsrs	r5, r5, #8
TEMP = (-2) * float(C[1]) / 1000000000000000000000.0f * pow(adc,4) + 
   b4682:	eec7 7a27 	vdiv.f32	s15, s14, s15
void TSYS01::calculate() {	
   b4686:	b087      	sub	sp, #28
   b4688:	4604      	mov	r4, r0
	adc = DD1/256; 
   b468a:	6185      	str	r5, [r0, #24]
TEMP = (-2) * float(C[1]) / 1000000000000000000000.0f * pow(adc,4) + 
   b468c:	ee17 0a90 	vmov	r0, s15
   b4690:	f002 ff10 	bl	b74b4 <__aeabi_f2d>
   b4694:	4680      	mov	r8, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b4696:	4628      	mov	r0, r5
   b4698:	4689      	mov	r9, r1
   b469a:	f002 fee9 	bl	b7470 <__aeabi_ui2d>
   b469e:	ed9f 1b52 	vldr	d1, [pc, #328]	; b47e8 <_ZN6TSYS019calculateEv+0x188>
   b46a2:	ec41 0b10 	vmov	d0, r0, r1
   b46a6:	f001 fd1b 	bl	b60e0 <pow>
        4 * float(C[2]) / 10000000000000000.0f * pow(adc,3) +
   b46aa:	88a3      	ldrh	r3, [r4, #4]
   b46ac:	ee07 3a10 	vmov	s14, r3
   b46b0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b46b4:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   b46b8:	ee27 7a27 	vmul.f32	s14, s14, s15
   b46bc:	eddf 7a4f 	vldr	s15, [pc, #316]	; b47fc <_ZN6TSYS019calculateEv+0x19c>
   b46c0:	eec7 7a27 	vdiv.f32	s15, s14, s15
   b46c4:	ed8d 0b02 	vstr	d0, [sp, #8]
   b46c8:	ee17 0a90 	vmov	r0, s15
   b46cc:	f002 fef2 	bl	b74b4 <__aeabi_f2d>
   b46d0:	4682      	mov	sl, r0
   b46d2:	69a0      	ldr	r0, [r4, #24]
   b46d4:	468b      	mov	fp, r1
   b46d6:	f002 fecb 	bl	b7470 <__aeabi_ui2d>
   b46da:	ed9f 1b45 	vldr	d1, [pc, #276]	; b47f0 <_ZN6TSYS019calculateEv+0x190>
   b46de:	ec41 0b10 	vmov	d0, r0, r1
   b46e2:	f001 fcfd 	bl	b60e0 <pow>
	  (-2) * float(C[3]) / 100000000000.0f * pow(adc,2) +
   b46e6:	69a5      	ldr	r5, [r4, #24]
   b46e8:	4628      	mov	r0, r5
   b46ea:	ed8d 0b00 	vstr	d0, [sp]
   b46ee:	f002 febf 	bl	b7470 <__aeabi_ui2d>
   b46f2:	4602      	mov	r2, r0
   b46f4:	460b      	mov	r3, r1
   b46f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   b46fa:	88e3      	ldrh	r3, [r4, #6]
   b46fc:	ed9f 7a40 	vldr	s14, [pc, #256]	; b4800 <_ZN6TSYS019calculateEv+0x1a0>
   b4700:	ee07 3a90 	vmov	s15, r3
   b4704:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b4708:	ee67 7a88 	vmul.f32	s15, s15, s16
   b470c:	eec7 7a87 	vdiv.f32	s15, s15, s14
   b4710:	ee17 0a90 	vmov	r0, s15
   b4714:	f002 fece 	bl	b74b4 <__aeabi_f2d>
   b4718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   b471c:	4606      	mov	r6, r0
   b471e:	460f      	mov	r7, r1
   b4720:	4610      	mov	r0, r2
   b4722:	4619      	mov	r1, r3
   b4724:	f002 ff1e 	bl	b7564 <__aeabi_dmul>
   b4728:	4602      	mov	r2, r0
   b472a:	460b      	mov	r3, r1
   b472c:	4630      	mov	r0, r6
   b472e:	4639      	mov	r1, r7
   b4730:	f002 ff18 	bl	b7564 <__aeabi_dmul>
TEMP = (-2) * float(C[1]) / 1000000000000000000000.0f * pow(adc,4) + 
   b4734:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	  (-2) * float(C[3]) / 100000000000.0f * pow(adc,2) +
   b4738:	4606      	mov	r6, r0
   b473a:	460f      	mov	r7, r1
TEMP = (-2) * float(C[1]) / 1000000000000000000000.0f * pow(adc,4) + 
   b473c:	4640      	mov	r0, r8
   b473e:	4649      	mov	r1, r9
   b4740:	f002 ff10 	bl	b7564 <__aeabi_dmul>
        4 * float(C[2]) / 10000000000000000.0f * pow(adc,3) +
   b4744:	e9dd 2300 	ldrd	r2, r3, [sp]
TEMP = (-2) * float(C[1]) / 1000000000000000000000.0f * pow(adc,4) + 
   b4748:	4680      	mov	r8, r0
   b474a:	4689      	mov	r9, r1
        4 * float(C[2]) / 10000000000000000.0f * pow(adc,3) +
   b474c:	4650      	mov	r0, sl
   b474e:	4659      	mov	r1, fp
   b4750:	f002 ff08 	bl	b7564 <__aeabi_dmul>
   b4754:	4602      	mov	r2, r0
   b4756:	460b      	mov	r3, r1
TEMP = (-2) * float(C[1]) / 1000000000000000000000.0f * pow(adc,4) + 
   b4758:	4640      	mov	r0, r8
   b475a:	4649      	mov	r1, r9
   b475c:	f002 fd4c 	bl	b71f8 <__adddf3>
   b4760:	4602      	mov	r2, r0
   b4762:	460b      	mov	r3, r1
        4 * float(C[2]) / 10000000000000000.0f * pow(adc,3) +
   b4764:	4630      	mov	r0, r6
   b4766:	4639      	mov	r1, r7
   b4768:	f002 fd46 	bl	b71f8 <__adddf3>
   	    1 * float(C[4]) / 1000000.0f * adc +
   b476c:	8923      	ldrh	r3, [r4, #8]
   b476e:	eddf 6a25 	vldr	s13, [pc, #148]	; b4804 <_ZN6TSYS019calculateEv+0x1a4>
   b4772:	ee07 3a90 	vmov	s15, r3
   b4776:	eef8 7a67 	vcvt.f32.u32	s15, s15
        4 * float(C[2]) / 10000000000000000.0f * pow(adc,3) +
   b477a:	4606      	mov	r6, r0
   	    1 * float(C[4]) / 1000000.0f * adc +
   b477c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        4 * float(C[2]) / 10000000000000000.0f * pow(adc,3) +
   b4780:	460f      	mov	r7, r1
   	    1 * float(C[4]) / 1000000.0f * adc +
   b4782:	ee07 5a90 	vmov	s15, r5
   b4786:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b478a:	ee67 7a27 	vmul.f32	s15, s14, s15
   b478e:	ee17 0a90 	vmov	r0, s15
   b4792:	f002 fe8f 	bl	b74b4 <__aeabi_f2d>
   b4796:	4602      	mov	r2, r0
   b4798:	460b      	mov	r3, r1
	  (-2) * float(C[3]) / 100000000000.0f * pow(adc,2) +
   b479a:	4630      	mov	r0, r6
   b479c:	4639      	mov	r1, r7
   b479e:	f002 fd2b 	bl	b71f8 <__adddf3>
   b47a2:	4606      	mov	r6, r0
      (-1.5) * float(C[5]) / 100 ;
   b47a4:	8960      	ldrh	r0, [r4, #10]
   b47a6:	ee07 0a90 	vmov	s15, r0
   b47aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  (-2) * float(C[3]) / 100000000000.0f * pow(adc,2) +
   b47ae:	460f      	mov	r7, r1
      (-1.5) * float(C[5]) / 100 ;
   b47b0:	ee17 0a90 	vmov	r0, s15
   b47b4:	f002 fe7e 	bl	b74b4 <__aeabi_f2d>
   b47b8:	4b13      	ldr	r3, [pc, #76]	; (b4808 <_ZN6TSYS019calculateEv+0x1a8>)
   b47ba:	2200      	movs	r2, #0
   b47bc:	f002 fed2 	bl	b7564 <__aeabi_dmul>
   b47c0:	4b12      	ldr	r3, [pc, #72]	; (b480c <_ZN6TSYS019calculateEv+0x1ac>)
   b47c2:	2200      	movs	r2, #0
   b47c4:	f002 fff8 	bl	b77b8 <__aeabi_ddiv>
   b47c8:	4602      	mov	r2, r0
   b47ca:	460b      	mov	r3, r1
   	    1 * float(C[4]) / 1000000.0f * adc +
   b47cc:	4630      	mov	r0, r6
   b47ce:	4639      	mov	r1, r7
   b47d0:	f002 fd12 	bl	b71f8 <__adddf3>
   b47d4:	f003 f996 	bl	b7b04 <__aeabi_d2f>
   b47d8:	6160      	str	r0, [r4, #20]

}
   b47da:	b007      	add	sp, #28
   b47dc:	ecbd 8b02 	vpop	{d8}
   b47e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b47e4:	f3af 8000 	nop.w
   b47e8:	00000000 	.word	0x00000000
   b47ec:	40100000 	.word	0x40100000
   b47f0:	00000000 	.word	0x00000000
   b47f4:	40080000 	.word	0x40080000
   b47f8:	6258d727 	.word	0x6258d727
   b47fc:	5a0e1bca 	.word	0x5a0e1bca
   b4800:	51ba43b7 	.word	0x51ba43b7
   b4804:	49742400 	.word	0x49742400
   b4808:	bff80000 	.word	0xbff80000
   b480c:	40590000 	.word	0x40590000

000b4810 <_ZN6TSYS014readEv>:
void TSYS01::read() {
   b4810:	b538      	push	{r3, r4, r5, lr}
   b4812:	4604      	mov	r4, r0
	Wire.beginTransmission(TSYS01_ADDR);
   b4814:	f001 fc30 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4818:	2177      	movs	r1, #119	; 0x77
   b481a:	f001 fae3 	bl	b5de4 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(TSYS01_ADC_TEMP_CONV);
   b481e:	f001 fc2b 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4822:	2148      	movs	r1, #72	; 0x48
   b4824:	f7ff feda 	bl	b45dc <_ZN7TwoWire5writeEi.isra.0>
	Wire.endTransmission();
   b4828:	f001 fc26 	bl	b6078 <_Z19__fetch_global_Wirev>
   b482c:	f001 fae1 	bl	b5df2 <_ZN7TwoWire15endTransmissionEv>
	delay(10); // Max conversion time per datasheet
   b4830:	200a      	movs	r0, #10
   b4832:	f000 fcf1 	bl	b5218 <delay>
	Wire.beginTransmission(TSYS01_ADDR);
   b4836:	f001 fc1f 	bl	b6078 <_Z19__fetch_global_Wirev>
   b483a:	2177      	movs	r1, #119	; 0x77
   b483c:	f001 fad2 	bl	b5de4 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(TSYS01_ADC_READ);
   b4840:	f001 fc1a 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4844:	2100      	movs	r1, #0
   b4846:	f7ff fec9 	bl	b45dc <_ZN7TwoWire5writeEi.isra.0>
	Wire.endTransmission();
   b484a:	f001 fc15 	bl	b6078 <_Z19__fetch_global_Wirev>
   b484e:	f001 fad0 	bl	b5df2 <_ZN7TwoWire15endTransmissionEv>
	Wire.requestFrom(TSYS01_ADDR,3);
   b4852:	f001 fc11 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4856:	2203      	movs	r2, #3
   b4858:	2177      	movs	r1, #119	; 0x77
   b485a:	f001 fabc 	bl	b5dd6 <_ZN7TwoWire11requestFromEhj>
	DD1 = 0;
   b485e:	2300      	movs	r3, #0
   b4860:	6123      	str	r3, [r4, #16]
	DD1 = Wire.read();
   b4862:	f001 fc09 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4866:	6803      	ldr	r3, [r0, #0]
   b4868:	695b      	ldr	r3, [r3, #20]
   b486a:	4798      	blx	r3
   b486c:	6120      	str	r0, [r4, #16]
   b486e:	4605      	mov	r5, r0
	DD1 = (DD1 << 8) | Wire.read();
   b4870:	f001 fc02 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4874:	6803      	ldr	r3, [r0, #0]
   b4876:	695b      	ldr	r3, [r3, #20]
   b4878:	4798      	blx	r3
   b487a:	ea40 2505 	orr.w	r5, r0, r5, lsl #8
   b487e:	6125      	str	r5, [r4, #16]
	DD1 = (DD1 << 8) | Wire.read();
   b4880:	f001 fbfa 	bl	b6078 <_Z19__fetch_global_Wirev>
   b4884:	6803      	ldr	r3, [r0, #0]
   b4886:	695b      	ldr	r3, [r3, #20]
   b4888:	4798      	blx	r3
   b488a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   b488e:	6120      	str	r0, [r4, #16]
	calculate();
   b4890:	4620      	mov	r0, r4
}
   b4892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	calculate();
   b4896:	f7ff bee3 	b.w	b4660 <_ZN6TSYS019calculateEv>

000b489a <_ZN6TSYS0111temperatureEv>:

float TSYS01::temperature() {
	return TEMP;
}
   b489a:	ed90 0a05 	vldr	s0, [r0, #20]
   b489e:	4770      	bx	lr

000b48a0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <netdb_freeaddrinfo+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	689b      	ldr	r3, [r3, #8]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030268 	.word	0x00030268

000b48b0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <netdb_getaddrinfo+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	68db      	ldr	r3, [r3, #12]
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	00030268 	.word	0x00030268

000b48c0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <HAL_Pin_Mode+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	689b      	ldr	r3, [r3, #8]
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	0003022c 	.word	0x0003022c

000b48d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <HAL_Get_Pin_Mode+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	68db      	ldr	r3, [r3, #12]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	0003022c 	.word	0x0003022c

000b48e0 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <HAL_GPIO_Read+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	695b      	ldr	r3, [r3, #20]
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	0003022c 	.word	0x0003022c

000b48f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <HAL_RNG_GetRandomNumber+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	685b      	ldr	r3, [r3, #4]
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	00030218 	.word	0x00030218

000b4900 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	695b      	ldr	r3, [r3, #20]
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	00030218 	.word	0x00030218

000b4910 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <HAL_EEPROM_Init+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	00030218 	.word	0x00030218

000b4920 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <HAL_EEPROM_Read+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	00030218 	.word	0x00030218

000b4930 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <HAL_EEPROM_Put+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	00030218 	.word	0x00030218

000b4940 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <os_mutex_recursive_create+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	00030248 	.word	0x00030248

000b4950 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <os_mutex_recursive_destroy+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030248 	.word	0x00030248

000b4960 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <inet_inet_ntop+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	695b      	ldr	r3, [r3, #20]
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	00030264 	.word	0x00030264

000b4970 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <hal_usart_init+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	681b      	ldr	r3, [r3, #0]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	0003023c 	.word	0x0003023c

000b4980 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <hal_usart_write+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	68db      	ldr	r3, [r3, #12]
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	0003023c 	.word	0x0003023c

000b4990 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <hal_usart_available+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	691b      	ldr	r3, [r3, #16]
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	0003023c 	.word	0x0003023c

000b49a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <hal_usart_read+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	695b      	ldr	r3, [r3, #20]
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	0003023c 	.word	0x0003023c

000b49b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <hal_usart_peek+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	699b      	ldr	r3, [r3, #24]
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	0003023c 	.word	0x0003023c

000b49c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <hal_usart_flush+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	69db      	ldr	r3, [r3, #28]
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	0003023c 	.word	0x0003023c

000b49d0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <hal_usart_is_enabled+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	6a1b      	ldr	r3, [r3, #32]
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	0003023c 	.word	0x0003023c

000b49e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <hal_usart_available_data_for_write+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	0003023c 	.word	0x0003023c

000b49f0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <hal_usart_begin_config+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	0003023c 	.word	0x0003023c

000b4a00 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <hal_i2c_begin+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	68db      	ldr	r3, [r3, #12]
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	00030228 	.word	0x00030228

000b4a10 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <hal_i2c_begin_transmission+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	699b      	ldr	r3, [r3, #24]
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	00030228 	.word	0x00030228

000b4a20 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <hal_i2c_end_transmission+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	69db      	ldr	r3, [r3, #28]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	00030228 	.word	0x00030228

000b4a30 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <hal_i2c_write+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	6a1b      	ldr	r3, [r3, #32]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	00030228 	.word	0x00030228

000b4a40 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <hal_i2c_available+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	00030228 	.word	0x00030228

000b4a50 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <hal_i2c_read+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	00030228 	.word	0x00030228

000b4a60 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <hal_i2c_peek+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	00030228 	.word	0x00030228

000b4a70 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <hal_i2c_flush+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	00030228 	.word	0x00030228

000b4a80 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <hal_i2c_is_enabled+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	00030228 	.word	0x00030228

000b4a90 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <hal_i2c_init+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	00030228 	.word	0x00030228

000b4aa0 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <hal_i2c_request_ex+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	00030228 	.word	0x00030228

000b4ab0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <hal_spi_init+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	69db      	ldr	r3, [r3, #28]
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	00030230 	.word	0x00030230

000b4ac0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <hal_spi_is_enabled+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6a1b      	ldr	r3, [r3, #32]
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	00030230 	.word	0x00030230

000b4ad0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <HAL_USB_USART_Init+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	681b      	ldr	r3, [r3, #0]
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	0003024c 	.word	0x0003024c

000b4ae0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <HAL_USB_USART_Begin+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	685b      	ldr	r3, [r3, #4]
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	0003024c 	.word	0x0003024c

000b4af0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <HAL_USB_USART_Available_Data+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	691b      	ldr	r3, [r3, #16]
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	0003024c 	.word	0x0003024c

000b4b00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	695b      	ldr	r3, [r3, #20]
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	0003024c 	.word	0x0003024c

000b4b10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <HAL_USB_USART_Receive_Data+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	699b      	ldr	r3, [r3, #24]
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	0003024c 	.word	0x0003024c

000b4b20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <HAL_USB_USART_Send_Data+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	69db      	ldr	r3, [r3, #28]
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	0003024c 	.word	0x0003024c

000b4b30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <HAL_USB_USART_Flush_Data+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	6a1b      	ldr	r3, [r3, #32]
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	0003024c 	.word	0x0003024c

000b4b40 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <set_system_mode+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	685b      	ldr	r3, [r3, #4]
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	00030220 	.word	0x00030220

000b4b50 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <system_delay_ms+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	695b      	ldr	r3, [r3, #20]
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	00030220 	.word	0x00030220

000b4b60 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <system_thread_set_state+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	00030220 	.word	0x00030220

000b4b70 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <application_thread_current+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	00030220 	.word	0x00030220

000b4b80 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <application_thread_invoke+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	00030220 	.word	0x00030220

000b4b90 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b03      	ldr	r3, [pc, #12]	; (b4ba0 <system_ctrl_set_app_request_handler+0x10>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b9a:	9301      	str	r3, [sp, #4]
   b4b9c:	bd08      	pop	{r3, pc}
   b4b9e:	0000      	.short	0x0000
   b4ba0:	00030220 	.word	0x00030220

000b4ba4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b03      	ldr	r3, [pc, #12]	; (b4bb4 <system_ctrl_set_result+0x10>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4bae:	9301      	str	r3, [sp, #4]
   b4bb0:	bd08      	pop	{r3, pc}
   b4bb2:	0000      	.short	0x0000
   b4bb4:	00030220 	.word	0x00030220

000b4bb8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <network_connect+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	685b      	ldr	r3, [r3, #4]
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	00030240 	.word	0x00030240

000b4bc8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <network_connecting+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	689b      	ldr	r3, [r3, #8]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	00030240 	.word	0x00030240

000b4bd8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <network_disconnect+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	68db      	ldr	r3, [r3, #12]
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	00030240 	.word	0x00030240

000b4be8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <network_ready+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	691b      	ldr	r3, [r3, #16]
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	00030240 	.word	0x00030240

000b4bf8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <network_on+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	695b      	ldr	r3, [r3, #20]
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	00030240 	.word	0x00030240

000b4c08 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <network_off+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	699b      	ldr	r3, [r3, #24]
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	00030240 	.word	0x00030240

000b4c18 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <network_listen+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	69db      	ldr	r3, [r3, #28]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030240 	.word	0x00030240

000b4c28 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <network_listening+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	6a1b      	ldr	r3, [r3, #32]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	00030240 	.word	0x00030240

000b4c38 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <network_set_listen_timeout+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030240 	.word	0x00030240

000b4c48 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <network_get_listen_timeout+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030240 	.word	0x00030240

000b4c58 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <network_is_on+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030240 	.word	0x00030240

000b4c68 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <network_is_off+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030240 	.word	0x00030240

000b4c78 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <spark_function+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	685b      	ldr	r3, [r3, #4]
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030244 	.word	0x00030244

000b4c88 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <spark_cloud_flag_connected+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	695b      	ldr	r3, [r3, #20]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030244 	.word	0x00030244

000b4c98 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <spark_send_event+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	6a1b      	ldr	r3, [r3, #32]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030244 	.word	0x00030244

000b4ca8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030244 	.word	0x00030244

000b4cb8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <malloc+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	681b      	ldr	r3, [r3, #0]
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	0003021c 	.word	0x0003021c

000b4cc8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <free+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	685b      	ldr	r3, [r3, #4]
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	0003021c 	.word	0x0003021c

000b4cd8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <realloc+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	689b      	ldr	r3, [r3, #8]
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	0003021c 	.word	0x0003021c

000b4ce8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <abort+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	0003021c 	.word	0x0003021c

000b4cf8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <_malloc_r+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	0003021c 	.word	0x0003021c

000b4d08 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <__errno+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	0003021c 	.word	0x0003021c

000b4d18 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <__assert_func+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	0003021c 	.word	0x0003021c

000b4d28 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <newlib_impure_ptr_callback+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	0003021c 	.word	0x0003021c

000b4d38 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d38:	2200      	movs	r2, #0
   b4d3a:	6840      	ldr	r0, [r0, #4]
   b4d3c:	4611      	mov	r1, r2
   b4d3e:	f7ff bf73 	b.w	b4c28 <network_listening>

000b4d42 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d42:	2200      	movs	r2, #0
   b4d44:	6840      	ldr	r0, [r0, #4]
   b4d46:	4611      	mov	r1, r2
   b4d48:	f7ff bf7e 	b.w	b4c48 <network_get_listen_timeout>

000b4d4c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d4c:	6840      	ldr	r0, [r0, #4]
   b4d4e:	2200      	movs	r2, #0
   b4d50:	f7ff bf72 	b.w	b4c38 <network_set_listen_timeout>

000b4d54 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d54:	6840      	ldr	r0, [r0, #4]
   b4d56:	2200      	movs	r2, #0
   b4d58:	f081 0101 	eor.w	r1, r1, #1
   b4d5c:	f7ff bf5c 	b.w	b4c18 <network_listen>

000b4d60 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d60:	2300      	movs	r3, #0
   b4d62:	6840      	ldr	r0, [r0, #4]
   b4d64:	461a      	mov	r2, r3
   b4d66:	4619      	mov	r1, r3
   b4d68:	f7ff bf4e 	b.w	b4c08 <network_off>

000b4d6c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d6c:	2300      	movs	r3, #0
   b4d6e:	6840      	ldr	r0, [r0, #4]
   b4d70:	461a      	mov	r2, r3
   b4d72:	4619      	mov	r1, r3
   b4d74:	f7ff bf40 	b.w	b4bf8 <network_on>

000b4d78 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4d78:	2200      	movs	r2, #0
   b4d7a:	6840      	ldr	r0, [r0, #4]
   b4d7c:	4611      	mov	r1, r2
   b4d7e:	f7ff bf33 	b.w	b4be8 <network_ready>

000b4d82 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4d82:	2200      	movs	r2, #0
   b4d84:	6840      	ldr	r0, [r0, #4]
   b4d86:	4611      	mov	r1, r2
   b4d88:	f7ff bf1e 	b.w	b4bc8 <network_connecting>

000b4d8c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4d8c:	6840      	ldr	r0, [r0, #4]
   b4d8e:	2200      	movs	r2, #0
   b4d90:	2102      	movs	r1, #2
   b4d92:	f7ff bf21 	b.w	b4bd8 <network_disconnect>

000b4d96 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4d96:	2300      	movs	r3, #0
   b4d98:	6840      	ldr	r0, [r0, #4]
   b4d9a:	461a      	mov	r2, r3
   b4d9c:	f7ff bf0c 	b.w	b4bb8 <network_connect>

000b4da0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4da0:	4b02      	ldr	r3, [pc, #8]	; (b4dac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4da2:	2203      	movs	r2, #3
   b4da4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4da6:	4a02      	ldr	r2, [pc, #8]	; (b4db0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4da8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4daa:	4770      	bx	lr
   b4dac:	2003e714 	.word	0x2003e714
   b4db0:	000b8118 	.word	0x000b8118

000b4db4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4db4:	b510      	push	{r4, lr}
   b4db6:	4604      	mov	r4, r0
   b4db8:	4608      	mov	r0, r1
{
    _spi = spi;
   b4dba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4dbc:	f7ff fe78 	bl	b4ab0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4dc0:	2300      	movs	r3, #0
   b4dc2:	6063      	str	r3, [r4, #4]
}
   b4dc4:	4620      	mov	r0, r4
   b4dc6:	bd10      	pop	{r4, pc}

000b4dc8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b4dc8:	b510      	push	{r4, lr}
   b4dca:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b4dcc:	6800      	ldr	r0, [r0, #0]
   b4dce:	b118      	cbz	r0, b4dd8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b4dd0:	f7ff ff7a 	bl	b4cc8 <free>
            wakeupSource_ = nullptr;
   b4dd4:	2300      	movs	r3, #0
   b4dd6:	6023      	str	r3, [r4, #0]
        }
    }
   b4dd8:	bd10      	pop	{r4, pc}

000b4dda <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b4dda:	b510      	push	{r4, lr}
   b4ddc:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   b4dde:	f7ff fff3 	bl	b4dc8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
class SystemClass {
   b4de2:	4620      	mov	r0, r4
   b4de4:	bd10      	pop	{r4, pc}
	...

000b4de8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b4de8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4dea:	4b09      	ldr	r3, [pc, #36]	; (b4e10 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   b4dec:	4c09      	ldr	r4, [pc, #36]	; (b4e14 <_GLOBAL__sub_I_System+0x2c>)
   b4dee:	2202      	movs	r2, #2
   b4df0:	601a      	str	r2, [r3, #0]
   b4df2:	2000      	movs	r0, #0
    SleepResult() {}
   b4df4:	4b08      	ldr	r3, [pc, #32]	; (b4e18 <_GLOBAL__sub_I_System+0x30>)
   b4df6:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4df8:	e9c4 0000 	strd	r0, r0, [r4]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4dfc:	f7ff fea0 	bl	b4b40 <set_system_mode>
SystemClass System;
   b4e00:	4620      	mov	r0, r4
   b4e02:	4a06      	ldr	r2, [pc, #24]	; (b4e1c <_GLOBAL__sub_I_System+0x34>)
   b4e04:	4906      	ldr	r1, [pc, #24]	; (b4e20 <_GLOBAL__sub_I_System+0x38>)
   b4e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b4e0a:	f001 b95d 	b.w	b60c8 <__aeabi_atexit>
   b4e0e:	bf00      	nop
   b4e10:	2003e728 	.word	0x2003e728
   b4e14:	2003e71c 	.word	0x2003e71c
   b4e18:	ffff0000 	.word	0xffff0000
   b4e1c:	2003e69c 	.word	0x2003e69c
   b4e20:	000b4ddb 	.word	0x000b4ddb

000b4e24 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b4e24:	b510      	push	{r4, lr}
   b4e26:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b4e28:	f003 f8d5 	bl	b7fd6 <strlen>
   b4e2c:	3801      	subs	r0, #1
   b4e2e:	1823      	adds	r3, r4, r0
   b4e30:	4620      	mov	r0, r4
	while(i<j){
   b4e32:	4283      	cmp	r3, r0
   b4e34:	d906      	bls.n	b4e44 <_Z11str_reversePc+0x20>
		c = *i;
   b4e36:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b4e38:	7819      	ldrb	r1, [r3, #0]
   b4e3a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b4e3e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b4e42:	e7f6      	b.n	b4e32 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b4e44:	bd10      	pop	{r4, pc}

000b4e46 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b4e46:	b570      	push	{r4, r5, r6, lr}
   b4e48:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b4e4a:	1e91      	subs	r1, r2, #2
   b4e4c:	2922      	cmp	r1, #34	; 0x22
   b4e4e:	d81d      	bhi.n	b4e8c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b4e50:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b4e52:	b930      	cbnz	r0, b4e62 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b4e54:	4423      	add	r3, r4
            *ptr++ = '0';
   b4e56:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b4e58:	429d      	cmp	r5, r3
   b4e5a:	d210      	bcs.n	b4e7e <ultoa+0x38>
            *ptr++ = '0';
   b4e5c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b4e60:	e7fa      	b.n	b4e58 <ultoa+0x12>
            result.quot = a/radix;
   b4e62:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b4e66:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b4e6a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b4e6c:	2809      	cmp	r0, #9
                *ptr += '0';
   b4e6e:	bf94      	ite	ls
   b4e70:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b4e72:	3157      	addhi	r1, #87	; 0x57
   b4e74:	b2c9      	uxtb	r1, r1
   b4e76:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b4e7a:	4630      	mov	r0, r6
	while(a){
   b4e7c:	e7e9      	b.n	b4e52 <ultoa+0xc>

	*ptr = '\0';
   b4e7e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b4e80:	4620      	mov	r0, r4
	*ptr = '\0';
   b4e82:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b4e84:	f7ff ffce 	bl	b4e24 <_Z11str_reversePc>
	return buffer;
   b4e88:	4620      	mov	r0, r4
}
   b4e8a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b4e8c:	2000      	movs	r0, #0
   b4e8e:	e7fc      	b.n	b4e8a <ultoa+0x44>

000b4e90 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b4e90:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e94:	ec57 6b10 	vmov	r6, r7, d0
   b4e98:	4680      	mov	r8, r0
   b4e9a:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b4e9c:	ee10 0a10 	vmov	r0, s0
   b4ea0:	2200      	movs	r2, #0
   b4ea2:	2300      	movs	r3, #0
   b4ea4:	4639      	mov	r1, r7
   b4ea6:	f002 fdcf 	bl	b7a48 <__aeabi_dcmplt>
   b4eaa:	b128      	cbz	r0, b4eb8 <_Z4dtoadhPc+0x28>
        val = -val;
   b4eac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b4eb0:	461f      	mov	r7, r3
        *sout++ = '-';
   b4eb2:	232d      	movs	r3, #45	; 0x2d
   b4eb4:	f804 3b01 	strb.w	r3, [r4], #1
   b4eb8:	2300      	movs	r3, #0
    }
    long scale = 1;
   b4eba:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b4ebe:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b4ec0:	b2d9      	uxtb	r1, r3
   b4ec2:	4588      	cmp	r8, r1
   b4ec4:	d903      	bls.n	b4ece <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b4ec6:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b4eca:	3301      	adds	r3, #1
   b4ecc:	e7f8      	b.n	b4ec0 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b4ece:	4648      	mov	r0, r9
   b4ed0:	f002 fade 	bl	b7490 <__aeabi_i2d>
   b4ed4:	4632      	mov	r2, r6
   b4ed6:	463b      	mov	r3, r7
   b4ed8:	f002 fb44 	bl	b7564 <__aeabi_dmul>
   b4edc:	4606      	mov	r6, r0
   b4ede:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b4ee0:	f002 fe78 	bl	b7bd4 <__aeabi_d2ulz>
   b4ee4:	468a      	mov	sl, r1
   b4ee6:	4605      	mov	r5, r0
   b4ee8:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b4eea:	f002 fb05 	bl	b74f8 <__aeabi_ul2d>
   b4eee:	4602      	mov	r2, r0
   b4ef0:	460b      	mov	r3, r1
   b4ef2:	4630      	mov	r0, r6
   b4ef4:	4639      	mov	r1, r7
   b4ef6:	f002 f97d 	bl	b71f4 <__aeabi_dsub>
   b4efa:	4b14      	ldr	r3, [pc, #80]	; (b4f4c <_Z4dtoadhPc+0xbc>)
   b4efc:	2200      	movs	r2, #0
   b4efe:	f002 fdb7 	bl	b7a70 <__aeabi_dcmpge>
   b4f02:	b110      	cbz	r0, b4f0a <_Z4dtoadhPc+0x7a>
        fixed++;
   b4f04:	3501      	adds	r5, #1
   b4f06:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b4f0a:	464a      	mov	r2, r9
   b4f0c:	4628      	mov	r0, r5
   b4f0e:	17d3      	asrs	r3, r2, #31
   b4f10:	4659      	mov	r1, fp
   b4f12:	f002 fe47 	bl	b7ba4 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b4f16:	2301      	movs	r3, #1
   b4f18:	4615      	mov	r5, r2
   b4f1a:	4621      	mov	r1, r4
   b4f1c:	220a      	movs	r2, #10
   b4f1e:	f7ff ff92 	bl	b4e46 <ultoa>
    if (prec) {
   b4f22:	f1b8 0f00 	cmp.w	r8, #0
   b4f26:	d00e      	beq.n	b4f46 <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b4f28:	4620      	mov	r0, r4
   b4f2a:	f003 f854 	bl	b7fd6 <strlen>
        *sout++ = '.';
   b4f2e:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b4f30:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b4f32:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b4f34:	220a      	movs	r2, #10
   b4f36:	4643      	mov	r3, r8
   b4f38:	3101      	adds	r1, #1
   b4f3a:	4628      	mov	r0, r5
    }
}
   b4f3c:	b001      	add	sp, #4
   b4f3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b4f42:	f7ff bf80 	b.w	b4e46 <ultoa>
}
   b4f46:	b001      	add	sp, #4
   b4f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f4c:	3fe00000 	.word	0x3fe00000

000b4f50 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4f50:	b510      	push	{r4, lr}
   b4f52:	4604      	mov	r4, r0
{
	free(buffer);
   b4f54:	6800      	ldr	r0, [r0, #0]
   b4f56:	f7ff feb7 	bl	b4cc8 <free>
}
   b4f5a:	4620      	mov	r0, r4
   b4f5c:	bd10      	pop	{r4, pc}

000b4f5e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4f5e:	b510      	push	{r4, lr}
   b4f60:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4f62:	6800      	ldr	r0, [r0, #0]
   b4f64:	b108      	cbz	r0, b4f6a <_ZN6String10invalidateEv+0xc>
   b4f66:	f7ff feaf 	bl	b4cc8 <free>
	buffer = NULL;
   b4f6a:	2300      	movs	r3, #0
	capacity = len = 0;
   b4f6c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4f70:	6023      	str	r3, [r4, #0]
}
   b4f72:	bd10      	pop	{r4, pc}

000b4f74 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4f74:	b538      	push	{r3, r4, r5, lr}
   b4f76:	4604      	mov	r4, r0
   b4f78:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4f7a:	6800      	ldr	r0, [r0, #0]
   b4f7c:	3101      	adds	r1, #1
   b4f7e:	f7ff feab 	bl	b4cd8 <realloc>
	if (newbuffer) {
   b4f82:	b110      	cbz	r0, b4f8a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4f84:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4f88:	2001      	movs	r0, #1
	}
	return 0;
}
   b4f8a:	bd38      	pop	{r3, r4, r5, pc}

000b4f8c <_ZN6String7reserveEj>:
{
   b4f8c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4f8e:	6803      	ldr	r3, [r0, #0]
{
   b4f90:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4f92:	b123      	cbz	r3, b4f9e <_ZN6String7reserveEj+0x12>
   b4f94:	6843      	ldr	r3, [r0, #4]
   b4f96:	428b      	cmp	r3, r1
   b4f98:	d301      	bcc.n	b4f9e <_ZN6String7reserveEj+0x12>
   b4f9a:	2001      	movs	r0, #1
}
   b4f9c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	f7ff ffe8 	bl	b4f74 <_ZN6String12changeBufferEj>
   b4fa4:	2800      	cmp	r0, #0
   b4fa6:	d0f9      	beq.n	b4f9c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4fa8:	68a3      	ldr	r3, [r4, #8]
   b4faa:	2b00      	cmp	r3, #0
   b4fac:	d1f5      	bne.n	b4f9a <_ZN6String7reserveEj+0xe>
   b4fae:	6822      	ldr	r2, [r4, #0]
   b4fb0:	7013      	strb	r3, [r2, #0]
   b4fb2:	e7f2      	b.n	b4f9a <_ZN6String7reserveEj+0xe>

000b4fb4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4fb6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4fb8:	4611      	mov	r1, r2
   b4fba:	9201      	str	r2, [sp, #4]
{
   b4fbc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4fbe:	f7ff ffe5 	bl	b4f8c <_ZN6String7reserveEj>
   b4fc2:	9a01      	ldr	r2, [sp, #4]
   b4fc4:	b928      	cbnz	r0, b4fd2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4fc6:	4620      	mov	r0, r4
   b4fc8:	f7ff ffc9 	bl	b4f5e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4fcc:	4620      	mov	r0, r4
   b4fce:	b003      	add	sp, #12
   b4fd0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4fd2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4fd4:	4629      	mov	r1, r5
   b4fd6:	6820      	ldr	r0, [r4, #0]
   b4fd8:	f002 ff92 	bl	b7f00 <memcpy>
	buffer[len] = 0;
   b4fdc:	6822      	ldr	r2, [r4, #0]
   b4fde:	68a3      	ldr	r3, [r4, #8]
   b4fe0:	2100      	movs	r1, #0
   b4fe2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4fe4:	e7f2      	b.n	b4fcc <_ZN6String4copyEPKcj+0x18>

000b4fe6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4fe6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4fe8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4fea:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4fee:	4604      	mov	r4, r0
	len = 0;
   b4ff0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4ff2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4ff4:	b141      	cbz	r1, b5008 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4ff6:	4608      	mov	r0, r1
   b4ff8:	9101      	str	r1, [sp, #4]
   b4ffa:	f002 ffec 	bl	b7fd6 <strlen>
   b4ffe:	9901      	ldr	r1, [sp, #4]
   b5000:	4602      	mov	r2, r0
   b5002:	4620      	mov	r0, r4
   b5004:	f7ff ffd6 	bl	b4fb4 <_ZN6String4copyEPKcj>
}
   b5008:	4620      	mov	r0, r4
   b500a:	b002      	add	sp, #8
   b500c:	bd10      	pop	{r4, pc}

000b500e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b500e:	4288      	cmp	r0, r1
{
   b5010:	b510      	push	{r4, lr}
   b5012:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5014:	d005      	beq.n	b5022 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5016:	680b      	ldr	r3, [r1, #0]
   b5018:	b12b      	cbz	r3, b5026 <_ZN6StringaSERKS_+0x18>
   b501a:	688a      	ldr	r2, [r1, #8]
   b501c:	4619      	mov	r1, r3
   b501e:	f7ff ffc9 	bl	b4fb4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5022:	4620      	mov	r0, r4
   b5024:	bd10      	pop	{r4, pc}
	else invalidate();
   b5026:	f7ff ff9a 	bl	b4f5e <_ZN6String10invalidateEv>
   b502a:	e7fa      	b.n	b5022 <_ZN6StringaSERKS_+0x14>

000b502c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b502c:	b510      	push	{r4, lr}
	buffer = NULL;
   b502e:	2300      	movs	r3, #0
String::String(const String &value)
   b5030:	4604      	mov	r4, r0
	capacity = 0;
   b5032:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5036:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5038:	7303      	strb	r3, [r0, #12]
	*this = value;
   b503a:	f7ff ffe8 	bl	b500e <_ZN6StringaSERKS_>
}
   b503e:	4620      	mov	r0, r4
   b5040:	bd10      	pop	{r4, pc}

000b5042 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5042:	b513      	push	{r0, r1, r4, lr}
   b5044:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5046:	b159      	cbz	r1, b5060 <_ZN6StringaSEPKc+0x1e>
   b5048:	4608      	mov	r0, r1
   b504a:	9101      	str	r1, [sp, #4]
   b504c:	f002 ffc3 	bl	b7fd6 <strlen>
   b5050:	9901      	ldr	r1, [sp, #4]
   b5052:	4602      	mov	r2, r0
   b5054:	4620      	mov	r0, r4
   b5056:	f7ff ffad 	bl	b4fb4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b505a:	4620      	mov	r0, r4
   b505c:	b002      	add	sp, #8
   b505e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5060:	f7ff ff7d 	bl	b4f5e <_ZN6String10invalidateEv>
   b5064:	e7f9      	b.n	b505a <_ZN6StringaSEPKc+0x18>

000b5066 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b5066:	b530      	push	{r4, r5, lr}
   b5068:	4604      	mov	r4, r0
	buffer = NULL;
   b506a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   b506c:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   b506e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5072:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5074:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   b5076:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   b507a:	b2cd      	uxtb	r5, r1
   b507c:	f002 fa1a 	bl	b74b4 <__aeabi_f2d>
   b5080:	ec41 0b10 	vmov	d0, r0, r1
   b5084:	a901      	add	r1, sp, #4
   b5086:	4628      	mov	r0, r5
   b5088:	f7ff ff02 	bl	b4e90 <_Z4dtoadhPc>
        *this = buf;
   b508c:	a901      	add	r1, sp, #4
   b508e:	4620      	mov	r0, r4
   b5090:	f7ff ffd7 	bl	b5042 <_ZN6StringaSEPKc>
}
   b5094:	4620      	mov	r0, r4
   b5096:	b00b      	add	sp, #44	; 0x2c
   b5098:	bd30      	pop	{r4, r5, pc}

000b509a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b509a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b509c:	6882      	ldr	r2, [r0, #8]
   b509e:	b93a      	cbnz	r2, b50b0 <_ZNK6String6equalsEPKc+0x16>
   b50a0:	b121      	cbz	r1, b50ac <_ZNK6String6equalsEPKc+0x12>
   b50a2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b50a4:	fab0 f080 	clz	r0, r0
   b50a8:	0940      	lsrs	r0, r0, #5
   b50aa:	e000      	b.n	b50ae <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b50ac:	2001      	movs	r0, #1
}
   b50ae:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b50b0:	6800      	ldr	r0, [r0, #0]
   b50b2:	b909      	cbnz	r1, b50b8 <_ZNK6String6equalsEPKc+0x1e>
   b50b4:	7800      	ldrb	r0, [r0, #0]
   b50b6:	e7f5      	b.n	b50a4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b50b8:	f002 ff66 	bl	b7f88 <strcmp>
   b50bc:	e7f2      	b.n	b50a4 <_ZNK6String6equalsEPKc+0xa>

000b50be <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b50be:	b510      	push	{r4, lr}
   b50c0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b50c2:	6800      	ldr	r0, [r0, #0]
   b50c4:	b108      	cbz	r0, b50ca <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b50c6:	f7ff fc43 	bl	b4950 <os_mutex_recursive_destroy>
    }
   b50ca:	4620      	mov	r0, r4
   b50cc:	bd10      	pop	{r4, pc}

000b50ce <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b50ce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b50d0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b50d2:	4604      	mov	r4, r0
      if (_M_manager)
   b50d4:	b113      	cbz	r3, b50dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b50d6:	2203      	movs	r2, #3
   b50d8:	4601      	mov	r1, r0
   b50da:	4798      	blx	r3
    }
   b50dc:	4620      	mov	r0, r4
   b50de:	bd10      	pop	{r4, pc}

000b50e0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b50e0:	b513      	push	{r0, r1, r4, lr}
   b50e2:	460b      	mov	r3, r1
   b50e4:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b50e6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b50ea:	466c      	mov	r4, sp
   b50ec:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b50f0:	e893 0003 	ldmia.w	r3, {r0, r1}
   b50f4:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b50f8:	e894 0003 	ldmia.w	r4, {r0, r1}
   b50fc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5100:	b002      	add	sp, #8
   b5102:	bd10      	pop	{r4, pc}

000b5104 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b5104:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b5106:	4c06      	ldr	r4, [pc, #24]	; (b5120 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b5108:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b510a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b510c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b510e:	f7ff fc17 	bl	b4940 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b5112:	4620      	mov	r0, r4
   b5114:	4a03      	ldr	r2, [pc, #12]	; (b5124 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b5116:	4904      	ldr	r1, [pc, #16]	; (b5128 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b5118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b511c:	f000 bfd4 	b.w	b60c8 <__aeabi_atexit>
   b5120:	2003e72c 	.word	0x2003e72c
   b5124:	2003e69c 	.word	0x2003e69c
   b5128:	000b50bf 	.word	0x000b50bf

000b512c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b512c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b512e:	4606      	mov	r6, r0
   b5130:	460d      	mov	r5, r1
  size_t n = 0;
   b5132:	188f      	adds	r7, r1, r2
   b5134:	2400      	movs	r4, #0
  while (size--) {
   b5136:	42bd      	cmp	r5, r7
   b5138:	d00c      	beq.n	b5154 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b513a:	6833      	ldr	r3, [r6, #0]
   b513c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5140:	689b      	ldr	r3, [r3, #8]
   b5142:	4630      	mov	r0, r6
   b5144:	4798      	blx	r3
     if (chunk>=0)
   b5146:	1e03      	subs	r3, r0, #0
   b5148:	db01      	blt.n	b514e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b514a:	441c      	add	r4, r3
  while (size--) {
   b514c:	e7f3      	b.n	b5136 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b514e:	2c00      	cmp	r4, #0
   b5150:	bf08      	it	eq
   b5152:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5154:	4620      	mov	r0, r4
   b5156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5158 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5158:	b513      	push	{r0, r1, r4, lr}
   b515a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b515c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b515e:	b159      	cbz	r1, b5178 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5160:	9101      	str	r1, [sp, #4]
   b5162:	f002 ff38 	bl	b7fd6 <strlen>
   b5166:	6823      	ldr	r3, [r4, #0]
   b5168:	9901      	ldr	r1, [sp, #4]
   b516a:	68db      	ldr	r3, [r3, #12]
   b516c:	4602      	mov	r2, r0
   b516e:	4620      	mov	r0, r4
    }
   b5170:	b002      	add	sp, #8
   b5172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5176:	4718      	bx	r3
    }
   b5178:	b002      	add	sp, #8
   b517a:	bd10      	pop	{r4, pc}

000b517c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b517c:	b508      	push	{r3, lr}
  return write(str);
   b517e:	f7ff ffeb 	bl	b5158 <_ZN5Print5writeEPKc>
}
   b5182:	bd08      	pop	{r3, pc}

000b5184 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5184:	6803      	ldr	r3, [r0, #0]
   b5186:	689b      	ldr	r3, [r3, #8]
   b5188:	4718      	bx	r3

000b518a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b518a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b518c:	210d      	movs	r1, #13
{
   b518e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5190:	f7ff fff8 	bl	b5184 <_ZN5Print5printEc>
  n += print('\n');
   b5194:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5196:	4604      	mov	r4, r0
  n += print('\n');
   b5198:	4628      	mov	r0, r5
   b519a:	f7ff fff3 	bl	b5184 <_ZN5Print5printEc>
  return n;
}
   b519e:	4420      	add	r0, r4
   b51a0:	bd38      	pop	{r3, r4, r5, pc}

000b51a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b51a2:	b538      	push	{r3, r4, r5, lr}
   b51a4:	4605      	mov	r5, r0
  return write(str);
   b51a6:	f7ff ffd7 	bl	b5158 <_ZN5Print5writeEPKc>
   b51aa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b51ac:	4628      	mov	r0, r5
   b51ae:	f7ff ffec 	bl	b518a <_ZN5Print7printlnEv>
  return n;
}
   b51b2:	4420      	add	r0, r4
   b51b4:	bd38      	pop	{r3, r4, r5, pc}

000b51b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b51b6:	b530      	push	{r4, r5, lr}
   b51b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b51ba:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b51bc:	2a01      	cmp	r2, #1
  *str = '\0';
   b51be:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b51c2:	bf98      	it	ls
   b51c4:	220a      	movls	r2, #10
   b51c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b51c8:	460d      	mov	r5, r1
   b51ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b51ce:	fb01 5312 	mls	r3, r1, r2, r5
   b51d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51d6:	2b09      	cmp	r3, #9
   b51d8:	bf94      	ite	ls
   b51da:	3330      	addls	r3, #48	; 0x30
   b51dc:	3337      	addhi	r3, #55	; 0x37
   b51de:	b2db      	uxtb	r3, r3
  } while(n);
   b51e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b51e6:	d9ef      	bls.n	b51c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b51e8:	4621      	mov	r1, r4
   b51ea:	f7ff ffb5 	bl	b5158 <_ZN5Print5writeEPKc>
}
   b51ee:	b00b      	add	sp, #44	; 0x2c
   b51f0:	bd30      	pop	{r4, r5, pc}
	...

000b51f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b51f4:	4b01      	ldr	r3, [pc, #4]	; (b51fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b51f6:	4a02      	ldr	r2, [pc, #8]	; (b5200 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b51f8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b51fa:	4770      	bx	lr
   b51fc:	2003e730 	.word	0x2003e730
   b5200:	000b814c 	.word	0x000b814c

000b5204 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5204:	4b02      	ldr	r3, [pc, #8]	; (b5210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5206:	681a      	ldr	r2, [r3, #0]
   b5208:	4b02      	ldr	r3, [pc, #8]	; (b5214 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b520a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b520c:	4770      	bx	lr
   b520e:	bf00      	nop
   b5210:	2003e630 	.word	0x2003e630
   b5214:	2003e734 	.word	0x2003e734

000b5218 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5218:	2100      	movs	r1, #0
   b521a:	f7ff bc99 	b.w	b4b50 <system_delay_ms>

000b521e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b521e:	b510      	push	{r4, lr}
   b5220:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5222:	f7ff ff54 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
   b5226:	4620      	mov	r0, r4
   b5228:	bd10      	pop	{r4, pc}
	...

000b522c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b522c:	4803      	ldr	r0, [pc, #12]	; (b523c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b522e:	4a04      	ldr	r2, [pc, #16]	; (b5240 <_GLOBAL__sub_I_RGB+0x14>)
   b5230:	4904      	ldr	r1, [pc, #16]	; (b5244 <_GLOBAL__sub_I_RGB+0x18>)
   b5232:	2300      	movs	r3, #0
   b5234:	6083      	str	r3, [r0, #8]
   b5236:	f000 bf47 	b.w	b60c8 <__aeabi_atexit>
   b523a:	bf00      	nop
   b523c:	2003e738 	.word	0x2003e738
   b5240:	2003e69c 	.word	0x2003e69c
   b5244:	000b521f 	.word	0x000b521f

000b5248 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5248:	4b01      	ldr	r3, [pc, #4]	; (b5250 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b524a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b524c:	4770      	bx	lr
   b524e:	bf00      	nop
   b5250:	2003e638 	.word	0x2003e638

000b5254 <serialEventRun>:
{
   b5254:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5256:	4b0b      	ldr	r3, [pc, #44]	; (b5284 <serialEventRun+0x30>)
   b5258:	b143      	cbz	r3, b526c <serialEventRun+0x18>
   b525a:	f000 fc25 	bl	b5aa8 <_Z16_fetch_usbserialv>
   b525e:	6803      	ldr	r3, [r0, #0]
   b5260:	691b      	ldr	r3, [r3, #16]
   b5262:	4798      	blx	r3
   b5264:	2800      	cmp	r0, #0
   b5266:	dd01      	ble.n	b526c <serialEventRun+0x18>
        serialEvent();
   b5268:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b526c:	4b06      	ldr	r3, [pc, #24]	; (b5288 <serialEventRun+0x34>)
   b526e:	b143      	cbz	r3, b5282 <serialEventRun+0x2e>
   b5270:	f000 fcec 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b5274:	6803      	ldr	r3, [r0, #0]
   b5276:	691b      	ldr	r3, [r3, #16]
   b5278:	4798      	blx	r3
   b527a:	2800      	cmp	r0, #0
   b527c:	dd01      	ble.n	b5282 <serialEventRun+0x2e>
        serialEvent1();
   b527e:	f3af 8000 	nop.w
}
   b5282:	bd08      	pop	{r3, pc}
	...

000b528c <_post_loop>:
{
   b528c:	b508      	push	{r3, lr}
	serialEventRun();
   b528e:	f7ff ffe1 	bl	b5254 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5292:	f7ff fb35 	bl	b4900 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5296:	4b01      	ldr	r3, [pc, #4]	; (b529c <_post_loop+0x10>)
   b5298:	6018      	str	r0, [r3, #0]
}
   b529a:	bd08      	pop	{r3, pc}
   b529c:	2003e7cc 	.word	0x2003e7cc

000b52a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b52a0:	4805      	ldr	r0, [pc, #20]	; (b52b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b52a2:	4a06      	ldr	r2, [pc, #24]	; (b52bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b52a4:	4906      	ldr	r1, [pc, #24]	; (b52c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b52a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b52a8:	1a12      	subs	r2, r2, r0
   b52aa:	f002 fe29 	bl	b7f00 <memcpy>
    __backup_sram_signature = signature;
   b52ae:	4b05      	ldr	r3, [pc, #20]	; (b52c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b52b0:	4a05      	ldr	r2, [pc, #20]	; (b52c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b52b2:	601a      	str	r2, [r3, #0]
}
   b52b4:	bd08      	pop	{r3, pc}
   b52b6:	bf00      	nop
   b52b8:	2003f400 	.word	0x2003f400
   b52bc:	2003f404 	.word	0x2003f404
   b52c0:	000b8378 	.word	0x000b8378
   b52c4:	2003f400 	.word	0x2003f400
   b52c8:	9a271c1e 	.word	0x9a271c1e

000b52cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b52cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b52ce:	2300      	movs	r3, #0
   b52d0:	9300      	str	r3, [sp, #0]
   b52d2:	461a      	mov	r2, r3
   b52d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b52d8:	f7ff fc64 	bl	b4ba4 <system_ctrl_set_result>
}
   b52dc:	b003      	add	sp, #12
   b52de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b52e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b52e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b52e6:	8843      	ldrh	r3, [r0, #2]
   b52e8:	2b0a      	cmp	r3, #10
   b52ea:	d008      	beq.n	b52fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b52ec:	2b50      	cmp	r3, #80	; 0x50
   b52ee:	d10b      	bne.n	b5308 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b52f0:	4b09      	ldr	r3, [pc, #36]	; (b5318 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b52f2:	681b      	ldr	r3, [r3, #0]
   b52f4:	b14b      	cbz	r3, b530a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b52f6:	b003      	add	sp, #12
   b52f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b52fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b52fe:	f7ff ffe5 	bl	b52cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5302:	b003      	add	sp, #12
   b5304:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5308:	2300      	movs	r3, #0
   b530a:	9300      	str	r3, [sp, #0]
   b530c:	461a      	mov	r2, r3
   b530e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5312:	f7ff fc47 	bl	b4ba4 <system_ctrl_set_result>
}
   b5316:	e7f4      	b.n	b5302 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5318:	2003e74c 	.word	0x2003e74c

000b531c <module_user_init_hook>:
{
   b531c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b531e:	4812      	ldr	r0, [pc, #72]	; (b5368 <module_user_init_hook+0x4c>)
   b5320:	2100      	movs	r1, #0
   b5322:	f7ff fd01 	bl	b4d28 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5326:	4b11      	ldr	r3, [pc, #68]	; (b536c <module_user_init_hook+0x50>)
   b5328:	681a      	ldr	r2, [r3, #0]
   b532a:	4b11      	ldr	r3, [pc, #68]	; (b5370 <module_user_init_hook+0x54>)
   b532c:	429a      	cmp	r2, r3
   b532e:	4b11      	ldr	r3, [pc, #68]	; (b5374 <module_user_init_hook+0x58>)
   b5330:	bf0c      	ite	eq
   b5332:	2201      	moveq	r2, #1
   b5334:	2200      	movne	r2, #0
   b5336:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5338:	d001      	beq.n	b533e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b533a:	f7ff ffb1 	bl	b52a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b533e:	f7ff fad7 	bl	b48f0 <HAL_RNG_GetRandomNumber>
   b5342:	4604      	mov	r4, r0
    srand(seed);
   b5344:	f002 fdf2 	bl	b7f2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5348:	4b0b      	ldr	r3, [pc, #44]	; (b5378 <module_user_init_hook+0x5c>)
   b534a:	b113      	cbz	r3, b5352 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b534c:	4620      	mov	r0, r4
   b534e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5352:	2100      	movs	r1, #0
   b5354:	4808      	ldr	r0, [pc, #32]	; (b5378 <module_user_init_hook+0x5c>)
   b5356:	f7ff fca7 	bl	b4ca8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b535a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b535e:	4807      	ldr	r0, [pc, #28]	; (b537c <module_user_init_hook+0x60>)
   b5360:	2100      	movs	r1, #0
   b5362:	f7ff bc15 	b.w	b4b90 <system_ctrl_set_app_request_handler>
   b5366:	bf00      	nop
   b5368:	000b5249 	.word	0x000b5249
   b536c:	2003f400 	.word	0x2003f400
   b5370:	9a271c1e 	.word	0x9a271c1e
   b5374:	2003e748 	.word	0x2003e748
   b5378:	00000000 	.word	0x00000000
   b537c:	000b52e5 	.word	0x000b52e5

000b5380 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5380:	4770      	bx	lr

000b5382 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5382:	2000      	movs	r0, #0
   b5384:	4770      	bx	lr

000b5386 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5386:	b510      	push	{r4, lr}
   b5388:	2110      	movs	r1, #16
   b538a:	4604      	mov	r4, r0
   b538c:	f000 fea1 	bl	b60d2 <_ZdlPvj>
   b5390:	4620      	mov	r0, r4
   b5392:	bd10      	pop	{r4, pc}

000b5394 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5394:	b508      	push	{r3, lr}
      { delete this; }
   b5396:	f7ff fff6 	bl	b5386 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b539a:	bd08      	pop	{r3, pc}

000b539c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b539c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b539e:	2200      	movs	r2, #0
   b53a0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b53a4:	6002      	str	r2, [r0, #0]
   b53a6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b53a8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b53aa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b53ac:	680c      	ldr	r4, [r1, #0]
   b53ae:	8085      	strh	r5, [r0, #4]
   b53b0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b53b2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b53b4:	bd30      	pop	{r4, r5, pc}

000b53b6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b53b6:	b510      	push	{r4, lr}
   b53b8:	4604      	mov	r4, r0
    free((void*)msg_);
   b53ba:	6800      	ldr	r0, [r0, #0]
   b53bc:	f7ff fc84 	bl	b4cc8 <free>
}
   b53c0:	4620      	mov	r0, r4
   b53c2:	bd10      	pop	{r4, pc}

000b53c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b53c4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b53c6:	68c4      	ldr	r4, [r0, #12]
   b53c8:	b1f4      	cbz	r4, b5408 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b53ca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b53cc:	2b02      	cmp	r3, #2
   b53ce:	d103      	bne.n	b53d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b53d0:	f104 000c 	add.w	r0, r4, #12
   b53d4:	f7ff ffef 	bl	b53b6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b53d8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b53da:	b135      	cbz	r5, b53ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b53dc:	4628      	mov	r0, r5
   b53de:	f7ff fe76 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
   b53e2:	2110      	movs	r1, #16
   b53e4:	4628      	mov	r0, r5
   b53e6:	f000 fe74 	bl	b60d2 <_ZdlPvj>
   b53ea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b53ec:	b135      	cbz	r5, b53fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b53ee:	4628      	mov	r0, r5
   b53f0:	f7ff fe6d 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
   b53f4:	2110      	movs	r1, #16
   b53f6:	4628      	mov	r0, r5
   b53f8:	f000 fe6b 	bl	b60d2 <_ZdlPvj>
   b53fc:	4620      	mov	r0, r4
   b53fe:	2114      	movs	r1, #20
   b5400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5404:	f000 be65 	b.w	b60d2 <_ZdlPvj>
   b5408:	bd38      	pop	{r3, r4, r5, pc}

000b540a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   b540a:	b510      	push	{r4, lr}
   b540c:	b088      	sub	sp, #32
   b540e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   b5410:	4668      	mov	r0, sp
   b5412:	f7ff fde8 	bl	b4fe6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   b5416:	4669      	mov	r1, sp
   b5418:	a804      	add	r0, sp, #16
   b541a:	f7ff fe07 	bl	b502c <_ZN6StringC1ERKS_>
   b541e:	a804      	add	r0, sp, #16
   b5420:	47a0      	blx	r4
   b5422:	4604      	mov	r4, r0
   b5424:	a804      	add	r0, sp, #16
   b5426:	f7ff fd93 	bl	b4f50 <_ZN6StringD1Ev>
    String p(param);
   b542a:	4668      	mov	r0, sp
   b542c:	f7ff fd90 	bl	b4f50 <_ZN6StringD1Ev>
}
   b5430:	4620      	mov	r0, r4
   b5432:	b008      	add	sp, #32
   b5434:	bd10      	pop	{r4, pc}

000b5436 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   b5436:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   b5438:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   b543a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   b543e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   b5440:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   b5442:	461a      	mov	r2, r3
   b5444:	4669      	mov	r1, sp
   b5446:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   b5448:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   b544c:	f8ad 4000 	strh.w	r4, [sp]
   b5450:	f7ff fc12 	bl	b4c78 <spark_function>
}
   b5454:	b004      	add	sp, #16
   b5456:	bd10      	pop	{r4, pc}

000b5458 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5458:	680b      	ldr	r3, [r1, #0]
   b545a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b545c:	684b      	ldr	r3, [r1, #4]
   b545e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5460:	b113      	cbz	r3, b5468 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5462:	685a      	ldr	r2, [r3, #4]
   b5464:	3201      	adds	r2, #1
   b5466:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5468:	4770      	bx	lr

000b546a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b546a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b546c:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b546e:	4668      	mov	r0, sp
   b5470:	460d      	mov	r5, r1
   b5472:	f7ff fff1 	bl	b5458 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5476:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5478:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b547a:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b547c:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b547e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5480:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5482:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5484:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5486:	f7fe fe55 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b548a:	b135      	cbz	r5, b549a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b548c:	1d28      	adds	r0, r5, #4
   b548e:	f7fe fe51 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5492:	2108      	movs	r1, #8
   b5494:	4628      	mov	r0, r5
   b5496:	f000 fe1c 	bl	b60d2 <_ZdlPvj>
        return p;
    }
   b549a:	4620      	mov	r0, r4
   b549c:	b003      	add	sp, #12
   b549e:	bd30      	pop	{r4, r5, pc}

000b54a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b54a0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b54a2:	b510      	push	{r4, lr}
      if (_M_empty())
   b54a4:	b90a      	cbnz	r2, b54aa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b54a6:	f000 fe18 	bl	b60da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b54aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b54ae:	68c3      	ldr	r3, [r0, #12]
   b54b0:	4718      	bx	r3

000b54b2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b54b2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b54b4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b54b6:	f100 0110 	add.w	r1, r0, #16
   b54ba:	f7ff fff1 	bl	b54a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b54be:	bd08      	pop	{r3, pc}

000b54c0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b54c0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b54c2:	b510      	push	{r4, lr}
      if (_M_empty())
   b54c4:	b90a      	cbnz	r2, b54ca <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b54c6:	f000 fe08 	bl	b60da <_ZSt25__throw_bad_function_callv>
    }
   b54ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b54ce:	68c3      	ldr	r3, [r0, #12]
   b54d0:	4718      	bx	r3

000b54d2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b54d2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b54d4:	6800      	ldr	r0, [r0, #0]
   b54d6:	f100 0110 	add.w	r1, r0, #16
   b54da:	f7ff fff1 	bl	b54c0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b54de:	bd08      	pop	{r3, pc}

000b54e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b54e0:	b538      	push	{r3, r4, r5, lr}
   b54e2:	2300      	movs	r3, #0
   b54e4:	4604      	mov	r4, r0
   b54e6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b54e8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b54ea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b54ec:	f7fe fdd3 	bl	b4096 <_Znwj>
   b54f0:	b128      	cbz	r0, b54fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b54f2:	2301      	movs	r3, #1
   b54f4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b54f8:	4b02      	ldr	r3, [pc, #8]	; (b5504 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b54fa:	6003      	str	r3, [r0, #0]
   b54fc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b54fe:	6020      	str	r0, [r4, #0]
	}
   b5500:	4620      	mov	r0, r4
   b5502:	bd38      	pop	{r3, r4, r5, pc}
   b5504:	000b8174 	.word	0x000b8174

000b5508 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5508:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b550a:	2300      	movs	r3, #0
   b550c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b550e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5510:	4604      	mov	r4, r0
   b5512:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5514:	b12b      	cbz	r3, b5522 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5516:	2202      	movs	r2, #2
   b5518:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b551a:	68eb      	ldr	r3, [r5, #12]
   b551c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b551e:	68ab      	ldr	r3, [r5, #8]
   b5520:	60a3      	str	r3, [r4, #8]
    }
   b5522:	4620      	mov	r0, r4
   b5524:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5528 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5528:	b5f0      	push	{r4, r5, r6, r7, lr}
   b552a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b552c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b552e:	4668      	mov	r0, sp
   b5530:	f7ff ff34 	bl	b539c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5534:	f04f 0302 	mov.w	r3, #2
   b5538:	e8d4 2f4f 	ldrexb	r2, [r4]
   b553c:	2a00      	cmp	r2, #0
   b553e:	d103      	bne.n	b5548 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5540:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5544:	2900      	cmp	r1, #0
   b5546:	d1f7      	bne.n	b5538 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5548:	d125      	bne.n	b5596 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b554a:	f104 050c 	add.w	r5, r4, #12
   b554e:	4669      	mov	r1, sp
   b5550:	4628      	mov	r0, r5
   b5552:	f7ff ff23 	bl	b539c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5556:	f3bf 8f5b 	dmb	ish
   b555a:	2301      	movs	r3, #1
   b555c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b555e:	2000      	movs	r0, #0
   b5560:	f104 0308 	add.w	r3, r4, #8
   b5564:	f3bf 8f5b 	dmb	ish
   b5568:	e853 6f00 	ldrex	r6, [r3]
   b556c:	e843 0200 	strex	r2, r0, [r3]
   b5570:	2a00      	cmp	r2, #0
   b5572:	d1f9      	bne.n	b5568 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5574:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5578:	b16e      	cbz	r6, b5596 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b557a:	f7ff faf9 	bl	b4b70 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b557e:	b178      	cbz	r0, b55a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5580:	4629      	mov	r1, r5
   b5582:	4630      	mov	r0, r6
   b5584:	f7ff ff8c 	bl	b54a0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5588:	4630      	mov	r0, r6
   b558a:	f7ff fda0 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b558e:	2110      	movs	r1, #16
   b5590:	4630      	mov	r0, r6
   b5592:	f000 fd9e 	bl	b60d2 <_ZdlPvj>
        p_->setError(std::move(error));
   b5596:	4668      	mov	r0, sp
   b5598:	f7ff ff0d 	bl	b53b6 <_ZN8particle5ErrorD1Ev>
    }
   b559c:	b009      	add	sp, #36	; 0x24
   b559e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b55a0:	4631      	mov	r1, r6
   b55a2:	a802      	add	r0, sp, #8
   b55a4:	f7ff ffb0 	bl	b5508 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b55a8:	68e0      	ldr	r0, [r4, #12]
   b55aa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b55ae:	b108      	cbz	r0, b55b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b55b0:	f002 fcf4 	bl	b7f9c <strdup>
        type_(type) {
   b55b4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b55b6:	2010      	movs	r0, #16
   b55b8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b55bc:	f7fe fd6b 	bl	b4096 <_Znwj>
   b55c0:	4605      	mov	r5, r0
   b55c2:	b1e8      	cbz	r0, b5600 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b55c4:	2700      	movs	r7, #0
   b55c6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b55c8:	2018      	movs	r0, #24
   b55ca:	f7fe fd64 	bl	b4096 <_Znwj>
   b55ce:	4604      	mov	r4, r0
   b55d0:	b188      	cbz	r0, b55f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b55d2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b55d4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b55d6:	a802      	add	r0, sp, #8
   b55d8:	f7ff fd82 	bl	b50e0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55dc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b55de:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b55e0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b55e2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b55e4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b55e6:	a906      	add	r1, sp, #24
   b55e8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b55ea:	60e3      	str	r3, [r4, #12]
   b55ec:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b55f0:	9205      	str	r2, [sp, #20]
   b55f2:	f7ff fed3 	bl	b539c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b55f6:	4b08      	ldr	r3, [pc, #32]	; (b5618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b55f8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b55fa:	4b08      	ldr	r3, [pc, #32]	; (b561c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b55fc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b55fe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5600:	a806      	add	r0, sp, #24
   b5602:	f7ff fed8 	bl	b53b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5606:	a802      	add	r0, sp, #8
   b5608:	f7ff fd61 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b560c:	2200      	movs	r2, #0
   b560e:	4629      	mov	r1, r5
   b5610:	4803      	ldr	r0, [pc, #12]	; (b5620 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5612:	f7ff fab5 	bl	b4b80 <application_thread_invoke>
   b5616:	e7b7      	b.n	b5588 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5618:	000b54b3 	.word	0x000b54b3
   b561c:	000b5735 	.word	0x000b5735
   b5620:	000b5cd5 	.word	0x000b5cd5

000b5624 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5628:	b08b      	sub	sp, #44	; 0x2c
   b562a:	4605      	mov	r5, r0
   b562c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5630:	460f      	mov	r7, r1
   b5632:	4690      	mov	r8, r2
   b5634:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5636:	f7ff fb27 	bl	b4c88 <spark_cloud_flag_connected>
   b563a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b563c:	4683      	mov	fp, r0
   b563e:	bb38      	cbnz	r0, b5690 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5640:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5644:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5646:	a905      	add	r1, sp, #20
   b5648:	4630      	mov	r0, r6
   b564a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b564e:	f7ff fea5 	bl	b539c <_ZN8particle5ErrorC1EOS0_>
   b5652:	2014      	movs	r0, #20
   b5654:	f7fe fd1f 	bl	b4096 <_Znwj>
   b5658:	4604      	mov	r4, r0
   b565a:	b148      	cbz	r0, b5670 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b565c:	2302      	movs	r3, #2
   b565e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5660:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5662:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5666:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5668:	4631      	mov	r1, r6
   b566a:	300c      	adds	r0, #12
   b566c:	f7ff fe96 	bl	b539c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5670:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5672:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5674:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5678:	f7ff ff32 	bl	b54e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b567c:	4630      	mov	r0, r6
   b567e:	f7ff fe9a 	bl	b53b6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5682:	a805      	add	r0, sp, #20
   b5684:	f7ff fe97 	bl	b53b6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5688:	4628      	mov	r0, r5
   b568a:	b00b      	add	sp, #44	; 0x2c
   b568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   b5690:	230c      	movs	r3, #12
   b5692:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5694:	2014      	movs	r0, #20
   b5696:	e9cd 4408 	strd	r4, r4, [sp, #32]
   b569a:	9307      	str	r3, [sp, #28]
   b569c:	f7fe fcfb 	bl	b4096 <_Znwj>
   b56a0:	4601      	mov	r1, r0
   b56a2:	b118      	cbz	r0, b56ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b56a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b56a8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b56aa:	7044      	strb	r4, [r0, #1]
   b56ac:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b56ae:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b56b0:	f7ff ff16 	bl	b54e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b56b4:	4b1e      	ldr	r3, [pc, #120]	; (b5730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b56b6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b56b8:	2008      	movs	r0, #8
   b56ba:	f7fe fcec 	bl	b4096 <_Znwj>
   b56be:	4604      	mov	r4, r0
   b56c0:	b110      	cbz	r0, b56c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b56c2:	a903      	add	r1, sp, #12
   b56c4:	f7ff fec8 	bl	b5458 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b56c8:	9600      	str	r6, [sp, #0]
   b56ca:	fa5f f38a 	uxtb.w	r3, sl
   b56ce:	464a      	mov	r2, r9
   b56d0:	4641      	mov	r1, r8
   b56d2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b56d4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b56d6:	f7ff fadf 	bl	b4c98 <spark_send_event>
   b56da:	b9b8      	cbnz	r0, b570c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b56dc:	9b03      	ldr	r3, [sp, #12]
   b56de:	785b      	ldrb	r3, [r3, #1]
   b56e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b56e4:	b993      	cbnz	r3, b570c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b56e6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b56ea:	a905      	add	r1, sp, #20
   b56ec:	a803      	add	r0, sp, #12
   b56ee:	9205      	str	r2, [sp, #20]
   b56f0:	f8ad 3018 	strh.w	r3, [sp, #24]
   b56f4:	f7ff ff18 	bl	b5528 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b56f8:	a805      	add	r0, sp, #20
   b56fa:	f7ff fe5c 	bl	b53b6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b56fe:	a805      	add	r0, sp, #20
   b5700:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5702:	f7ff feb2 	bl	b546a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5706:	a806      	add	r0, sp, #24
   b5708:	f7fe fd14 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b570c:	a903      	add	r1, sp, #12
   b570e:	a805      	add	r0, sp, #20
   b5710:	f7ff fea2 	bl	b5458 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5714:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5716:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5718:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b571a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b571c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b571e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5720:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5722:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5724:	f7fe fd06 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5728:	a804      	add	r0, sp, #16
   b572a:	f7fe fd03 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b572e:	e7ab      	b.n	b5688 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5730:	000b57b1 	.word	0x000b57b1

000b5734 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5734:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5738:	4605      	mov	r5, r0
	switch (__op)
   b573a:	d103      	bne.n	b5744 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b573c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b573e:	6003      	str	r3, [r0, #0]
      }
   b5740:	2000      	movs	r0, #0
   b5742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5744:	2a02      	cmp	r2, #2
   b5746:	d010      	beq.n	b576a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5748:	2a03      	cmp	r2, #3
   b574a:	d1f9      	bne.n	b5740 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b574c:	6804      	ldr	r4, [r0, #0]
   b574e:	2c00      	cmp	r4, #0
   b5750:	d0f6      	beq.n	b5740 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5752:	f104 0010 	add.w	r0, r4, #16
   b5756:	f7ff fe2e 	bl	b53b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b575a:	4620      	mov	r0, r4
   b575c:	f7ff fcb7 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5760:	2118      	movs	r1, #24
   b5762:	4620      	mov	r0, r4
   b5764:	f000 fcb5 	bl	b60d2 <_ZdlPvj>
   b5768:	e7ea      	b.n	b5740 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b576a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b576c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b576e:	f7fe fc92 	bl	b4096 <_Znwj>
   b5772:	4604      	mov	r4, r0
   b5774:	b150      	cbz	r0, b578c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5776:	4631      	mov	r1, r6
   b5778:	f7ff fec6 	bl	b5508 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b577c:	6930      	ldr	r0, [r6, #16]
   b577e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5782:	b108      	cbz	r0, b5788 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5784:	f002 fc0a 	bl	b7f9c <strdup>
        type_(type) {
   b5788:	6120      	str	r0, [r4, #16]
   b578a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b578c:	602c      	str	r4, [r5, #0]
	}
   b578e:	e7d7      	b.n	b5740 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5790 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5790:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5792:	2300      	movs	r3, #0
   b5794:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5796:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5798:	4604      	mov	r4, r0
   b579a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b579c:	b12b      	cbz	r3, b57aa <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b579e:	2202      	movs	r2, #2
   b57a0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b57a2:	68eb      	ldr	r3, [r5, #12]
   b57a4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b57a6:	68ab      	ldr	r3, [r5, #8]
   b57a8:	60a3      	str	r3, [r4, #8]
    }
   b57aa:	4620      	mov	r0, r4
   b57ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000b57b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b57b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b57b2:	b089      	sub	sp, #36	; 0x24
   b57b4:	4604      	mov	r4, r0
   b57b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b57b8:	a801      	add	r0, sp, #4
   b57ba:	4611      	mov	r1, r2
   b57bc:	f7ff fe55 	bl	b546a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b57c0:	b1a4      	cbz	r4, b57ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b57c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b57c4:	b11d      	cbz	r5, b57ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b57c6:	4628      	mov	r0, r5
   b57c8:	f002 fbe8 	bl	b7f9c <strdup>
   b57cc:	4605      	mov	r5, r0
   b57ce:	a801      	add	r0, sp, #4
   b57d0:	a903      	add	r1, sp, #12
        type_(type) {
   b57d2:	9503      	str	r5, [sp, #12]
   b57d4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b57d8:	f7ff fea6 	bl	b5528 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b57dc:	a803      	add	r0, sp, #12
   b57de:	f7ff fdea 	bl	b53b6 <_ZN8particle5ErrorD1Ev>
   b57e2:	a802      	add	r0, sp, #8
   b57e4:	f7fe fca6 	bl	b4134 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b57e8:	b009      	add	sp, #36	; 0x24
   b57ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b57ec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b57ee:	2301      	movs	r3, #1
   b57f0:	e8d5 2f4f 	ldrexb	r2, [r5]
   b57f4:	2a00      	cmp	r2, #0
   b57f6:	d103      	bne.n	b5800 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b57f8:	e8c5 3f41 	strexb	r1, r3, [r5]
   b57fc:	2900      	cmp	r1, #0
   b57fe:	d1f7      	bne.n	b57f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5800:	d1ef      	bne.n	b57e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5802:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5804:	f3bf 8f5b 	dmb	ish
   b5808:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b580a:	1d2b      	adds	r3, r5, #4
   b580c:	f3bf 8f5b 	dmb	ish
   b5810:	e853 6f00 	ldrex	r6, [r3]
   b5814:	e843 4200 	strex	r2, r4, [r3]
   b5818:	2a00      	cmp	r2, #0
   b581a:	d1f9      	bne.n	b5810 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b581c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5820:	2e00      	cmp	r6, #0
   b5822:	d0de      	beq.n	b57e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5824:	4620      	mov	r0, r4
   b5826:	f7ff f9a3 	bl	b4b70 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b582a:	4607      	mov	r7, r0
   b582c:	b160      	cbz	r0, b5848 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b582e:	f105 010c 	add.w	r1, r5, #12
   b5832:	4630      	mov	r0, r6
   b5834:	f7ff fe44 	bl	b54c0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5838:	4630      	mov	r0, r6
   b583a:	f7ff fc48 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b583e:	2110      	movs	r1, #16
   b5840:	4630      	mov	r0, r6
   b5842:	f000 fc46 	bl	b60d2 <_ZdlPvj>
   b5846:	e7cc      	b.n	b57e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5848:	4631      	mov	r1, r6
   b584a:	a803      	add	r0, sp, #12
   b584c:	f7ff ffa0 	bl	b5790 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5850:	7b2b      	ldrb	r3, [r5, #12]
   b5852:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5856:	2010      	movs	r0, #16
   b5858:	f7fe fc1d 	bl	b4096 <_Znwj>
   b585c:	4605      	mov	r5, r0
   b585e:	b1d0      	cbz	r0, b5896 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5860:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5862:	2014      	movs	r0, #20
   b5864:	f7fe fc17 	bl	b4096 <_Znwj>
   b5868:	4604      	mov	r4, r0
   b586a:	b178      	cbz	r0, b588c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b586c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b586e:	4601      	mov	r1, r0
   b5870:	a803      	add	r0, sp, #12
   b5872:	f7ff fc35 	bl	b50e0 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5876:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5878:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b587a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b587c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b587e:	9205      	str	r2, [sp, #20]
   b5880:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5882:	60e3      	str	r3, [r4, #12]
   b5884:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5888:	9206      	str	r2, [sp, #24]
   b588a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b588c:	4b06      	ldr	r3, [pc, #24]	; (b58a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b588e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5890:	4b06      	ldr	r3, [pc, #24]	; (b58ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5892:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5894:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5896:	a803      	add	r0, sp, #12
   b5898:	f7ff fc19 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b589c:	2200      	movs	r2, #0
   b589e:	4629      	mov	r1, r5
   b58a0:	4803      	ldr	r0, [pc, #12]	; (b58b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b58a2:	f7ff f96d 	bl	b4b80 <application_thread_invoke>
   b58a6:	e7c7      	b.n	b5838 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b58a8:	000b54d3 	.word	0x000b54d3
   b58ac:	000b58b5 	.word	0x000b58b5
   b58b0:	000b5cd5 	.word	0x000b5cd5

000b58b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b58b4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b58b6:	b570      	push	{r4, r5, r6, lr}
   b58b8:	4604      	mov	r4, r0
	switch (__op)
   b58ba:	d103      	bne.n	b58c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b58bc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b58be:	6003      	str	r3, [r0, #0]
      }
   b58c0:	2000      	movs	r0, #0
   b58c2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b58c4:	2a02      	cmp	r2, #2
   b58c6:	d00c      	beq.n	b58e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b58c8:	2a03      	cmp	r2, #3
   b58ca:	d1f9      	bne.n	b58c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b58cc:	6804      	ldr	r4, [r0, #0]
   b58ce:	2c00      	cmp	r4, #0
   b58d0:	d0f6      	beq.n	b58c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b58d2:	4620      	mov	r0, r4
   b58d4:	f7ff fbfb 	bl	b50ce <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b58d8:	2114      	movs	r1, #20
   b58da:	4620      	mov	r0, r4
   b58dc:	f000 fbf9 	bl	b60d2 <_ZdlPvj>
   b58e0:	e7ee      	b.n	b58c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b58e2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b58e4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b58e6:	f7fe fbd6 	bl	b4096 <_Znwj>
   b58ea:	4605      	mov	r5, r0
   b58ec:	b120      	cbz	r0, b58f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b58ee:	4631      	mov	r1, r6
   b58f0:	f7ff ff4e 	bl	b5790 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b58f4:	7c33      	ldrb	r3, [r6, #16]
   b58f6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b58f8:	6025      	str	r5, [r4, #0]
	}
   b58fa:	e7e1      	b.n	b58c0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b58fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b58fc:	4770      	bx	lr

000b58fe <_ZN9IPAddressD0Ev>:
   b58fe:	b510      	push	{r4, lr}
   b5900:	2118      	movs	r1, #24
   b5902:	4604      	mov	r4, r0
   b5904:	f000 fbe5 	bl	b60d2 <_ZdlPvj>
   b5908:	4620      	mov	r0, r4
   b590a:	bd10      	pop	{r4, pc}

000b590c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b590c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b590e:	7d03      	ldrb	r3, [r0, #20]
   b5910:	2b06      	cmp	r3, #6
{
   b5912:	b08d      	sub	sp, #52	; 0x34
   b5914:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5916:	f100 0704 	add.w	r7, r0, #4
   b591a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b591e:	d012      	beq.n	b5946 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5920:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5924:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5928:	220a      	movs	r2, #10
   b592a:	4630      	mov	r0, r6
   b592c:	f7ff fc43 	bl	b51b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5930:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5932:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5934:	d019      	beq.n	b596a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5936:	2c00      	cmp	r4, #0
   b5938:	d0f4      	beq.n	b5924 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b593a:	212e      	movs	r1, #46	; 0x2e
   b593c:	4630      	mov	r0, r6
   b593e:	f7ff fc21 	bl	b5184 <_ZN5Print5printEc>
   b5942:	4404      	add	r4, r0
   b5944:	e7ee      	b.n	b5924 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5946:	232f      	movs	r3, #47	; 0x2f
   b5948:	466a      	mov	r2, sp
   b594a:	4639      	mov	r1, r7
   b594c:	200a      	movs	r0, #10
		buf[0] = 0;
   b594e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5952:	f7ff f805 	bl	b4960 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5956:	4668      	mov	r0, sp
   b5958:	f002 fb3d 	bl	b7fd6 <strlen>
   b595c:	6833      	ldr	r3, [r6, #0]
   b595e:	4602      	mov	r2, r0
   b5960:	68db      	ldr	r3, [r3, #12]
   b5962:	4669      	mov	r1, sp
   b5964:	4630      	mov	r0, r6
   b5966:	4798      	blx	r3
   b5968:	4604      	mov	r4, r0
    }
    return n;
}
   b596a:	4620      	mov	r0, r4
   b596c:	b00d      	add	sp, #52	; 0x34
   b596e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5970 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5970:	b510      	push	{r4, lr}
   b5972:	4b05      	ldr	r3, [pc, #20]	; (b5988 <_ZN9IPAddressC1Ev+0x18>)
   b5974:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5976:	2211      	movs	r2, #17
   b5978:	f840 3b04 	str.w	r3, [r0], #4
   b597c:	2100      	movs	r1, #0
   b597e:	f002 facd 	bl	b7f1c <memset>
}
   b5982:	4620      	mov	r0, r4
   b5984:	bd10      	pop	{r4, pc}
   b5986:	bf00      	nop
   b5988:	000b8190 	.word	0x000b8190

000b598c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b598c:	4603      	mov	r3, r0
   b598e:	4a07      	ldr	r2, [pc, #28]	; (b59ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5990:	b510      	push	{r4, lr}
   b5992:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5996:	f101 0210 	add.w	r2, r1, #16
   b599a:	f851 4b04 	ldr.w	r4, [r1], #4
   b599e:	f843 4b04 	str.w	r4, [r3], #4
   b59a2:	4291      	cmp	r1, r2
   b59a4:	d1f9      	bne.n	b599a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b59a6:	780a      	ldrb	r2, [r1, #0]
   b59a8:	701a      	strb	r2, [r3, #0]
}
   b59aa:	bd10      	pop	{r4, pc}
   b59ac:	000b8190 	.word	0x000b8190

000b59b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b59b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b59b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b59b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b59ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b59be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b59c2:	2304      	movs	r3, #4
   b59c4:	6041      	str	r1, [r0, #4]
   b59c6:	7503      	strb	r3, [r0, #20]
}
   b59c8:	bd10      	pop	{r4, pc}
	...

000b59cc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b59cc:	b507      	push	{r0, r1, r2, lr}
   b59ce:	4b06      	ldr	r3, [pc, #24]	; (b59e8 <_ZN9IPAddressC1EPKh+0x1c>)
   b59d0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b59d2:	78cb      	ldrb	r3, [r1, #3]
   b59d4:	9300      	str	r3, [sp, #0]
   b59d6:	788b      	ldrb	r3, [r1, #2]
   b59d8:	784a      	ldrb	r2, [r1, #1]
   b59da:	7809      	ldrb	r1, [r1, #0]
   b59dc:	f7ff ffe8 	bl	b59b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b59e0:	b003      	add	sp, #12
   b59e2:	f85d fb04 	ldr.w	pc, [sp], #4
   b59e6:	bf00      	nop
   b59e8:	000b8190 	.word	0x000b8190

000b59ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b59ec:	7441      	strb	r1, [r0, #17]
}
   b59ee:	4770      	bx	lr

000b59f0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b59f0:	4770      	bx	lr

000b59f2 <_ZN9USBSerial4readEv>:
{
   b59f2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b59f4:	2100      	movs	r1, #0
   b59f6:	7c00      	ldrb	r0, [r0, #16]
   b59f8:	f7ff f88a 	bl	b4b10 <HAL_USB_USART_Receive_Data>
}
   b59fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a00:	bd08      	pop	{r3, pc}

000b5a02 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b5a02:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5a04:	2101      	movs	r1, #1
   b5a06:	7c00      	ldrb	r0, [r0, #16]
   b5a08:	f7ff f882 	bl	b4b10 <HAL_USB_USART_Receive_Data>
}
   b5a0c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a10:	bd08      	pop	{r3, pc}

000b5a12 <_ZN9USBSerial17availableForWriteEv>:
{
   b5a12:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5a14:	7c00      	ldrb	r0, [r0, #16]
   b5a16:	f7ff f873 	bl	b4b00 <HAL_USB_USART_Available_Data_For_Write>
}
   b5a1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a1e:	bd08      	pop	{r3, pc}

000b5a20 <_ZN9USBSerial9availableEv>:
{
   b5a20:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5a22:	7c00      	ldrb	r0, [r0, #16]
   b5a24:	f7ff f864 	bl	b4af0 <HAL_USB_USART_Available_Data>
}
   b5a28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a2c:	bd08      	pop	{r3, pc}

000b5a2e <_ZN9USBSerial5writeEh>:
{
   b5a2e:	b513      	push	{r0, r1, r4, lr}
   b5a30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5a32:	7c00      	ldrb	r0, [r0, #16]
{
   b5a34:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5a36:	f7ff f863 	bl	b4b00 <HAL_USB_USART_Available_Data_For_Write>
   b5a3a:	2800      	cmp	r0, #0
   b5a3c:	9901      	ldr	r1, [sp, #4]
   b5a3e:	dc01      	bgt.n	b5a44 <_ZN9USBSerial5writeEh+0x16>
   b5a40:	7c60      	ldrb	r0, [r4, #17]
   b5a42:	b120      	cbz	r0, b5a4e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5a44:	7c20      	ldrb	r0, [r4, #16]
   b5a46:	f7ff f86b 	bl	b4b20 <HAL_USB_USART_Send_Data>
   b5a4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5a4e:	b002      	add	sp, #8
   b5a50:	bd10      	pop	{r4, pc}

000b5a52 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5a52:	7c00      	ldrb	r0, [r0, #16]
   b5a54:	f7ff b86c 	b.w	b4b30 <HAL_USB_USART_Flush_Data>

000b5a58 <_ZN9USBSerialD0Ev>:
   b5a58:	b510      	push	{r4, lr}
   b5a5a:	2114      	movs	r1, #20
   b5a5c:	4604      	mov	r4, r0
   b5a5e:	f000 fb38 	bl	b60d2 <_ZdlPvj>
   b5a62:	4620      	mov	r0, r4
   b5a64:	bd10      	pop	{r4, pc}
	...

000b5a68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5a68:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a6e:	4604      	mov	r4, r0
   b5a70:	4608      	mov	r0, r1
   b5a72:	2100      	movs	r1, #0
   b5a74:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5a78:	4b04      	ldr	r3, [pc, #16]	; (b5a8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5a7a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5a7c:	2301      	movs	r3, #1
  _serial = serial;
   b5a7e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5a80:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5a82:	4611      	mov	r1, r2
   b5a84:	f7ff f824 	bl	b4ad0 <HAL_USB_USART_Init>
}
   b5a88:	4620      	mov	r0, r4
   b5a8a:	bd10      	pop	{r4, pc}
   b5a8c:	000b81a4 	.word	0x000b81a4

000b5a90 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5a90:	7c00      	ldrb	r0, [r0, #16]
   b5a92:	2200      	movs	r2, #0
   b5a94:	f7ff b824 	b.w	b4ae0 <HAL_USB_USART_Begin>

000b5a98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b5a98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b5a9a:	2214      	movs	r2, #20
{
   b5a9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b5a9e:	2100      	movs	r1, #0
   b5aa0:	f002 fa3c 	bl	b7f1c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b5aa4:	4620      	mov	r0, r4
   b5aa6:	bd10      	pop	{r4, pc}

000b5aa8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b5aa8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5aaa:	4c10      	ldr	r4, [pc, #64]	; (b5aec <_Z16_fetch_usbserialv+0x44>)
{
   b5aac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5aae:	a803      	add	r0, sp, #12
   b5ab0:	f7ff fff2 	bl	b5a98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ab4:	7821      	ldrb	r1, [r4, #0]
   b5ab6:	f3bf 8f5b 	dmb	ish
   b5aba:	f011 0101 	ands.w	r1, r1, #1
   b5abe:	d111      	bne.n	b5ae4 <_Z16_fetch_usbserialv+0x3c>
   b5ac0:	4620      	mov	r0, r4
   b5ac2:	9101      	str	r1, [sp, #4]
   b5ac4:	f7fe faed 	bl	b40a2 <__cxa_guard_acquire>
   b5ac8:	9901      	ldr	r1, [sp, #4]
   b5aca:	b158      	cbz	r0, b5ae4 <_Z16_fetch_usbserialv+0x3c>
   b5acc:	aa03      	add	r2, sp, #12
   b5ace:	4808      	ldr	r0, [pc, #32]	; (b5af0 <_Z16_fetch_usbserialv+0x48>)
   b5ad0:	f7ff ffca 	bl	b5a68 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	f7fe fae9 	bl	b40ac <__cxa_guard_release>
   b5ada:	4a06      	ldr	r2, [pc, #24]	; (b5af4 <_Z16_fetch_usbserialv+0x4c>)
   b5adc:	4906      	ldr	r1, [pc, #24]	; (b5af8 <_Z16_fetch_usbserialv+0x50>)
   b5ade:	4804      	ldr	r0, [pc, #16]	; (b5af0 <_Z16_fetch_usbserialv+0x48>)
   b5ae0:	f000 faf2 	bl	b60c8 <__aeabi_atexit>
	return _usbserial;
}
   b5ae4:	4802      	ldr	r0, [pc, #8]	; (b5af0 <_Z16_fetch_usbserialv+0x48>)
   b5ae6:	b008      	add	sp, #32
   b5ae8:	bd10      	pop	{r4, pc}
   b5aea:	bf00      	nop
   b5aec:	2003e750 	.word	0x2003e750
   b5af0:	2003e754 	.word	0x2003e754
   b5af4:	2003e69c 	.word	0x2003e69c
   b5af8:	000b59f1 	.word	0x000b59f1

000b5afc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5afc:	2200      	movs	r2, #0
   b5afe:	6840      	ldr	r0, [r0, #4]
   b5b00:	4611      	mov	r1, r2
   b5b02:	f7ff b871 	b.w	b4be8 <network_ready>

000b5b06 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5b06:	2200      	movs	r2, #0
   b5b08:	6840      	ldr	r0, [r0, #4]
   b5b0a:	4611      	mov	r1, r2
   b5b0c:	f7ff b88c 	b.w	b4c28 <network_listening>

000b5b10 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b10:	2200      	movs	r2, #0
   b5b12:	6840      	ldr	r0, [r0, #4]
   b5b14:	4611      	mov	r1, r2
   b5b16:	f7ff b897 	b.w	b4c48 <network_get_listen_timeout>

000b5b1a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b1a:	6840      	ldr	r0, [r0, #4]
   b5b1c:	2200      	movs	r2, #0
   b5b1e:	f7ff b88b 	b.w	b4c38 <network_set_listen_timeout>

000b5b22 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5b22:	6840      	ldr	r0, [r0, #4]
   b5b24:	2200      	movs	r2, #0
   b5b26:	f081 0101 	eor.w	r1, r1, #1
   b5b2a:	f7ff b875 	b.w	b4c18 <network_listen>

000b5b2e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5b2e:	2300      	movs	r3, #0
   b5b30:	6840      	ldr	r0, [r0, #4]
   b5b32:	461a      	mov	r2, r3
   b5b34:	4619      	mov	r1, r3
   b5b36:	f7ff b867 	b.w	b4c08 <network_off>

000b5b3a <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5b3a:	2300      	movs	r3, #0
   b5b3c:	6840      	ldr	r0, [r0, #4]
   b5b3e:	461a      	mov	r2, r3
   b5b40:	4619      	mov	r1, r3
   b5b42:	f7ff b859 	b.w	b4bf8 <network_on>

000b5b46 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5b46:	2200      	movs	r2, #0
   b5b48:	6840      	ldr	r0, [r0, #4]
   b5b4a:	4611      	mov	r1, r2
   b5b4c:	f7ff b83c 	b.w	b4bc8 <network_connecting>

000b5b50 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5b50:	6840      	ldr	r0, [r0, #4]
   b5b52:	2200      	movs	r2, #0
   b5b54:	2102      	movs	r1, #2
   b5b56:	f7ff b83f 	b.w	b4bd8 <network_disconnect>

000b5b5a <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5b5a:	2300      	movs	r3, #0
   b5b5c:	6840      	ldr	r0, [r0, #4]
   b5b5e:	461a      	mov	r2, r3
   b5b60:	f7ff b82a 	b.w	b4bb8 <network_connect>

000b5b64 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b5b64:	4b08      	ldr	r3, [pc, #32]	; (b5b88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b5b66:	b510      	push	{r4, lr}
   b5b68:	2428      	movs	r4, #40	; 0x28
   b5b6a:	4622      	mov	r2, r4
   b5b6c:	4618      	mov	r0, r3
   b5b6e:	2100      	movs	r1, #0
   b5b70:	f002 f9d4 	bl	b7f1c <memset>
   b5b74:	4b05      	ldr	r3, [pc, #20]	; (b5b8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b5b76:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5b78:	f04f 32ff 	mov.w	r2, #4294967295
   b5b7c:	6042      	str	r2, [r0, #4]
   b5b7e:	2204      	movs	r2, #4
   b5b80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b5b82:	4a03      	ldr	r2, [pc, #12]	; (b5b90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5b84:	601a      	str	r2, [r3, #0]
   b5b86:	bd10      	pop	{r4, pc}
   b5b88:	2003e770 	.word	0x2003e770
   b5b8c:	2003e768 	.word	0x2003e768
   b5b90:	000b81d4 	.word	0x000b81d4

000b5b94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b5b94:	4770      	bx	lr

000b5b96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b96:	7441      	strb	r1, [r0, #17]
}
   b5b98:	4770      	bx	lr

000b5b9a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5b9a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5b9c:	7c00      	ldrb	r0, [r0, #16]
   b5b9e:	f7fe ff1f 	bl	b49e0 <hal_usart_available_data_for_write>
}
   b5ba2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ba6:	bd08      	pop	{r3, pc}

000b5ba8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5ba8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5baa:	7c00      	ldrb	r0, [r0, #16]
   b5bac:	f7fe fef0 	bl	b4990 <hal_usart_available>
}
   b5bb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bb4:	bd08      	pop	{r3, pc}

000b5bb6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5bb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5bb8:	7c00      	ldrb	r0, [r0, #16]
   b5bba:	f7fe fef9 	bl	b49b0 <hal_usart_peek>
}
   b5bbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5bc2:	bd08      	pop	{r3, pc}

000b5bc4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5bc4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5bc6:	7c00      	ldrb	r0, [r0, #16]
   b5bc8:	f7fe feea 	bl	b49a0 <hal_usart_read>
}
   b5bcc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5bd0:	bd08      	pop	{r3, pc}

000b5bd2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5bd2:	7c00      	ldrb	r0, [r0, #16]
   b5bd4:	f7fe bef4 	b.w	b49c0 <hal_usart_flush>

000b5bd8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bda:	7c45      	ldrb	r5, [r0, #17]
{
   b5bdc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bde:	b12d      	cbz	r5, b5bec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5be0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5be2:	b003      	add	sp, #12
   b5be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5be8:	f7fe beca 	b.w	b4980 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5bec:	7c00      	ldrb	r0, [r0, #16]
   b5bee:	9101      	str	r1, [sp, #4]
   b5bf0:	f7fe fef6 	bl	b49e0 <hal_usart_available_data_for_write>
   b5bf4:	2800      	cmp	r0, #0
   b5bf6:	9901      	ldr	r1, [sp, #4]
   b5bf8:	dcf2      	bgt.n	b5be0 <_ZN11USARTSerial5writeEh+0x8>
}
   b5bfa:	4628      	mov	r0, r5
   b5bfc:	b003      	add	sp, #12
   b5bfe:	bd30      	pop	{r4, r5, pc}

000b5c00 <_ZN11USARTSerialD0Ev>:
   b5c00:	b510      	push	{r4, lr}
   b5c02:	2114      	movs	r1, #20
   b5c04:	4604      	mov	r4, r0
   b5c06:	f000 fa64 	bl	b60d2 <_ZdlPvj>
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	bd10      	pop	{r4, pc}
	...

000b5c10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b5c10:	b510      	push	{r4, lr}
   b5c12:	f04f 0c00 	mov.w	ip, #0
   b5c16:	4604      	mov	r4, r0
   b5c18:	4608      	mov	r0, r1
   b5c1a:	4611      	mov	r1, r2
   b5c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5c20:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b5c24:	4a04      	ldr	r2, [pc, #16]	; (b5c38 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b5c26:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b5c28:	2201      	movs	r2, #1
  _serial = serial;
   b5c2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5c2c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b5c2e:	461a      	mov	r2, r3
   b5c30:	f7fe fe9e 	bl	b4970 <hal_usart_init>
}
   b5c34:	4620      	mov	r0, r4
   b5c36:	bd10      	pop	{r4, pc}
   b5c38:	000b8210 	.word	0x000b8210

000b5c3c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b5c3c:	7c00      	ldrb	r0, [r0, #16]
   b5c3e:	2300      	movs	r3, #0
   b5c40:	f7fe bed6 	b.w	b49f0 <hal_usart_begin_config>

000b5c44 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5c44:	2200      	movs	r2, #0
   b5c46:	f7ff bff9 	b.w	b5c3c <_ZN11USARTSerial5beginEmm>
	...

000b5c4c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b5c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   b5c4e:	4d1b      	ldr	r5, [pc, #108]	; (b5cbc <_Z22__fetch_global_Serial1v+0x70>)
   b5c50:	682e      	ldr	r6, [r5, #0]
   b5c52:	b94e      	cbnz	r6, b5c68 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   b5c54:	2084      	movs	r0, #132	; 0x84
   b5c56:	f7fe fa1e 	bl	b4096 <_Znwj>
   b5c5a:	4604      	mov	r4, r0
   b5c5c:	b118      	cbz	r0, b5c66 <_Z22__fetch_global_Serial1v+0x1a>
   b5c5e:	2284      	movs	r2, #132	; 0x84
   b5c60:	4631      	mov	r1, r6
   b5c62:	f002 f95b 	bl	b7f1c <memset>
   b5c66:	602c      	str	r4, [r5, #0]
  }
  if (!serial1_tx_buffer) {
   b5c68:	4e15      	ldr	r6, [pc, #84]	; (b5cc0 <_Z22__fetch_global_Serial1v+0x74>)
   b5c6a:	6837      	ldr	r7, [r6, #0]
   b5c6c:	b94f      	cbnz	r7, b5c82 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   b5c6e:	2084      	movs	r0, #132	; 0x84
   b5c70:	f7fe fa11 	bl	b4096 <_Znwj>
   b5c74:	4604      	mov	r4, r0
   b5c76:	b118      	cbz	r0, b5c80 <_Z22__fetch_global_Serial1v+0x34>
   b5c78:	2284      	movs	r2, #132	; 0x84
   b5c7a:	4639      	mov	r1, r7
   b5c7c:	f002 f94e 	bl	b7f1c <memset>
   b5c80:	6034      	str	r4, [r6, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   b5c82:	4c10      	ldr	r4, [pc, #64]	; (b5cc4 <_Z22__fetch_global_Serial1v+0x78>)
   b5c84:	7821      	ldrb	r1, [r4, #0]
   b5c86:	f3bf 8f5b 	dmb	ish
   b5c8a:	f011 0101 	ands.w	r1, r1, #1
   b5c8e:	d112      	bne.n	b5cb6 <_Z22__fetch_global_Serial1v+0x6a>
   b5c90:	4620      	mov	r0, r4
   b5c92:	9101      	str	r1, [sp, #4]
   b5c94:	f7fe fa05 	bl	b40a2 <__cxa_guard_acquire>
   b5c98:	9901      	ldr	r1, [sp, #4]
   b5c9a:	b160      	cbz	r0, b5cb6 <_Z22__fetch_global_Serial1v+0x6a>
   b5c9c:	682a      	ldr	r2, [r5, #0]
   b5c9e:	6833      	ldr	r3, [r6, #0]
   b5ca0:	4809      	ldr	r0, [pc, #36]	; (b5cc8 <_Z22__fetch_global_Serial1v+0x7c>)
   b5ca2:	f7ff ffb5 	bl	b5c10 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b5ca6:	4620      	mov	r0, r4
   b5ca8:	f7fe fa00 	bl	b40ac <__cxa_guard_release>
   b5cac:	4a07      	ldr	r2, [pc, #28]	; (b5ccc <_Z22__fetch_global_Serial1v+0x80>)
   b5cae:	4908      	ldr	r1, [pc, #32]	; (b5cd0 <_Z22__fetch_global_Serial1v+0x84>)
   b5cb0:	4805      	ldr	r0, [pc, #20]	; (b5cc8 <_Z22__fetch_global_Serial1v+0x7c>)
   b5cb2:	f000 fa09 	bl	b60c8 <__aeabi_atexit>
#endif
	return serial1;
}
   b5cb6:	4804      	ldr	r0, [pc, #16]	; (b5cc8 <_Z22__fetch_global_Serial1v+0x7c>)
   b5cb8:	b003      	add	sp, #12
   b5cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5cbc:	2003e79c 	.word	0x2003e79c
   b5cc0:	2003e7a0 	.word	0x2003e7a0
   b5cc4:	2003e798 	.word	0x2003e798
   b5cc8:	2003e7a4 	.word	0x2003e7a4
   b5ccc:	2003e69c 	.word	0x2003e69c
   b5cd0:	000b5b95 	.word	0x000b5b95

000b5cd4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5cd4:	b510      	push	{r4, lr}
      if (_M_empty())
   b5cd6:	6883      	ldr	r3, [r0, #8]
   b5cd8:	4604      	mov	r4, r0
   b5cda:	b90b      	cbnz	r3, b5ce0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5cdc:	f000 f9fd 	bl	b60da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5ce0:	68c3      	ldr	r3, [r0, #12]
   b5ce2:	4798      	blx	r3
      if (_M_manager)
   b5ce4:	68a3      	ldr	r3, [r4, #8]
   b5ce6:	b11b      	cbz	r3, b5cf0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5ce8:	2203      	movs	r2, #3
   b5cea:	4621      	mov	r1, r4
   b5cec:	4620      	mov	r0, r4
   b5cee:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5cf0:	4620      	mov	r0, r4
   b5cf2:	2110      	movs	r1, #16
}
   b5cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5cf8:	f000 b9eb 	b.w	b60d2 <_ZdlPvj>

000b5cfc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5cfc:	4770      	bx	lr

000b5cfe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d00:	4606      	mov	r6, r0
   b5d02:	4615      	mov	r5, r2
   b5d04:	460c      	mov	r4, r1
   b5d06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5d08:	42bc      	cmp	r4, r7
   b5d0a:	d006      	beq.n	b5d1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5d0c:	6833      	ldr	r3, [r6, #0]
   b5d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5d12:	689b      	ldr	r3, [r3, #8]
   b5d14:	4630      	mov	r0, r6
   b5d16:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5d18:	e7f6      	b.n	b5d08 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5d1a:	4628      	mov	r0, r5
   b5d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d1e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5d1e:	7c00      	ldrb	r0, [r0, #16]
   b5d20:	2200      	movs	r2, #0
   b5d22:	f7fe be85 	b.w	b4a30 <hal_i2c_write>

000b5d26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5d26:	7c00      	ldrb	r0, [r0, #16]
   b5d28:	2100      	movs	r1, #0
   b5d2a:	f7fe be89 	b.w	b4a40 <hal_i2c_available>

000b5d2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5d2e:	7c00      	ldrb	r0, [r0, #16]
   b5d30:	2100      	movs	r1, #0
   b5d32:	f7fe be8d 	b.w	b4a50 <hal_i2c_read>

000b5d36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5d36:	7c00      	ldrb	r0, [r0, #16]
   b5d38:	2100      	movs	r1, #0
   b5d3a:	f7fe be91 	b.w	b4a60 <hal_i2c_peek>

000b5d3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5d3e:	7c00      	ldrb	r0, [r0, #16]
   b5d40:	2100      	movs	r1, #0
   b5d42:	f7fe be95 	b.w	b4a70 <hal_i2c_flush>

000b5d46 <_ZN7TwoWireD0Ev>:
   b5d46:	b510      	push	{r4, lr}
   b5d48:	2114      	movs	r1, #20
   b5d4a:	4604      	mov	r4, r0
   b5d4c:	f000 f9c1 	bl	b60d2 <_ZdlPvj>
   b5d50:	4620      	mov	r0, r4
   b5d52:	bd10      	pop	{r4, pc}

000b5d54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5d54:	b510      	push	{r4, lr}
   b5d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d5a:	4604      	mov	r4, r0
   b5d5c:	4608      	mov	r0, r1
   b5d5e:	2100      	movs	r1, #0
   b5d60:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5d64:	4b03      	ldr	r3, [pc, #12]	; (b5d74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5d66:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5d68:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5d6a:	4611      	mov	r1, r2
   b5d6c:	f7fe fe90 	bl	b4a90 <hal_i2c_init>
}
   b5d70:	4620      	mov	r0, r4
   b5d72:	bd10      	pop	{r4, pc}
   b5d74:	000b8240 	.word	0x000b8240

000b5d78 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5d78:	2300      	movs	r3, #0
   b5d7a:	7c00      	ldrb	r0, [r0, #16]
   b5d7c:	461a      	mov	r2, r3
   b5d7e:	4619      	mov	r1, r3
   b5d80:	f7fe be3e 	b.w	b4a00 <hal_i2c_begin>

000b5d84 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5d84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5d86:	2200      	movs	r2, #0
   b5d88:	2314      	movs	r3, #20
   b5d8a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5d8e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5d92:	780b      	ldrb	r3, [r1, #0]
   b5d94:	f88d 3008 	strb.w	r3, [sp, #8]
   b5d98:	684b      	ldr	r3, [r1, #4]
   b5d9a:	9303      	str	r3, [sp, #12]
   b5d9c:	68cb      	ldr	r3, [r1, #12]
   b5d9e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5da0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5da2:	7a0b      	ldrb	r3, [r1, #8]
   b5da4:	9305      	str	r3, [sp, #20]
   b5da6:	a901      	add	r1, sp, #4
   b5da8:	f7fe fe7a 	bl	b4aa0 <hal_i2c_request_ex>
}
   b5dac:	b007      	add	sp, #28
   b5dae:	f85d fb04 	ldr.w	pc, [sp], #4

000b5db2 <_ZN7TwoWire11requestFromEhjh>:
{
   b5db2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5db4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5db6:	f88d 1000 	strb.w	r1, [sp]
   b5dba:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5dbe:	9103      	str	r1, [sp, #12]
   b5dc0:	bf18      	it	ne
   b5dc2:	2301      	movne	r3, #1
   b5dc4:	4669      	mov	r1, sp
    size_ = size;
   b5dc6:	9201      	str	r2, [sp, #4]
   b5dc8:	f88d 3008 	strb.w	r3, [sp, #8]
   b5dcc:	f7ff ffda 	bl	b5d84 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5dd0:	b005      	add	sp, #20
   b5dd2:	f85d fb04 	ldr.w	pc, [sp], #4

000b5dd6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5dd6:	2301      	movs	r3, #1
   b5dd8:	f7ff bfeb 	b.w	b5db2 <_ZN7TwoWire11requestFromEhjh>

000b5ddc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5ddc:	7c00      	ldrb	r0, [r0, #16]
   b5dde:	2200      	movs	r2, #0
   b5de0:	f7fe be16 	b.w	b4a10 <hal_i2c_begin_transmission>

000b5de4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5de4:	b2c9      	uxtb	r1, r1
   b5de6:	f7ff bff9 	b.w	b5ddc <_ZN7TwoWire17beginTransmissionEh>

000b5dea <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5dea:	7c00      	ldrb	r0, [r0, #16]
   b5dec:	2200      	movs	r2, #0
   b5dee:	f7fe be17 	b.w	b4a20 <hal_i2c_end_transmission>

000b5df2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5df2:	2101      	movs	r1, #1
   b5df4:	f7ff bff9 	b.w	b5dea <_ZN7TwoWire15endTransmissionEh>

000b5df8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5df8:	2300      	movs	r3, #0
   b5dfa:	6840      	ldr	r0, [r0, #4]
   b5dfc:	461a      	mov	r2, r3
   b5dfe:	f7fe bedb 	b.w	b4bb8 <network_connect>

000b5e02 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5e02:	6840      	ldr	r0, [r0, #4]
   b5e04:	2200      	movs	r2, #0
   b5e06:	2102      	movs	r1, #2
   b5e08:	f7fe bee6 	b.w	b4bd8 <network_disconnect>

000b5e0c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5e0c:	2200      	movs	r2, #0
   b5e0e:	6840      	ldr	r0, [r0, #4]
   b5e10:	4611      	mov	r1, r2
   b5e12:	f7fe bed9 	b.w	b4bc8 <network_connecting>

000b5e16 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5e16:	2200      	movs	r2, #0
   b5e18:	6840      	ldr	r0, [r0, #4]
   b5e1a:	4611      	mov	r1, r2
   b5e1c:	f7fe bee4 	b.w	b4be8 <network_ready>

000b5e20 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5e20:	2300      	movs	r3, #0
   b5e22:	6840      	ldr	r0, [r0, #4]
   b5e24:	461a      	mov	r2, r3
   b5e26:	4619      	mov	r1, r3
   b5e28:	f7fe bee6 	b.w	b4bf8 <network_on>

000b5e2c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5e2c:	2300      	movs	r3, #0
   b5e2e:	6840      	ldr	r0, [r0, #4]
   b5e30:	461a      	mov	r2, r3
   b5e32:	4619      	mov	r1, r3
   b5e34:	f7fe bee8 	b.w	b4c08 <network_off>

000b5e38 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5e38:	6840      	ldr	r0, [r0, #4]
   b5e3a:	2100      	movs	r1, #0
   b5e3c:	f7fe bf0c 	b.w	b4c58 <network_is_on>

000b5e40 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5e40:	6840      	ldr	r0, [r0, #4]
   b5e42:	2100      	movs	r1, #0
   b5e44:	f7fe bf10 	b.w	b4c68 <network_is_off>

000b5e48 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5e48:	6840      	ldr	r0, [r0, #4]
   b5e4a:	2200      	movs	r2, #0
   b5e4c:	f081 0101 	eor.w	r1, r1, #1
   b5e50:	f7fe bee2 	b.w	b4c18 <network_listen>

000b5e54 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5e54:	6840      	ldr	r0, [r0, #4]
   b5e56:	2200      	movs	r2, #0
   b5e58:	f7fe beee 	b.w	b4c38 <network_set_listen_timeout>

000b5e5c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5e5c:	2200      	movs	r2, #0
   b5e5e:	6840      	ldr	r0, [r0, #4]
   b5e60:	4611      	mov	r1, r2
   b5e62:	f7fe bef1 	b.w	b4c48 <network_get_listen_timeout>

000b5e66 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5e66:	2200      	movs	r2, #0
   b5e68:	6840      	ldr	r0, [r0, #4]
   b5e6a:	4611      	mov	r1, r2
   b5e6c:	f7fe bedc 	b.w	b4c28 <network_listening>

000b5e70 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e74:	b095      	sub	sp, #84	; 0x54
   b5e76:	4614      	mov	r4, r2
   b5e78:	460d      	mov	r5, r1
   b5e7a:	4607      	mov	r7, r0
    IPAddress addr;
   b5e7c:	f7ff fd78 	bl	b5970 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5e80:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5e82:	221c      	movs	r2, #28
   b5e84:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5e86:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5e88:	f002 f848 	bl	b7f1c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5e8c:	2340      	movs	r3, #64	; 0x40
   b5e8e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5e90:	4620      	mov	r0, r4
   b5e92:	466b      	mov	r3, sp
   b5e94:	aa0c      	add	r2, sp, #48	; 0x30
   b5e96:	2100      	movs	r1, #0
   b5e98:	f7fe fd0a 	bl	b48b0 <netdb_getaddrinfo>
    if (!r) {
   b5e9c:	4604      	mov	r4, r0
   b5e9e:	2800      	cmp	r0, #0
   b5ea0:	d14b      	bne.n	b5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5ea2:	4602      	mov	r2, r0
   b5ea4:	2101      	movs	r1, #1
   b5ea6:	6868      	ldr	r0, [r5, #4]
   b5ea8:	f7fe fe9e 	bl	b4be8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5eac:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5eae:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5eb0:	4622      	mov	r2, r4
   b5eb2:	6868      	ldr	r0, [r5, #4]
   b5eb4:	f7fe fe98 	bl	b4be8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5eb8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5eba:	4681      	mov	r9, r0
        bool ok = false;
   b5ebc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5ebe:	2e00      	cmp	r6, #0
   b5ec0:	d03b      	beq.n	b5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5ec2:	2900      	cmp	r1, #0
   b5ec4:	d139      	bne.n	b5f3a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5ec6:	6873      	ldr	r3, [r6, #4]
   b5ec8:	2b02      	cmp	r3, #2
   b5eca:	d003      	beq.n	b5ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5ecc:	2b0a      	cmp	r3, #10
   b5ece:	d011      	beq.n	b5ef4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5ed0:	69f6      	ldr	r6, [r6, #28]
   b5ed2:	e7f4      	b.n	b5ebe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5ed4:	f1b8 0f00 	cmp.w	r8, #0
   b5ed8:	d0fa      	beq.n	b5ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5eda:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5edc:	a806      	add	r0, sp, #24
   b5ede:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5ee0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5ee2:	f7ff fd73 	bl	b59cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5ee8:	1d3c      	adds	r4, r7, #4
   b5eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5eec:	682b      	ldr	r3, [r5, #0]
   b5eee:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5ef0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5ef2:	e7ed      	b.n	b5ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5ef4:	f1b9 0f00 	cmp.w	r9, #0
   b5ef8:	d0ea      	beq.n	b5ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5efa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5efc:	2210      	movs	r2, #16
   b5efe:	a801      	add	r0, sp, #4
   b5f00:	f002 f80c 	bl	b7f1c <memset>
                    a.v = 6;
   b5f04:	2306      	movs	r3, #6
   b5f06:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5f0a:	ad01      	add	r5, sp, #4
   b5f0c:	f104 0308 	add.w	r3, r4, #8
   b5f10:	3418      	adds	r4, #24
   b5f12:	6818      	ldr	r0, [r3, #0]
   b5f14:	6859      	ldr	r1, [r3, #4]
   b5f16:	462a      	mov	r2, r5
   b5f18:	c203      	stmia	r2!, {r0, r1}
   b5f1a:	3308      	adds	r3, #8
   b5f1c:	42a3      	cmp	r3, r4
   b5f1e:	4615      	mov	r5, r2
   b5f20:	d1f7      	bne.n	b5f12 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5f22:	a901      	add	r1, sp, #4
   b5f24:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5f26:	ad07      	add	r5, sp, #28
   b5f28:	f7ff fd30 	bl	b598c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5f2e:	1d3c      	adds	r4, r7, #4
   b5f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5f32:	682b      	ldr	r3, [r5, #0]
   b5f34:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5f36:	4649      	mov	r1, r9
   b5f38:	e7ca      	b.n	b5ed0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5f3a:	9800      	ldr	r0, [sp, #0]
   b5f3c:	f7fe fcb0 	bl	b48a0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5f40:	4638      	mov	r0, r7
   b5f42:	b015      	add	sp, #84	; 0x54
   b5f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5f48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5f48:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5f4a:	4a03      	ldr	r2, [pc, #12]	; (b5f58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5f4c:	601a      	str	r2, [r3, #0]
   b5f4e:	2200      	movs	r2, #0
   b5f50:	605a      	str	r2, [r3, #4]

} // spark
   b5f52:	4770      	bx	lr
   b5f54:	2003e7b8 	.word	0x2003e7b8
   b5f58:	000b8268 	.word	0x000b8268

000b5f5c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5f5c:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b5f5e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5f60:	d902      	bls.n	b5f68 <pinAvailable+0xc>
    return false;
   b5f62:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5f64:	b002      	add	sp, #8
   b5f66:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5f68:	f1a0 030b 	sub.w	r3, r0, #11
   b5f6c:	2b02      	cmp	r3, #2
   b5f6e:	d81a      	bhi.n	b5fa6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f70:	4c17      	ldr	r4, [pc, #92]	; (b5fd0 <pinAvailable+0x74>)
   b5f72:	7821      	ldrb	r1, [r4, #0]
   b5f74:	f3bf 8f5b 	dmb	ish
   b5f78:	f011 0101 	ands.w	r1, r1, #1
   b5f7c:	d10b      	bne.n	b5f96 <pinAvailable+0x3a>
   b5f7e:	4620      	mov	r0, r4
   b5f80:	9101      	str	r1, [sp, #4]
   b5f82:	f7fe f88e 	bl	b40a2 <__cxa_guard_acquire>
   b5f86:	9901      	ldr	r1, [sp, #4]
   b5f88:	b128      	cbz	r0, b5f96 <pinAvailable+0x3a>
   b5f8a:	4812      	ldr	r0, [pc, #72]	; (b5fd4 <pinAvailable+0x78>)
   b5f8c:	f7fe ff12 	bl	b4db4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f90:	4620      	mov	r0, r4
   b5f92:	f7fe f88b 	bl	b40ac <__cxa_guard_release>
   b5f96:	4b0f      	ldr	r3, [pc, #60]	; (b5fd4 <pinAvailable+0x78>)
   b5f98:	7818      	ldrb	r0, [r3, #0]
   b5f9a:	f7fe fd91 	bl	b4ac0 <hal_spi_is_enabled>
   b5f9e:	2800      	cmp	r0, #0
   b5fa0:	d1df      	bne.n	b5f62 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5fa2:	2001      	movs	r0, #1
   b5fa4:	e7de      	b.n	b5f64 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5fa6:	2801      	cmp	r0, #1
   b5fa8:	d809      	bhi.n	b5fbe <pinAvailable+0x62>
   b5faa:	f000 f865 	bl	b6078 <_Z19__fetch_global_Wirev>
   b5fae:	2100      	movs	r1, #0
   b5fb0:	7c00      	ldrb	r0, [r0, #16]
   b5fb2:	f7fe fd65 	bl	b4a80 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5fb6:	f080 0001 	eor.w	r0, r0, #1
   b5fba:	b2c0      	uxtb	r0, r0
   b5fbc:	e7d2      	b.n	b5f64 <pinAvailable+0x8>
   b5fbe:	3809      	subs	r0, #9
   b5fc0:	2801      	cmp	r0, #1
   b5fc2:	d8ee      	bhi.n	b5fa2 <pinAvailable+0x46>
   b5fc4:	f7ff fe42 	bl	b5c4c <_Z22__fetch_global_Serial1v>
   b5fc8:	7c00      	ldrb	r0, [r0, #16]
   b5fca:	f7fe fd01 	bl	b49d0 <hal_usart_is_enabled>
   b5fce:	e7f2      	b.n	b5fb6 <pinAvailable+0x5a>
   b5fd0:	2003e7c0 	.word	0x2003e7c0
   b5fd4:	2003e7c4 	.word	0x2003e7c4

000b5fd8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fd8:	2825      	cmp	r0, #37	; 0x25
{
   b5fda:	b538      	push	{r3, r4, r5, lr}
   b5fdc:	4604      	mov	r4, r0
   b5fde:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5fe0:	d80a      	bhi.n	b5ff8 <pinMode+0x20>
   b5fe2:	29ff      	cmp	r1, #255	; 0xff
   b5fe4:	d008      	beq.n	b5ff8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5fe6:	f7ff ffb9 	bl	b5f5c <pinAvailable>
   b5fea:	b128      	cbz	r0, b5ff8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5fec:	4629      	mov	r1, r5
   b5fee:	4620      	mov	r0, r4
}
   b5ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5ff4:	f7fe bc64 	b.w	b48c0 <HAL_Pin_Mode>
}
   b5ff8:	bd38      	pop	{r3, r4, r5, pc}

000b5ffa <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b5ffa:	b510      	push	{r4, lr}
   b5ffc:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5ffe:	f7fe fc67 	bl	b48d0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6002:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6004:	b2db      	uxtb	r3, r3
   b6006:	2b01      	cmp	r3, #1
   b6008:	d908      	bls.n	b601c <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b600a:	4620      	mov	r0, r4
   b600c:	f7ff ffa6 	bl	b5f5c <pinAvailable>
   b6010:	b120      	cbz	r0, b601c <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6012:	4620      	mov	r0, r4
}
   b6014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6018:	f7fe bc62 	b.w	b48e0 <HAL_GPIO_Read>
}
   b601c:	2000      	movs	r0, #0
   b601e:	bd10      	pop	{r4, pc}

000b6020 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   b6020:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   b6022:	4c08      	ldr	r4, [pc, #32]	; (b6044 <_Z21__fetch_global_EEPROMv+0x24>)
   b6024:	7823      	ldrb	r3, [r4, #0]
   b6026:	f3bf 8f5b 	dmb	ish
   b602a:	07db      	lsls	r3, r3, #31
   b602c:	d408      	bmi.n	b6040 <_Z21__fetch_global_EEPROMv+0x20>
   b602e:	4620      	mov	r0, r4
   b6030:	f7fe f837 	bl	b40a2 <__cxa_guard_acquire>
   b6034:	b120      	cbz	r0, b6040 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   b6036:	f7fe fc6b 	bl	b4910 <HAL_EEPROM_Init>
   b603a:	4620      	mov	r0, r4
   b603c:	f7fe f836 	bl	b40ac <__cxa_guard_release>
	return eeprom;
}
   b6040:	4801      	ldr	r0, [pc, #4]	; (b6048 <_Z21__fetch_global_EEPROMv+0x28>)
   b6042:	bd10      	pop	{r4, pc}
   b6044:	2003e7d0 	.word	0x2003e7d0
   b6048:	2003e7d4 	.word	0x2003e7d4

000b604c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b604c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b604e:	2520      	movs	r5, #32
   b6050:	2314      	movs	r3, #20
{
   b6052:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6054:	6003      	str	r3, [r0, #0]
   b6056:	6085      	str	r5, [r0, #8]
   b6058:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b605a:	4906      	ldr	r1, [pc, #24]	; (b6074 <_Z17acquireWireBufferv+0x28>)
   b605c:	4628      	mov	r0, r5
   b605e:	f000 f83a 	bl	b60d6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6062:	4904      	ldr	r1, [pc, #16]	; (b6074 <_Z17acquireWireBufferv+0x28>)
	};
   b6064:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6066:	4628      	mov	r0, r5
   b6068:	f000 f835 	bl	b60d6 <_ZnajRKSt9nothrow_t>
	};
   b606c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b606e:	4620      	mov	r0, r4
   b6070:	bd38      	pop	{r3, r4, r5, pc}
   b6072:	bf00      	nop
   b6074:	000b829c 	.word	0x000b829c

000b6078 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b6078:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b607a:	4d0f      	ldr	r5, [pc, #60]	; (b60b8 <_Z19__fetch_global_Wirev+0x40>)
   b607c:	7829      	ldrb	r1, [r5, #0]
   b607e:	f3bf 8f5b 	dmb	ish
   b6082:	f011 0401 	ands.w	r4, r1, #1
{
   b6086:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6088:	d113      	bne.n	b60b2 <_Z19__fetch_global_Wirev+0x3a>
   b608a:	4628      	mov	r0, r5
   b608c:	f7fe f809 	bl	b40a2 <__cxa_guard_acquire>
   b6090:	b178      	cbz	r0, b60b2 <_Z19__fetch_global_Wirev+0x3a>
   b6092:	a801      	add	r0, sp, #4
   b6094:	f7ff ffda 	bl	b604c <_Z17acquireWireBufferv>
   b6098:	aa01      	add	r2, sp, #4
   b609a:	4621      	mov	r1, r4
   b609c:	4807      	ldr	r0, [pc, #28]	; (b60bc <_Z19__fetch_global_Wirev+0x44>)
   b609e:	f7ff fe59 	bl	b5d54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b60a2:	4628      	mov	r0, r5
   b60a4:	f7fe f802 	bl	b40ac <__cxa_guard_release>
   b60a8:	4a05      	ldr	r2, [pc, #20]	; (b60c0 <_Z19__fetch_global_Wirev+0x48>)
   b60aa:	4906      	ldr	r1, [pc, #24]	; (b60c4 <_Z19__fetch_global_Wirev+0x4c>)
   b60ac:	4803      	ldr	r0, [pc, #12]	; (b60bc <_Z19__fetch_global_Wirev+0x44>)
   b60ae:	f000 f80b 	bl	b60c8 <__aeabi_atexit>
	return wire;
}
   b60b2:	4802      	ldr	r0, [pc, #8]	; (b60bc <_Z19__fetch_global_Wirev+0x44>)
   b60b4:	b007      	add	sp, #28
   b60b6:	bd30      	pop	{r4, r5, pc}
   b60b8:	2003e7d8 	.word	0x2003e7d8
   b60bc:	2003e7dc 	.word	0x2003e7dc
   b60c0:	2003e69c 	.word	0x2003e69c
   b60c4:	000b5cfd 	.word	0x000b5cfd

000b60c8 <__aeabi_atexit>:
   b60c8:	460b      	mov	r3, r1
   b60ca:	4601      	mov	r1, r0
   b60cc:	4618      	mov	r0, r3
   b60ce:	f001 bf09 	b.w	b7ee4 <__cxa_atexit>

000b60d2 <_ZdlPvj>:
   b60d2:	f7fd bfe4 	b.w	b409e <_ZdlPv>

000b60d6 <_ZnajRKSt9nothrow_t>:
   b60d6:	f7fd bfe0 	b.w	b409a <_Znaj>

000b60da <_ZSt25__throw_bad_function_callv>:
   b60da:	b508      	push	{r3, lr}
   b60dc:	f7fe fe04 	bl	b4ce8 <abort>

000b60e0 <pow>:
   b60e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b60e2:	ed2d 8b02 	vpush	{d8}
   b60e6:	ec57 6b10 	vmov	r6, r7, d0
   b60ea:	ec55 4b11 	vmov	r4, r5, d1
   b60ee:	f000 f8cb 	bl	b6288 <__ieee754_pow>
   b60f2:	4b63      	ldr	r3, [pc, #396]	; (b6280 <pow+0x1a0>)
   b60f4:	eeb0 8a40 	vmov.f32	s16, s0
   b60f8:	eef0 8a60 	vmov.f32	s17, s1
   b60fc:	f993 3000 	ldrsb.w	r3, [r3]
   b6100:	3301      	adds	r3, #1
   b6102:	d02a      	beq.n	b615a <pow+0x7a>
   b6104:	4622      	mov	r2, r4
   b6106:	462b      	mov	r3, r5
   b6108:	4620      	mov	r0, r4
   b610a:	4629      	mov	r1, r5
   b610c:	f001 fcc4 	bl	b7a98 <__aeabi_dcmpun>
   b6110:	bb18      	cbnz	r0, b615a <pow+0x7a>
   b6112:	4632      	mov	r2, r6
   b6114:	463b      	mov	r3, r7
   b6116:	4630      	mov	r0, r6
   b6118:	4639      	mov	r1, r7
   b611a:	f001 fcbd 	bl	b7a98 <__aeabi_dcmpun>
   b611e:	2800      	cmp	r0, #0
   b6120:	d144      	bne.n	b61ac <pow+0xcc>
   b6122:	2200      	movs	r2, #0
   b6124:	2300      	movs	r3, #0
   b6126:	4630      	mov	r0, r6
   b6128:	4639      	mov	r1, r7
   b612a:	f001 fc83 	bl	b7a34 <__aeabi_dcmpeq>
   b612e:	b1d8      	cbz	r0, b6168 <pow+0x88>
   b6130:	2200      	movs	r2, #0
   b6132:	2300      	movs	r3, #0
   b6134:	4620      	mov	r0, r4
   b6136:	4629      	mov	r1, r5
   b6138:	f001 fc7c 	bl	b7a34 <__aeabi_dcmpeq>
   b613c:	2800      	cmp	r0, #0
   b613e:	d13d      	bne.n	b61bc <pow+0xdc>
   b6140:	ec45 4b10 	vmov	d0, r4, r5
   b6144:	f000 ff10 	bl	b6f68 <finite>
   b6148:	b138      	cbz	r0, b615a <pow+0x7a>
   b614a:	4620      	mov	r0, r4
   b614c:	4629      	mov	r1, r5
   b614e:	2200      	movs	r2, #0
   b6150:	2300      	movs	r3, #0
   b6152:	f001 fc79 	bl	b7a48 <__aeabi_dcmplt>
   b6156:	2800      	cmp	r0, #0
   b6158:	d15c      	bne.n	b6214 <pow+0x134>
   b615a:	eeb0 0a48 	vmov.f32	s0, s16
   b615e:	eef0 0a68 	vmov.f32	s1, s17
   b6162:	ecbd 8b02 	vpop	{d8}
   b6166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6168:	eeb0 0a48 	vmov.f32	s0, s16
   b616c:	eef0 0a68 	vmov.f32	s1, s17
   b6170:	f000 fefa 	bl	b6f68 <finite>
   b6174:	b358      	cbz	r0, b61ce <pow+0xee>
   b6176:	ec51 0b18 	vmov	r0, r1, d8
   b617a:	2200      	movs	r2, #0
   b617c:	2300      	movs	r3, #0
   b617e:	f001 fc59 	bl	b7a34 <__aeabi_dcmpeq>
   b6182:	2800      	cmp	r0, #0
   b6184:	d0e9      	beq.n	b615a <pow+0x7a>
   b6186:	ec47 6b10 	vmov	d0, r6, r7
   b618a:	f000 feed 	bl	b6f68 <finite>
   b618e:	2800      	cmp	r0, #0
   b6190:	d0e3      	beq.n	b615a <pow+0x7a>
   b6192:	ec45 4b10 	vmov	d0, r4, r5
   b6196:	f000 fee7 	bl	b6f68 <finite>
   b619a:	2800      	cmp	r0, #0
   b619c:	d0dd      	beq.n	b615a <pow+0x7a>
   b619e:	f7fe fdb3 	bl	b4d08 <__errno>
   b61a2:	2322      	movs	r3, #34	; 0x22
   b61a4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; b6260 <pow+0x180>
   b61a8:	6003      	str	r3, [r0, #0]
   b61aa:	e7d6      	b.n	b615a <pow+0x7a>
   b61ac:	4620      	mov	r0, r4
   b61ae:	4629      	mov	r1, r5
   b61b0:	2200      	movs	r2, #0
   b61b2:	2300      	movs	r3, #0
   b61b4:	f001 fc3e 	bl	b7a34 <__aeabi_dcmpeq>
   b61b8:	2800      	cmp	r0, #0
   b61ba:	d0ce      	beq.n	b615a <pow+0x7a>
   b61bc:	ed9f 8b2a 	vldr	d8, [pc, #168]	; b6268 <pow+0x188>
   b61c0:	eeb0 0a48 	vmov.f32	s0, s16
   b61c4:	eef0 0a68 	vmov.f32	s1, s17
   b61c8:	ecbd 8b02 	vpop	{d8}
   b61cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b61ce:	ec47 6b10 	vmov	d0, r6, r7
   b61d2:	f000 fec9 	bl	b6f68 <finite>
   b61d6:	2800      	cmp	r0, #0
   b61d8:	d0cd      	beq.n	b6176 <pow+0x96>
   b61da:	ec45 4b10 	vmov	d0, r4, r5
   b61de:	f000 fec3 	bl	b6f68 <finite>
   b61e2:	2800      	cmp	r0, #0
   b61e4:	d0c7      	beq.n	b6176 <pow+0x96>
   b61e6:	ec53 2b18 	vmov	r2, r3, d8
   b61ea:	ee18 0a10 	vmov	r0, s16
   b61ee:	4619      	mov	r1, r3
   b61f0:	f001 fc52 	bl	b7a98 <__aeabi_dcmpun>
   b61f4:	bb20      	cbnz	r0, b6240 <pow+0x160>
   b61f6:	f7fe fd87 	bl	b4d08 <__errno>
   b61fa:	4603      	mov	r3, r0
   b61fc:	2222      	movs	r2, #34	; 0x22
   b61fe:	601a      	str	r2, [r3, #0]
   b6200:	4630      	mov	r0, r6
   b6202:	4639      	mov	r1, r7
   b6204:	2200      	movs	r2, #0
   b6206:	2300      	movs	r3, #0
   b6208:	f001 fc1e 	bl	b7a48 <__aeabi_dcmplt>
   b620c:	b948      	cbnz	r0, b6222 <pow+0x142>
   b620e:	ed9f 8b18 	vldr	d8, [pc, #96]	; b6270 <pow+0x190>
   b6212:	e7a2      	b.n	b615a <pow+0x7a>
   b6214:	f7fe fd78 	bl	b4d08 <__errno>
   b6218:	2321      	movs	r3, #33	; 0x21
   b621a:	ed9f 8b17 	vldr	d8, [pc, #92]	; b6278 <pow+0x198>
   b621e:	6003      	str	r3, [r0, #0]
   b6220:	e79b      	b.n	b615a <pow+0x7a>
   b6222:	ec45 4b10 	vmov	d0, r4, r5
   b6226:	f000 feb3 	bl	b6f90 <rint>
   b622a:	4622      	mov	r2, r4
   b622c:	ec51 0b10 	vmov	r0, r1, d0
   b6230:	462b      	mov	r3, r5
   b6232:	f001 fbff 	bl	b7a34 <__aeabi_dcmpeq>
   b6236:	2800      	cmp	r0, #0
   b6238:	d1e9      	bne.n	b620e <pow+0x12e>
   b623a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; b6278 <pow+0x198>
   b623e:	e78c      	b.n	b615a <pow+0x7a>
   b6240:	f7fe fd62 	bl	b4d08 <__errno>
   b6244:	2200      	movs	r2, #0
   b6246:	2300      	movs	r3, #0
   b6248:	2121      	movs	r1, #33	; 0x21
   b624a:	6001      	str	r1, [r0, #0]
   b624c:	4610      	mov	r0, r2
   b624e:	4619      	mov	r1, r3
   b6250:	f001 fab2 	bl	b77b8 <__aeabi_ddiv>
   b6254:	ec41 0b18 	vmov	d8, r0, r1
   b6258:	e77f      	b.n	b615a <pow+0x7a>
   b625a:	bf00      	nop
   b625c:	f3af 8000 	nop.w
	...
   b626c:	3ff00000 	.word	0x3ff00000
   b6270:	00000000 	.word	0x00000000
   b6274:	7ff00000 	.word	0x7ff00000
   b6278:	00000000 	.word	0x00000000
   b627c:	fff00000 	.word	0xfff00000
   b6280:	2003e634 	.word	0x2003e634
   b6284:	00000000 	.word	0x00000000

000b6288 <__ieee754_pow>:
   b6288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b628c:	ec57 6b11 	vmov	r6, r7, d1
   b6290:	ed2d 8b0c 	vpush	{d8-d13}
   b6294:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   b6298:	ea5a 0206 	orrs.w	r2, sl, r6
   b629c:	b087      	sub	sp, #28
   b629e:	d03d      	beq.n	b631c <__ieee754_pow+0x94>
   b62a0:	ec55 4b10 	vmov	r4, r5, d0
   b62a4:	4972      	ldr	r1, [pc, #456]	; (b6470 <__ieee754_pow+0x1e8>)
   b62a6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   b62aa:	4588      	cmp	r8, r1
   b62ac:	ee10 2a10 	vmov	r2, s0
   b62b0:	46a9      	mov	r9, r5
   b62b2:	dc2c      	bgt.n	b630e <__ieee754_pow+0x86>
   b62b4:	ee11 3a10 	vmov	r3, s2
   b62b8:	46bb      	mov	fp, r7
   b62ba:	d036      	beq.n	b632a <__ieee754_pow+0xa2>
   b62bc:	458a      	cmp	sl, r1
   b62be:	dc26      	bgt.n	b630e <__ieee754_pow+0x86>
   b62c0:	496b      	ldr	r1, [pc, #428]	; (b6470 <__ieee754_pow+0x1e8>)
   b62c2:	458a      	cmp	sl, r1
   b62c4:	d021      	beq.n	b630a <__ieee754_pow+0x82>
   b62c6:	f1b9 0f00 	cmp.w	r9, #0
   b62ca:	db39      	blt.n	b6340 <__ieee754_pow+0xb8>
   b62cc:	2100      	movs	r1, #0
   b62ce:	9100      	str	r1, [sp, #0]
   b62d0:	2b00      	cmp	r3, #0
   b62d2:	d151      	bne.n	b6378 <__ieee754_pow+0xf0>
   b62d4:	4b66      	ldr	r3, [pc, #408]	; (b6470 <__ieee754_pow+0x1e8>)
   b62d6:	459a      	cmp	sl, r3
   b62d8:	f000 80a2 	beq.w	b6420 <__ieee754_pow+0x198>
   b62dc:	4b65      	ldr	r3, [pc, #404]	; (b6474 <__ieee754_pow+0x1ec>)
   b62de:	459a      	cmp	sl, r3
   b62e0:	f000 80b0 	beq.w	b6444 <__ieee754_pow+0x1bc>
   b62e4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   b62e8:	f000 84c0 	beq.w	b6c6c <__ieee754_pow+0x9e4>
   b62ec:	4b62      	ldr	r3, [pc, #392]	; (b6478 <__ieee754_pow+0x1f0>)
   b62ee:	459b      	cmp	fp, r3
   b62f0:	d142      	bne.n	b6378 <__ieee754_pow+0xf0>
   b62f2:	f1b9 0f00 	cmp.w	r9, #0
   b62f6:	db3f      	blt.n	b6378 <__ieee754_pow+0xf0>
   b62f8:	ec45 4b10 	vmov	d0, r4, r5
   b62fc:	b007      	add	sp, #28
   b62fe:	ecbd 8b0c 	vpop	{d8-d13}
   b6302:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6306:	f000 bd59 	b.w	b6dbc <__ieee754_sqrt>
   b630a:	2b00      	cmp	r3, #0
   b630c:	d0db      	beq.n	b62c6 <__ieee754_pow+0x3e>
   b630e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b6312:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b6316:	ea58 0302 	orrs.w	r3, r8, r2
   b631a:	d109      	bne.n	b6330 <__ieee754_pow+0xa8>
   b631c:	ed9f 0b50 	vldr	d0, [pc, #320]	; b6460 <__ieee754_pow+0x1d8>
   b6320:	b007      	add	sp, #28
   b6322:	ecbd 8b0c 	vpop	{d8-d13}
   b6326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b632a:	b90c      	cbnz	r4, b6330 <__ieee754_pow+0xa8>
   b632c:	45c2      	cmp	sl, r8
   b632e:	ddc7      	ble.n	b62c0 <__ieee754_pow+0x38>
   b6330:	4852      	ldr	r0, [pc, #328]	; (b647c <__ieee754_pow+0x1f4>)
   b6332:	b007      	add	sp, #28
   b6334:	ecbd 8b0c 	vpop	{d8-d13}
   b6338:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b633c:	f000 be20 	b.w	b6f80 <nan>
   b6340:	494f      	ldr	r1, [pc, #316]	; (b6480 <__ieee754_pow+0x1f8>)
   b6342:	458a      	cmp	sl, r1
   b6344:	f300 8085 	bgt.w	b6452 <__ieee754_pow+0x1ca>
   b6348:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   b634c:	458a      	cmp	sl, r1
   b634e:	dd0f      	ble.n	b6370 <__ieee754_pow+0xe8>
   b6350:	ea4f 512a 	mov.w	r1, sl, asr #20
   b6354:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   b6358:	2914      	cmp	r1, #20
   b635a:	f340 849b 	ble.w	b6c94 <__ieee754_pow+0xa0c>
   b635e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   b6362:	fa23 f001 	lsr.w	r0, r3, r1
   b6366:	fa00 f101 	lsl.w	r1, r0, r1
   b636a:	4299      	cmp	r1, r3
   b636c:	f000 84ed 	beq.w	b6d4a <__ieee754_pow+0xac2>
   b6370:	2100      	movs	r1, #0
   b6372:	9100      	str	r1, [sp, #0]
   b6374:	2b00      	cmp	r3, #0
   b6376:	d0b1      	beq.n	b62dc <__ieee754_pow+0x54>
   b6378:	ec45 4b10 	vmov	d0, r4, r5
   b637c:	9202      	str	r2, [sp, #8]
   b637e:	f000 fde9 	bl	b6f54 <fabs>
   b6382:	9a02      	ldr	r2, [sp, #8]
   b6384:	bb5a      	cbnz	r2, b63de <__ieee754_pow+0x156>
   b6386:	f1b8 0f00 	cmp.w	r8, #0
   b638a:	d004      	beq.n	b6396 <__ieee754_pow+0x10e>
   b638c:	4b39      	ldr	r3, [pc, #228]	; (b6474 <__ieee754_pow+0x1ec>)
   b638e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   b6392:	429a      	cmp	r2, r3
   b6394:	d123      	bne.n	b63de <__ieee754_pow+0x156>
   b6396:	f1bb 0f00 	cmp.w	fp, #0
   b639a:	da07      	bge.n	b63ac <__ieee754_pow+0x124>
   b639c:	ec53 2b10 	vmov	r2, r3, d0
   b63a0:	4934      	ldr	r1, [pc, #208]	; (b6474 <__ieee754_pow+0x1ec>)
   b63a2:	2000      	movs	r0, #0
   b63a4:	f001 fa08 	bl	b77b8 <__aeabi_ddiv>
   b63a8:	ec41 0b10 	vmov	d0, r0, r1
   b63ac:	f1b9 0f00 	cmp.w	r9, #0
   b63b0:	dab6      	bge.n	b6320 <__ieee754_pow+0x98>
   b63b2:	9b00      	ldr	r3, [sp, #0]
   b63b4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   b63b8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   b63bc:	ea58 0303 	orrs.w	r3, r8, r3
   b63c0:	f040 848d 	bne.w	b6cde <__ieee754_pow+0xa56>
   b63c4:	ec53 2b10 	vmov	r2, r3, d0
   b63c8:	4610      	mov	r0, r2
   b63ca:	4619      	mov	r1, r3
   b63cc:	f000 ff12 	bl	b71f4 <__aeabi_dsub>
   b63d0:	4602      	mov	r2, r0
   b63d2:	460b      	mov	r3, r1
   b63d4:	f001 f9f0 	bl	b77b8 <__aeabi_ddiv>
   b63d8:	ec41 0b10 	vmov	d0, r0, r1
   b63dc:	e7a0      	b.n	b6320 <__ieee754_pow+0x98>
   b63de:	9a00      	ldr	r2, [sp, #0]
   b63e0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   b63e4:	3b01      	subs	r3, #1
   b63e6:	9304      	str	r3, [sp, #16]
   b63e8:	4313      	orrs	r3, r2
   b63ea:	d035      	beq.n	b6458 <__ieee754_pow+0x1d0>
   b63ec:	4b25      	ldr	r3, [pc, #148]	; (b6484 <__ieee754_pow+0x1fc>)
   b63ee:	459a      	cmp	sl, r3
   b63f0:	dd4c      	ble.n	b648c <__ieee754_pow+0x204>
   b63f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   b63f6:	459a      	cmp	sl, r3
   b63f8:	4b23      	ldr	r3, [pc, #140]	; (b6488 <__ieee754_pow+0x200>)
   b63fa:	f340 83db 	ble.w	b6bb4 <__ieee754_pow+0x92c>
   b63fe:	4598      	cmp	r8, r3
   b6400:	f340 8360 	ble.w	b6ac4 <__ieee754_pow+0x83c>
   b6404:	f1bb 0f00 	cmp.w	fp, #0
   b6408:	f340 8360 	ble.w	b6acc <__ieee754_pow+0x844>
   b640c:	a316      	add	r3, pc, #88	; (adr r3, b6468 <__ieee754_pow+0x1e0>)
   b640e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6412:	4610      	mov	r0, r2
   b6414:	4619      	mov	r1, r3
   b6416:	f001 f8a5 	bl	b7564 <__aeabi_dmul>
   b641a:	ec41 0b10 	vmov	d0, r0, r1
   b641e:	e77f      	b.n	b6320 <__ieee754_pow+0x98>
   b6420:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   b6424:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   b6428:	4313      	orrs	r3, r2
   b642a:	f43f af77 	beq.w	b631c <__ieee754_pow+0x94>
   b642e:	4b16      	ldr	r3, [pc, #88]	; (b6488 <__ieee754_pow+0x200>)
   b6430:	4598      	cmp	r8, r3
   b6432:	f340 837a 	ble.w	b6b2a <__ieee754_pow+0x8a2>
   b6436:	f1bb 0f00 	cmp.w	fp, #0
   b643a:	f2c0 8347 	blt.w	b6acc <__ieee754_pow+0x844>
   b643e:	ec47 6b10 	vmov	d0, r6, r7
   b6442:	e76d      	b.n	b6320 <__ieee754_pow+0x98>
   b6444:	f1bb 0f00 	cmp.w	fp, #0
   b6448:	f2c0 841a 	blt.w	b6c80 <__ieee754_pow+0x9f8>
   b644c:	ec45 4b10 	vmov	d0, r4, r5
   b6450:	e766      	b.n	b6320 <__ieee754_pow+0x98>
   b6452:	2102      	movs	r1, #2
   b6454:	9100      	str	r1, [sp, #0]
   b6456:	e73b      	b.n	b62d0 <__ieee754_pow+0x48>
   b6458:	4622      	mov	r2, r4
   b645a:	462b      	mov	r3, r5
   b645c:	e7b4      	b.n	b63c8 <__ieee754_pow+0x140>
   b645e:	bf00      	nop
   b6460:	00000000 	.word	0x00000000
   b6464:	3ff00000 	.word	0x3ff00000
   b6468:	8800759c 	.word	0x8800759c
   b646c:	7e37e43c 	.word	0x7e37e43c
   b6470:	7ff00000 	.word	0x7ff00000
   b6474:	3ff00000 	.word	0x3ff00000
   b6478:	3fe00000 	.word	0x3fe00000
   b647c:	000b82a0 	.word	0x000b82a0
   b6480:	433fffff 	.word	0x433fffff
   b6484:	41e00000 	.word	0x41e00000
   b6488:	3fefffff 	.word	0x3fefffff
   b648c:	4be4      	ldr	r3, [pc, #912]	; (b6820 <__ieee754_pow+0x598>)
   b648e:	ea09 0303 	and.w	r3, r9, r3
   b6492:	2200      	movs	r2, #0
   b6494:	b953      	cbnz	r3, b64ac <__ieee754_pow+0x224>
   b6496:	ec51 0b10 	vmov	r0, r1, d0
   b649a:	4be2      	ldr	r3, [pc, #904]	; (b6824 <__ieee754_pow+0x59c>)
   b649c:	f001 f862 	bl	b7564 <__aeabi_dmul>
   b64a0:	ec41 0b10 	vmov	d0, r0, r1
   b64a4:	ee10 8a90 	vmov	r8, s1
   b64a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   b64ac:	ea4f 5328 	mov.w	r3, r8, asr #20
   b64b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   b64b4:	189a      	adds	r2, r3, r2
   b64b6:	4bdc      	ldr	r3, [pc, #880]	; (b6828 <__ieee754_pow+0x5a0>)
   b64b8:	9205      	str	r2, [sp, #20]
   b64ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
   b64be:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   b64c2:	4598      	cmp	r8, r3
   b64c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   b64c8:	dd07      	ble.n	b64da <__ieee754_pow+0x252>
   b64ca:	4bd8      	ldr	r3, [pc, #864]	; (b682c <__ieee754_pow+0x5a4>)
   b64cc:	4598      	cmp	r8, r3
   b64ce:	f340 8414 	ble.w	b6cfa <__ieee754_pow+0xa72>
   b64d2:	3201      	adds	r2, #1
   b64d4:	9205      	str	r2, [sp, #20]
   b64d6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   b64da:	ed9f 6bb9 	vldr	d6, [pc, #740]	; b67c0 <__ieee754_pow+0x538>
   b64de:	ed9f 7bba 	vldr	d7, [pc, #744]	; b67c8 <__ieee754_pow+0x540>
   b64e2:	ec53 2b16 	vmov	r2, r3, d6
   b64e6:	eeb0 ca47 	vmov.f32	s24, s14
   b64ea:	eef0 ca67 	vmov.f32	s25, s15
   b64ee:	2500      	movs	r5, #0
   b64f0:	eeb0 da47 	vmov.f32	s26, s14
   b64f4:	eef0 da67 	vmov.f32	s27, s15
   b64f8:	ec5b ab10 	vmov	sl, fp, d0
   b64fc:	46a3      	mov	fp, r4
   b64fe:	4650      	mov	r0, sl
   b6500:	4659      	mov	r1, fp
   b6502:	ec43 2b1a 	vmov	d10, r2, r3
   b6506:	f000 fe75 	bl	b71f4 <__aeabi_dsub>
   b650a:	ec53 2b1a 	vmov	r2, r3, d10
   b650e:	4680      	mov	r8, r0
   b6510:	4689      	mov	r9, r1
   b6512:	4650      	mov	r0, sl
   b6514:	4659      	mov	r1, fp
   b6516:	f000 fe6f 	bl	b71f8 <__adddf3>
   b651a:	4602      	mov	r2, r0
   b651c:	460b      	mov	r3, r1
   b651e:	2000      	movs	r0, #0
   b6520:	49c3      	ldr	r1, [pc, #780]	; (b6830 <__ieee754_pow+0x5a8>)
   b6522:	f001 f949 	bl	b77b8 <__aeabi_ddiv>
   b6526:	ec41 0b1b 	vmov	d11, r0, r1
   b652a:	4640      	mov	r0, r8
   b652c:	ec53 2b1b 	vmov	r2, r3, d11
   b6530:	4649      	mov	r1, r9
   b6532:	f001 f817 	bl	b7564 <__aeabi_dmul>
   b6536:	ec41 0b18 	vmov	d8, r0, r1
   b653a:	460a      	mov	r2, r1
   b653c:	4601      	mov	r1, r0
   b653e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b6542:	2100      	movs	r1, #0
   b6544:	9102      	str	r1, [sp, #8]
   b6546:	1064      	asrs	r4, r4, #1
   b6548:	ec4b ab19 	vmov	d9, sl, fp
   b654c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   b6550:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   b6554:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   b6558:	2000      	movs	r0, #0
   b655a:	1959      	adds	r1, r3, r5
   b655c:	4604      	mov	r4, r0
   b655e:	460d      	mov	r5, r1
   b6560:	4602      	mov	r2, r0
   b6562:	460b      	mov	r3, r1
   b6564:	4650      	mov	r0, sl
   b6566:	4659      	mov	r1, fp
   b6568:	f000 fffc 	bl	b7564 <__aeabi_dmul>
   b656c:	4602      	mov	r2, r0
   b656e:	460b      	mov	r3, r1
   b6570:	4640      	mov	r0, r8
   b6572:	4649      	mov	r1, r9
   b6574:	f000 fe3e 	bl	b71f4 <__aeabi_dsub>
   b6578:	ec53 2b1a 	vmov	r2, r3, d10
   b657c:	4680      	mov	r8, r0
   b657e:	4689      	mov	r9, r1
   b6580:	4620      	mov	r0, r4
   b6582:	4629      	mov	r1, r5
   b6584:	f000 fe36 	bl	b71f4 <__aeabi_dsub>
   b6588:	4602      	mov	r2, r0
   b658a:	460b      	mov	r3, r1
   b658c:	ec51 0b19 	vmov	r0, r1, d9
   b6590:	f000 fe30 	bl	b71f4 <__aeabi_dsub>
   b6594:	4652      	mov	r2, sl
   b6596:	465b      	mov	r3, fp
   b6598:	f000 ffe4 	bl	b7564 <__aeabi_dmul>
   b659c:	4602      	mov	r2, r0
   b659e:	460b      	mov	r3, r1
   b65a0:	4640      	mov	r0, r8
   b65a2:	4649      	mov	r1, r9
   b65a4:	f000 fe26 	bl	b71f4 <__aeabi_dsub>
   b65a8:	ec53 2b1b 	vmov	r2, r3, d11
   b65ac:	f000 ffda 	bl	b7564 <__aeabi_dmul>
   b65b0:	ec53 2b18 	vmov	r2, r3, d8
   b65b4:	ec41 0b19 	vmov	d9, r0, r1
   b65b8:	ec51 0b18 	vmov	r0, r1, d8
   b65bc:	f000 ffd2 	bl	b7564 <__aeabi_dmul>
   b65c0:	a383      	add	r3, pc, #524	; (adr r3, b67d0 <__ieee754_pow+0x548>)
   b65c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65c6:	4604      	mov	r4, r0
   b65c8:	460d      	mov	r5, r1
   b65ca:	f000 ffcb 	bl	b7564 <__aeabi_dmul>
   b65ce:	a382      	add	r3, pc, #520	; (adr r3, b67d8 <__ieee754_pow+0x550>)
   b65d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65d4:	f000 fe10 	bl	b71f8 <__adddf3>
   b65d8:	4622      	mov	r2, r4
   b65da:	462b      	mov	r3, r5
   b65dc:	f000 ffc2 	bl	b7564 <__aeabi_dmul>
   b65e0:	a37f      	add	r3, pc, #508	; (adr r3, b67e0 <__ieee754_pow+0x558>)
   b65e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65e6:	f000 fe07 	bl	b71f8 <__adddf3>
   b65ea:	4622      	mov	r2, r4
   b65ec:	462b      	mov	r3, r5
   b65ee:	f000 ffb9 	bl	b7564 <__aeabi_dmul>
   b65f2:	a37d      	add	r3, pc, #500	; (adr r3, b67e8 <__ieee754_pow+0x560>)
   b65f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b65f8:	f000 fdfe 	bl	b71f8 <__adddf3>
   b65fc:	4622      	mov	r2, r4
   b65fe:	462b      	mov	r3, r5
   b6600:	f000 ffb0 	bl	b7564 <__aeabi_dmul>
   b6604:	a37a      	add	r3, pc, #488	; (adr r3, b67f0 <__ieee754_pow+0x568>)
   b6606:	e9d3 2300 	ldrd	r2, r3, [r3]
   b660a:	f000 fdf5 	bl	b71f8 <__adddf3>
   b660e:	4622      	mov	r2, r4
   b6610:	462b      	mov	r3, r5
   b6612:	f000 ffa7 	bl	b7564 <__aeabi_dmul>
   b6616:	a378      	add	r3, pc, #480	; (adr r3, b67f8 <__ieee754_pow+0x570>)
   b6618:	e9d3 2300 	ldrd	r2, r3, [r3]
   b661c:	f000 fdec 	bl	b71f8 <__adddf3>
   b6620:	4622      	mov	r2, r4
   b6622:	4680      	mov	r8, r0
   b6624:	4689      	mov	r9, r1
   b6626:	462b      	mov	r3, r5
   b6628:	4620      	mov	r0, r4
   b662a:	4629      	mov	r1, r5
   b662c:	f000 ff9a 	bl	b7564 <__aeabi_dmul>
   b6630:	4602      	mov	r2, r0
   b6632:	460b      	mov	r3, r1
   b6634:	4640      	mov	r0, r8
   b6636:	4649      	mov	r1, r9
   b6638:	f000 ff94 	bl	b7564 <__aeabi_dmul>
   b663c:	4652      	mov	r2, sl
   b663e:	4604      	mov	r4, r0
   b6640:	460d      	mov	r5, r1
   b6642:	465b      	mov	r3, fp
   b6644:	ec51 0b18 	vmov	r0, r1, d8
   b6648:	f000 fdd6 	bl	b71f8 <__adddf3>
   b664c:	ec53 2b19 	vmov	r2, r3, d9
   b6650:	f000 ff88 	bl	b7564 <__aeabi_dmul>
   b6654:	4622      	mov	r2, r4
   b6656:	462b      	mov	r3, r5
   b6658:	f000 fdce 	bl	b71f8 <__adddf3>
   b665c:	4652      	mov	r2, sl
   b665e:	4680      	mov	r8, r0
   b6660:	4689      	mov	r9, r1
   b6662:	465b      	mov	r3, fp
   b6664:	4650      	mov	r0, sl
   b6666:	4659      	mov	r1, fp
   b6668:	f000 ff7c 	bl	b7564 <__aeabi_dmul>
   b666c:	4602      	mov	r2, r0
   b666e:	460b      	mov	r3, r1
   b6670:	ec43 2b1a 	vmov	d10, r2, r3
   b6674:	4b6f      	ldr	r3, [pc, #444]	; (b6834 <__ieee754_pow+0x5ac>)
   b6676:	2200      	movs	r2, #0
   b6678:	f000 fdbe 	bl	b71f8 <__adddf3>
   b667c:	4642      	mov	r2, r8
   b667e:	464b      	mov	r3, r9
   b6680:	f000 fdba 	bl	b71f8 <__adddf3>
   b6684:	2400      	movs	r4, #0
   b6686:	460d      	mov	r5, r1
   b6688:	4622      	mov	r2, r4
   b668a:	462b      	mov	r3, r5
   b668c:	4650      	mov	r0, sl
   b668e:	4659      	mov	r1, fp
   b6690:	f000 ff68 	bl	b7564 <__aeabi_dmul>
   b6694:	4b67      	ldr	r3, [pc, #412]	; (b6834 <__ieee754_pow+0x5ac>)
   b6696:	4682      	mov	sl, r0
   b6698:	468b      	mov	fp, r1
   b669a:	2200      	movs	r2, #0
   b669c:	4620      	mov	r0, r4
   b669e:	4629      	mov	r1, r5
   b66a0:	f000 fda8 	bl	b71f4 <__aeabi_dsub>
   b66a4:	ec53 2b1a 	vmov	r2, r3, d10
   b66a8:	f000 fda4 	bl	b71f4 <__aeabi_dsub>
   b66ac:	4602      	mov	r2, r0
   b66ae:	460b      	mov	r3, r1
   b66b0:	4640      	mov	r0, r8
   b66b2:	4649      	mov	r1, r9
   b66b4:	f000 fd9e 	bl	b71f4 <__aeabi_dsub>
   b66b8:	ec53 2b18 	vmov	r2, r3, d8
   b66bc:	f000 ff52 	bl	b7564 <__aeabi_dmul>
   b66c0:	4622      	mov	r2, r4
   b66c2:	462b      	mov	r3, r5
   b66c4:	4604      	mov	r4, r0
   b66c6:	460d      	mov	r5, r1
   b66c8:	ec51 0b19 	vmov	r0, r1, d9
   b66cc:	f000 ff4a 	bl	b7564 <__aeabi_dmul>
   b66d0:	4602      	mov	r2, r0
   b66d2:	460b      	mov	r3, r1
   b66d4:	4620      	mov	r0, r4
   b66d6:	4629      	mov	r1, r5
   b66d8:	f000 fd8e 	bl	b71f8 <__adddf3>
   b66dc:	4680      	mov	r8, r0
   b66de:	4689      	mov	r9, r1
   b66e0:	4642      	mov	r2, r8
   b66e2:	464b      	mov	r3, r9
   b66e4:	4650      	mov	r0, sl
   b66e6:	4659      	mov	r1, fp
   b66e8:	f000 fd86 	bl	b71f8 <__adddf3>
   b66ec:	a344      	add	r3, pc, #272	; (adr r3, b6800 <__ieee754_pow+0x578>)
   b66ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b66f2:	2000      	movs	r0, #0
   b66f4:	4604      	mov	r4, r0
   b66f6:	460d      	mov	r5, r1
   b66f8:	f000 ff34 	bl	b7564 <__aeabi_dmul>
   b66fc:	4652      	mov	r2, sl
   b66fe:	ec41 0b19 	vmov	d9, r0, r1
   b6702:	465b      	mov	r3, fp
   b6704:	4620      	mov	r0, r4
   b6706:	4629      	mov	r1, r5
   b6708:	f000 fd74 	bl	b71f4 <__aeabi_dsub>
   b670c:	4602      	mov	r2, r0
   b670e:	460b      	mov	r3, r1
   b6710:	4640      	mov	r0, r8
   b6712:	4649      	mov	r1, r9
   b6714:	f000 fd6e 	bl	b71f4 <__aeabi_dsub>
   b6718:	a33b      	add	r3, pc, #236	; (adr r3, b6808 <__ieee754_pow+0x580>)
   b671a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b671e:	f000 ff21 	bl	b7564 <__aeabi_dmul>
   b6722:	4602      	mov	r2, r0
   b6724:	460b      	mov	r3, r1
   b6726:	4620      	mov	r0, r4
   b6728:	4629      	mov	r1, r5
   b672a:	4614      	mov	r4, r2
   b672c:	461d      	mov	r5, r3
   b672e:	a338      	add	r3, pc, #224	; (adr r3, b6810 <__ieee754_pow+0x588>)
   b6730:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6734:	f000 ff16 	bl	b7564 <__aeabi_dmul>
   b6738:	4602      	mov	r2, r0
   b673a:	460b      	mov	r3, r1
   b673c:	4620      	mov	r0, r4
   b673e:	4629      	mov	r1, r5
   b6740:	f000 fd5a 	bl	b71f8 <__adddf3>
   b6744:	ec53 2b1d 	vmov	r2, r3, d13
   b6748:	f000 fd56 	bl	b71f8 <__adddf3>
   b674c:	4680      	mov	r8, r0
   b674e:	9805      	ldr	r0, [sp, #20]
   b6750:	4689      	mov	r9, r1
   b6752:	f000 fe9d 	bl	b7490 <__aeabi_i2d>
   b6756:	4642      	mov	r2, r8
   b6758:	4682      	mov	sl, r0
   b675a:	468b      	mov	fp, r1
   b675c:	464b      	mov	r3, r9
   b675e:	ec51 0b19 	vmov	r0, r1, d9
   b6762:	f000 fd49 	bl	b71f8 <__adddf3>
   b6766:	ec53 2b1c 	vmov	r2, r3, d12
   b676a:	f000 fd45 	bl	b71f8 <__adddf3>
   b676e:	4652      	mov	r2, sl
   b6770:	465b      	mov	r3, fp
   b6772:	f000 fd41 	bl	b71f8 <__adddf3>
   b6776:	4652      	mov	r2, sl
   b6778:	465b      	mov	r3, fp
   b677a:	2000      	movs	r0, #0
   b677c:	4604      	mov	r4, r0
   b677e:	460d      	mov	r5, r1
   b6780:	f000 fd38 	bl	b71f4 <__aeabi_dsub>
   b6784:	ec53 2b1c 	vmov	r2, r3, d12
   b6788:	f000 fd34 	bl	b71f4 <__aeabi_dsub>
   b678c:	ec53 2b19 	vmov	r2, r3, d9
   b6790:	f000 fd30 	bl	b71f4 <__aeabi_dsub>
   b6794:	4602      	mov	r2, r0
   b6796:	460b      	mov	r3, r1
   b6798:	4640      	mov	r0, r8
   b679a:	4649      	mov	r1, r9
   b679c:	f000 fd2a 	bl	b71f4 <__aeabi_dsub>
   b67a0:	9b00      	ldr	r3, [sp, #0]
   b67a2:	9a04      	ldr	r2, [sp, #16]
   b67a4:	3b01      	subs	r3, #1
   b67a6:	4313      	orrs	r3, r2
   b67a8:	4682      	mov	sl, r0
   b67aa:	468b      	mov	fp, r1
   b67ac:	f040 81b6 	bne.w	b6b1c <__ieee754_pow+0x894>
   b67b0:	ed9f 7b19 	vldr	d7, [pc, #100]	; b6818 <__ieee754_pow+0x590>
   b67b4:	eeb0 8a47 	vmov.f32	s16, s14
   b67b8:	eef0 8a67 	vmov.f32	s17, s15
   b67bc:	e03c      	b.n	b6838 <__ieee754_pow+0x5b0>
   b67be:	bf00      	nop
   b67c0:	00000000 	.word	0x00000000
   b67c4:	3ff00000 	.word	0x3ff00000
	...
   b67d0:	4a454eef 	.word	0x4a454eef
   b67d4:	3fca7e28 	.word	0x3fca7e28
   b67d8:	93c9db65 	.word	0x93c9db65
   b67dc:	3fcd864a 	.word	0x3fcd864a
   b67e0:	a91d4101 	.word	0xa91d4101
   b67e4:	3fd17460 	.word	0x3fd17460
   b67e8:	518f264d 	.word	0x518f264d
   b67ec:	3fd55555 	.word	0x3fd55555
   b67f0:	db6fabff 	.word	0xdb6fabff
   b67f4:	3fdb6db6 	.word	0x3fdb6db6
   b67f8:	33333303 	.word	0x33333303
   b67fc:	3fe33333 	.word	0x3fe33333
   b6800:	e0000000 	.word	0xe0000000
   b6804:	3feec709 	.word	0x3feec709
   b6808:	dc3a03fd 	.word	0xdc3a03fd
   b680c:	3feec709 	.word	0x3feec709
   b6810:	145b01f5 	.word	0x145b01f5
   b6814:	be3e2fe0 	.word	0xbe3e2fe0
   b6818:	00000000 	.word	0x00000000
   b681c:	bff00000 	.word	0xbff00000
   b6820:	7ff00000 	.word	0x7ff00000
   b6824:	43400000 	.word	0x43400000
   b6828:	0003988e 	.word	0x0003988e
   b682c:	000bb679 	.word	0x000bb679
   b6830:	3ff00000 	.word	0x3ff00000
   b6834:	40080000 	.word	0x40080000
   b6838:	2300      	movs	r3, #0
   b683a:	e9cd 6700 	strd	r6, r7, [sp]
   b683e:	9300      	str	r3, [sp, #0]
   b6840:	e9dd 8900 	ldrd	r8, r9, [sp]
   b6844:	4630      	mov	r0, r6
   b6846:	4642      	mov	r2, r8
   b6848:	464b      	mov	r3, r9
   b684a:	4639      	mov	r1, r7
   b684c:	f000 fcd2 	bl	b71f4 <__aeabi_dsub>
   b6850:	4622      	mov	r2, r4
   b6852:	462b      	mov	r3, r5
   b6854:	f000 fe86 	bl	b7564 <__aeabi_dmul>
   b6858:	4632      	mov	r2, r6
   b685a:	463b      	mov	r3, r7
   b685c:	4606      	mov	r6, r0
   b685e:	460f      	mov	r7, r1
   b6860:	4650      	mov	r0, sl
   b6862:	4659      	mov	r1, fp
   b6864:	f000 fe7e 	bl	b7564 <__aeabi_dmul>
   b6868:	4602      	mov	r2, r0
   b686a:	460b      	mov	r3, r1
   b686c:	4630      	mov	r0, r6
   b686e:	4639      	mov	r1, r7
   b6870:	f000 fcc2 	bl	b71f8 <__adddf3>
   b6874:	4642      	mov	r2, r8
   b6876:	464b      	mov	r3, r9
   b6878:	4606      	mov	r6, r0
   b687a:	460f      	mov	r7, r1
   b687c:	4620      	mov	r0, r4
   b687e:	4629      	mov	r1, r5
   b6880:	f000 fe70 	bl	b7564 <__aeabi_dmul>
   b6884:	4604      	mov	r4, r0
   b6886:	460d      	mov	r5, r1
   b6888:	462b      	mov	r3, r5
   b688a:	4630      	mov	r0, r6
   b688c:	4639      	mov	r1, r7
   b688e:	4622      	mov	r2, r4
   b6890:	f000 fcb2 	bl	b71f8 <__adddf3>
   b6894:	4bc2      	ldr	r3, [pc, #776]	; (b6ba0 <__ieee754_pow+0x918>)
   b6896:	4299      	cmp	r1, r3
   b6898:	4680      	mov	r8, r0
   b689a:	4689      	mov	r9, r1
   b689c:	468a      	mov	sl, r1
   b689e:	f340 8118 	ble.w	b6ad2 <__ieee754_pow+0x84a>
   b68a2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   b68a6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   b68aa:	4303      	orrs	r3, r0
   b68ac:	f040 8207 	bne.w	b6cbe <__ieee754_pow+0xa36>
   b68b0:	a3a3      	add	r3, pc, #652	; (adr r3, b6b40 <__ieee754_pow+0x8b8>)
   b68b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b68b6:	4630      	mov	r0, r6
   b68b8:	4639      	mov	r1, r7
   b68ba:	f000 fc9d 	bl	b71f8 <__adddf3>
   b68be:	4602      	mov	r2, r0
   b68c0:	460b      	mov	r3, r1
   b68c2:	4640      	mov	r0, r8
   b68c4:	4649      	mov	r1, r9
   b68c6:	4690      	mov	r8, r2
   b68c8:	4699      	mov	r9, r3
   b68ca:	4622      	mov	r2, r4
   b68cc:	462b      	mov	r3, r5
   b68ce:	f000 fc91 	bl	b71f4 <__aeabi_dsub>
   b68d2:	4602      	mov	r2, r0
   b68d4:	460b      	mov	r3, r1
   b68d6:	4640      	mov	r0, r8
   b68d8:	4649      	mov	r1, r9
   b68da:	f001 f8d3 	bl	b7a84 <__aeabi_dcmpgt>
   b68de:	2800      	cmp	r0, #0
   b68e0:	f040 81ed 	bne.w	b6cbe <__ieee754_pow+0xa36>
   b68e4:	f3ca 530a 	ubfx	r3, sl, #20, #11
   b68e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   b68ec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   b68f0:	fa42 f303 	asr.w	r3, r2, r3
   b68f4:	4453      	add	r3, sl
   b68f6:	49ab      	ldr	r1, [pc, #684]	; (b6ba4 <__ieee754_pow+0x91c>)
   b68f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   b68fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   b6900:	fa41 fc02 	asr.w	ip, r1, r2
   b6904:	f3c3 0113 	ubfx	r1, r3, #0, #20
   b6908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b690c:	f1c2 0214 	rsb	r2, r2, #20
   b6910:	fa41 f202 	asr.w	r2, r1, r2
   b6914:	2000      	movs	r0, #0
   b6916:	ea23 010c 	bic.w	r1, r3, ip
   b691a:	f1ba 0f00 	cmp.w	sl, #0
   b691e:	9200      	str	r2, [sp, #0]
   b6920:	460b      	mov	r3, r1
   b6922:	4602      	mov	r2, r0
   b6924:	da02      	bge.n	b692c <__ieee754_pow+0x6a4>
   b6926:	9900      	ldr	r1, [sp, #0]
   b6928:	4249      	negs	r1, r1
   b692a:	9100      	str	r1, [sp, #0]
   b692c:	4620      	mov	r0, r4
   b692e:	4629      	mov	r1, r5
   b6930:	f000 fc60 	bl	b71f4 <__aeabi_dsub>
   b6934:	9b00      	ldr	r3, [sp, #0]
   b6936:	051b      	lsls	r3, r3, #20
   b6938:	9302      	str	r3, [sp, #8]
   b693a:	4602      	mov	r2, r0
   b693c:	460b      	mov	r3, r1
   b693e:	4604      	mov	r4, r0
   b6940:	460d      	mov	r5, r1
   b6942:	4630      	mov	r0, r6
   b6944:	4639      	mov	r1, r7
   b6946:	f000 fc57 	bl	b71f8 <__adddf3>
   b694a:	4689      	mov	r9, r1
   b694c:	f04f 0800 	mov.w	r8, #0
   b6950:	a37d      	add	r3, pc, #500	; (adr r3, b6b48 <__ieee754_pow+0x8c0>)
   b6952:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6956:	4640      	mov	r0, r8
   b6958:	4649      	mov	r1, r9
   b695a:	f000 fe03 	bl	b7564 <__aeabi_dmul>
   b695e:	4622      	mov	r2, r4
   b6960:	462b      	mov	r3, r5
   b6962:	4682      	mov	sl, r0
   b6964:	468b      	mov	fp, r1
   b6966:	4640      	mov	r0, r8
   b6968:	4649      	mov	r1, r9
   b696a:	f000 fc43 	bl	b71f4 <__aeabi_dsub>
   b696e:	4602      	mov	r2, r0
   b6970:	460b      	mov	r3, r1
   b6972:	4630      	mov	r0, r6
   b6974:	4639      	mov	r1, r7
   b6976:	f000 fc3d 	bl	b71f4 <__aeabi_dsub>
   b697a:	a375      	add	r3, pc, #468	; (adr r3, b6b50 <__ieee754_pow+0x8c8>)
   b697c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6980:	f000 fdf0 	bl	b7564 <__aeabi_dmul>
   b6984:	a374      	add	r3, pc, #464	; (adr r3, b6b58 <__ieee754_pow+0x8d0>)
   b6986:	e9d3 2300 	ldrd	r2, r3, [r3]
   b698a:	4604      	mov	r4, r0
   b698c:	460d      	mov	r5, r1
   b698e:	4640      	mov	r0, r8
   b6990:	4649      	mov	r1, r9
   b6992:	f000 fde7 	bl	b7564 <__aeabi_dmul>
   b6996:	4602      	mov	r2, r0
   b6998:	460b      	mov	r3, r1
   b699a:	4620      	mov	r0, r4
   b699c:	4629      	mov	r1, r5
   b699e:	f000 fc2b 	bl	b71f8 <__adddf3>
   b69a2:	4606      	mov	r6, r0
   b69a4:	460f      	mov	r7, r1
   b69a6:	4632      	mov	r2, r6
   b69a8:	463b      	mov	r3, r7
   b69aa:	4650      	mov	r0, sl
   b69ac:	4659      	mov	r1, fp
   b69ae:	f000 fc23 	bl	b71f8 <__adddf3>
   b69b2:	4652      	mov	r2, sl
   b69b4:	465b      	mov	r3, fp
   b69b6:	4604      	mov	r4, r0
   b69b8:	460d      	mov	r5, r1
   b69ba:	f000 fc1b 	bl	b71f4 <__aeabi_dsub>
   b69be:	4602      	mov	r2, r0
   b69c0:	460b      	mov	r3, r1
   b69c2:	4630      	mov	r0, r6
   b69c4:	4639      	mov	r1, r7
   b69c6:	f000 fc15 	bl	b71f4 <__aeabi_dsub>
   b69ca:	4622      	mov	r2, r4
   b69cc:	4680      	mov	r8, r0
   b69ce:	4689      	mov	r9, r1
   b69d0:	462b      	mov	r3, r5
   b69d2:	4620      	mov	r0, r4
   b69d4:	4629      	mov	r1, r5
   b69d6:	f000 fdc5 	bl	b7564 <__aeabi_dmul>
   b69da:	a361      	add	r3, pc, #388	; (adr r3, b6b60 <__ieee754_pow+0x8d8>)
   b69dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b69e0:	4606      	mov	r6, r0
   b69e2:	460f      	mov	r7, r1
   b69e4:	f000 fdbe 	bl	b7564 <__aeabi_dmul>
   b69e8:	a35f      	add	r3, pc, #380	; (adr r3, b6b68 <__ieee754_pow+0x8e0>)
   b69ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   b69ee:	f000 fc01 	bl	b71f4 <__aeabi_dsub>
   b69f2:	4632      	mov	r2, r6
   b69f4:	463b      	mov	r3, r7
   b69f6:	f000 fdb5 	bl	b7564 <__aeabi_dmul>
   b69fa:	a35d      	add	r3, pc, #372	; (adr r3, b6b70 <__ieee754_pow+0x8e8>)
   b69fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a00:	f000 fbfa 	bl	b71f8 <__adddf3>
   b6a04:	4632      	mov	r2, r6
   b6a06:	463b      	mov	r3, r7
   b6a08:	f000 fdac 	bl	b7564 <__aeabi_dmul>
   b6a0c:	a35a      	add	r3, pc, #360	; (adr r3, b6b78 <__ieee754_pow+0x8f0>)
   b6a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a12:	f000 fbef 	bl	b71f4 <__aeabi_dsub>
   b6a16:	4632      	mov	r2, r6
   b6a18:	463b      	mov	r3, r7
   b6a1a:	f000 fda3 	bl	b7564 <__aeabi_dmul>
   b6a1e:	a358      	add	r3, pc, #352	; (adr r3, b6b80 <__ieee754_pow+0x8f8>)
   b6a20:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6a24:	f000 fbe8 	bl	b71f8 <__adddf3>
   b6a28:	4632      	mov	r2, r6
   b6a2a:	463b      	mov	r3, r7
   b6a2c:	f000 fd9a 	bl	b7564 <__aeabi_dmul>
   b6a30:	4602      	mov	r2, r0
   b6a32:	460b      	mov	r3, r1
   b6a34:	4620      	mov	r0, r4
   b6a36:	4629      	mov	r1, r5
   b6a38:	f000 fbdc 	bl	b71f4 <__aeabi_dsub>
   b6a3c:	4606      	mov	r6, r0
   b6a3e:	460f      	mov	r7, r1
   b6a40:	4632      	mov	r2, r6
   b6a42:	463b      	mov	r3, r7
   b6a44:	4620      	mov	r0, r4
   b6a46:	4629      	mov	r1, r5
   b6a48:	f000 fd8c 	bl	b7564 <__aeabi_dmul>
   b6a4c:	4602      	mov	r2, r0
   b6a4e:	460b      	mov	r3, r1
   b6a50:	4630      	mov	r0, r6
   b6a52:	4639      	mov	r1, r7
   b6a54:	4616      	mov	r6, r2
   b6a56:	461f      	mov	r7, r3
   b6a58:	2200      	movs	r2, #0
   b6a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6a5e:	f000 fbc9 	bl	b71f4 <__aeabi_dsub>
   b6a62:	4602      	mov	r2, r0
   b6a64:	460b      	mov	r3, r1
   b6a66:	4630      	mov	r0, r6
   b6a68:	4639      	mov	r1, r7
   b6a6a:	f000 fea5 	bl	b77b8 <__aeabi_ddiv>
   b6a6e:	4642      	mov	r2, r8
   b6a70:	4606      	mov	r6, r0
   b6a72:	460f      	mov	r7, r1
   b6a74:	464b      	mov	r3, r9
   b6a76:	4620      	mov	r0, r4
   b6a78:	4629      	mov	r1, r5
   b6a7a:	f000 fd73 	bl	b7564 <__aeabi_dmul>
   b6a7e:	4642      	mov	r2, r8
   b6a80:	464b      	mov	r3, r9
   b6a82:	f000 fbb9 	bl	b71f8 <__adddf3>
   b6a86:	4602      	mov	r2, r0
   b6a88:	460b      	mov	r3, r1
   b6a8a:	4630      	mov	r0, r6
   b6a8c:	4639      	mov	r1, r7
   b6a8e:	f000 fbb1 	bl	b71f4 <__aeabi_dsub>
   b6a92:	4622      	mov	r2, r4
   b6a94:	462b      	mov	r3, r5
   b6a96:	f000 fbad 	bl	b71f4 <__aeabi_dsub>
   b6a9a:	4602      	mov	r2, r0
   b6a9c:	460b      	mov	r3, r1
   b6a9e:	2000      	movs	r0, #0
   b6aa0:	4941      	ldr	r1, [pc, #260]	; (b6ba8 <__ieee754_pow+0x920>)
   b6aa2:	f000 fba7 	bl	b71f4 <__aeabi_dsub>
   b6aa6:	9a02      	ldr	r2, [sp, #8]
   b6aa8:	460b      	mov	r3, r1
   b6aaa:	4413      	add	r3, r2
   b6aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   b6ab0:	f2c0 8143 	blt.w	b6d3a <__ieee754_pow+0xab2>
   b6ab4:	4619      	mov	r1, r3
   b6ab6:	ec53 2b18 	vmov	r2, r3, d8
   b6aba:	f000 fd53 	bl	b7564 <__aeabi_dmul>
   b6abe:	ec41 0b10 	vmov	d0, r0, r1
   b6ac2:	e42d      	b.n	b6320 <__ieee754_pow+0x98>
   b6ac4:	f1bb 0f00 	cmp.w	fp, #0
   b6ac8:	f6ff aca0 	blt.w	b640c <__ieee754_pow+0x184>
   b6acc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; b6b88 <__ieee754_pow+0x900>
   b6ad0:	e426      	b.n	b6320 <__ieee754_pow+0x98>
   b6ad2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; b6bb0 <__ieee754_pow+0x928>
   b6ad6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6ada:	4563      	cmp	r3, ip
   b6adc:	f340 80e7 	ble.w	b6cae <__ieee754_pow+0xa26>
   b6ae0:	4b32      	ldr	r3, [pc, #200]	; (b6bac <__ieee754_pow+0x924>)
   b6ae2:	440b      	add	r3, r1
   b6ae4:	4303      	orrs	r3, r0
   b6ae6:	d10a      	bne.n	b6afe <__ieee754_pow+0x876>
   b6ae8:	4622      	mov	r2, r4
   b6aea:	462b      	mov	r3, r5
   b6aec:	f000 fb82 	bl	b71f4 <__aeabi_dsub>
   b6af0:	4632      	mov	r2, r6
   b6af2:	463b      	mov	r3, r7
   b6af4:	f000 ffbc 	bl	b7a70 <__aeabi_dcmpge>
   b6af8:	2800      	cmp	r0, #0
   b6afa:	f43f aef3 	beq.w	b68e4 <__ieee754_pow+0x65c>
   b6afe:	a324      	add	r3, pc, #144	; (adr r3, b6b90 <__ieee754_pow+0x908>)
   b6b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b04:	ec51 0b18 	vmov	r0, r1, d8
   b6b08:	f000 fd2c 	bl	b7564 <__aeabi_dmul>
   b6b0c:	a320      	add	r3, pc, #128	; (adr r3, b6b90 <__ieee754_pow+0x908>)
   b6b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b12:	f000 fd27 	bl	b7564 <__aeabi_dmul>
   b6b16:	ec41 0b10 	vmov	d0, r0, r1
   b6b1a:	e401      	b.n	b6320 <__ieee754_pow+0x98>
   b6b1c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; b6b98 <__ieee754_pow+0x910>
   b6b20:	eeb0 8a47 	vmov.f32	s16, s14
   b6b24:	eef0 8a67 	vmov.f32	s17, s15
   b6b28:	e686      	b.n	b6838 <__ieee754_pow+0x5b0>
   b6b2a:	f1bb 0f00 	cmp.w	fp, #0
   b6b2e:	dacd      	bge.n	b6acc <__ieee754_pow+0x844>
   b6b30:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b6b34:	ee00 6a10 	vmov	s0, r6
   b6b38:	ee00 3a90 	vmov	s1, r3
   b6b3c:	f7ff bbf0 	b.w	b6320 <__ieee754_pow+0x98>
   b6b40:	652b82fe 	.word	0x652b82fe
   b6b44:	3c971547 	.word	0x3c971547
   b6b48:	00000000 	.word	0x00000000
   b6b4c:	3fe62e43 	.word	0x3fe62e43
   b6b50:	fefa39ef 	.word	0xfefa39ef
   b6b54:	3fe62e42 	.word	0x3fe62e42
   b6b58:	0ca86c39 	.word	0x0ca86c39
   b6b5c:	be205c61 	.word	0xbe205c61
   b6b60:	72bea4d0 	.word	0x72bea4d0
   b6b64:	3e663769 	.word	0x3e663769
   b6b68:	c5d26bf1 	.word	0xc5d26bf1
   b6b6c:	3ebbbd41 	.word	0x3ebbbd41
   b6b70:	af25de2c 	.word	0xaf25de2c
   b6b74:	3f11566a 	.word	0x3f11566a
   b6b78:	16bebd93 	.word	0x16bebd93
   b6b7c:	3f66c16c 	.word	0x3f66c16c
   b6b80:	5555553e 	.word	0x5555553e
   b6b84:	3fc55555 	.word	0x3fc55555
	...
   b6b90:	c2f8f359 	.word	0xc2f8f359
   b6b94:	01a56e1f 	.word	0x01a56e1f
   b6b98:	00000000 	.word	0x00000000
   b6b9c:	3ff00000 	.word	0x3ff00000
   b6ba0:	408fffff 	.word	0x408fffff
   b6ba4:	000fffff 	.word	0x000fffff
   b6ba8:	3ff00000 	.word	0x3ff00000
   b6bac:	3f6f3400 	.word	0x3f6f3400
   b6bb0:	4090cbff 	.word	0x4090cbff
   b6bb4:	4598      	cmp	r8, r3
   b6bb6:	db85      	blt.n	b6ac4 <__ieee754_pow+0x83c>
   b6bb8:	4b7d      	ldr	r3, [pc, #500]	; (b6db0 <__ieee754_pow+0xb28>)
   b6bba:	4598      	cmp	r8, r3
   b6bbc:	f73f ac22 	bgt.w	b6404 <__ieee754_pow+0x17c>
   b6bc0:	ec51 0b10 	vmov	r0, r1, d0
   b6bc4:	4b7a      	ldr	r3, [pc, #488]	; (b6db0 <__ieee754_pow+0xb28>)
   b6bc6:	2200      	movs	r2, #0
   b6bc8:	f000 fb14 	bl	b71f4 <__aeabi_dsub>
   b6bcc:	a368      	add	r3, pc, #416	; (adr r3, b6d70 <__ieee754_pow+0xae8>)
   b6bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6bd2:	4604      	mov	r4, r0
   b6bd4:	460d      	mov	r5, r1
   b6bd6:	f000 fcc5 	bl	b7564 <__aeabi_dmul>
   b6bda:	a367      	add	r3, pc, #412	; (adr r3, b6d78 <__ieee754_pow+0xaf0>)
   b6bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6be0:	4682      	mov	sl, r0
   b6be2:	468b      	mov	fp, r1
   b6be4:	4620      	mov	r0, r4
   b6be6:	4629      	mov	r1, r5
   b6be8:	f000 fcbc 	bl	b7564 <__aeabi_dmul>
   b6bec:	4b71      	ldr	r3, [pc, #452]	; (b6db4 <__ieee754_pow+0xb2c>)
   b6bee:	ec41 0b18 	vmov	d8, r0, r1
   b6bf2:	2200      	movs	r2, #0
   b6bf4:	4620      	mov	r0, r4
   b6bf6:	4629      	mov	r1, r5
   b6bf8:	f000 fcb4 	bl	b7564 <__aeabi_dmul>
   b6bfc:	4602      	mov	r2, r0
   b6bfe:	460b      	mov	r3, r1
   b6c00:	a15f      	add	r1, pc, #380	; (adr r1, b6d80 <__ieee754_pow+0xaf8>)
   b6c02:	e9d1 0100 	ldrd	r0, r1, [r1]
   b6c06:	f000 faf5 	bl	b71f4 <__aeabi_dsub>
   b6c0a:	4622      	mov	r2, r4
   b6c0c:	462b      	mov	r3, r5
   b6c0e:	f000 fca9 	bl	b7564 <__aeabi_dmul>
   b6c12:	4602      	mov	r2, r0
   b6c14:	460b      	mov	r3, r1
   b6c16:	2000      	movs	r0, #0
   b6c18:	4967      	ldr	r1, [pc, #412]	; (b6db8 <__ieee754_pow+0xb30>)
   b6c1a:	f000 faeb 	bl	b71f4 <__aeabi_dsub>
   b6c1e:	4622      	mov	r2, r4
   b6c20:	4680      	mov	r8, r0
   b6c22:	4689      	mov	r9, r1
   b6c24:	462b      	mov	r3, r5
   b6c26:	4620      	mov	r0, r4
   b6c28:	4629      	mov	r1, r5
   b6c2a:	f000 fc9b 	bl	b7564 <__aeabi_dmul>
   b6c2e:	4602      	mov	r2, r0
   b6c30:	460b      	mov	r3, r1
   b6c32:	4640      	mov	r0, r8
   b6c34:	4649      	mov	r1, r9
   b6c36:	f000 fc95 	bl	b7564 <__aeabi_dmul>
   b6c3a:	a353      	add	r3, pc, #332	; (adr r3, b6d88 <__ieee754_pow+0xb00>)
   b6c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6c40:	f000 fc90 	bl	b7564 <__aeabi_dmul>
   b6c44:	4602      	mov	r2, r0
   b6c46:	460b      	mov	r3, r1
   b6c48:	ec51 0b18 	vmov	r0, r1, d8
   b6c4c:	f000 fad2 	bl	b71f4 <__aeabi_dsub>
   b6c50:	4680      	mov	r8, r0
   b6c52:	4689      	mov	r9, r1
   b6c54:	4642      	mov	r2, r8
   b6c56:	464b      	mov	r3, r9
   b6c58:	4650      	mov	r0, sl
   b6c5a:	4659      	mov	r1, fp
   b6c5c:	f000 facc 	bl	b71f8 <__adddf3>
   b6c60:	2000      	movs	r0, #0
   b6c62:	4652      	mov	r2, sl
   b6c64:	465b      	mov	r3, fp
   b6c66:	4604      	mov	r4, r0
   b6c68:	460d      	mov	r5, r1
   b6c6a:	e591      	b.n	b6790 <__ieee754_pow+0x508>
   b6c6c:	4622      	mov	r2, r4
   b6c6e:	462b      	mov	r3, r5
   b6c70:	4620      	mov	r0, r4
   b6c72:	4629      	mov	r1, r5
   b6c74:	f000 fc76 	bl	b7564 <__aeabi_dmul>
   b6c78:	ec41 0b10 	vmov	d0, r0, r1
   b6c7c:	f7ff bb50 	b.w	b6320 <__ieee754_pow+0x98>
   b6c80:	494b      	ldr	r1, [pc, #300]	; (b6db0 <__ieee754_pow+0xb28>)
   b6c82:	2000      	movs	r0, #0
   b6c84:	4622      	mov	r2, r4
   b6c86:	462b      	mov	r3, r5
   b6c88:	f000 fd96 	bl	b77b8 <__aeabi_ddiv>
   b6c8c:	ec41 0b10 	vmov	d0, r0, r1
   b6c90:	f7ff bb46 	b.w	b6320 <__ieee754_pow+0x98>
   b6c94:	2b00      	cmp	r3, #0
   b6c96:	d144      	bne.n	b6d22 <__ieee754_pow+0xa9a>
   b6c98:	f1c1 0114 	rsb	r1, r1, #20
   b6c9c:	fa4a f001 	asr.w	r0, sl, r1
   b6ca0:	fa00 f101 	lsl.w	r1, r0, r1
   b6ca4:	4551      	cmp	r1, sl
   b6ca6:	d05a      	beq.n	b6d5e <__ieee754_pow+0xad6>
   b6ca8:	9300      	str	r3, [sp, #0]
   b6caa:	f7ff bb17 	b.w	b62dc <__ieee754_pow+0x54>
   b6cae:	4a42      	ldr	r2, [pc, #264]	; (b6db8 <__ieee754_pow+0xb30>)
   b6cb0:	4293      	cmp	r3, r2
   b6cb2:	dc5b      	bgt.n	b6d6c <__ieee754_pow+0xae4>
   b6cb4:	e9dd 1200 	ldrd	r1, r2, [sp]
   b6cb8:	9102      	str	r1, [sp, #8]
   b6cba:	9100      	str	r1, [sp, #0]
   b6cbc:	e646      	b.n	b694c <__ieee754_pow+0x6c4>
   b6cbe:	a334      	add	r3, pc, #208	; (adr r3, b6d90 <__ieee754_pow+0xb08>)
   b6cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cc4:	ec51 0b18 	vmov	r0, r1, d8
   b6cc8:	f000 fc4c 	bl	b7564 <__aeabi_dmul>
   b6ccc:	a330      	add	r3, pc, #192	; (adr r3, b6d90 <__ieee754_pow+0xb08>)
   b6cce:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6cd2:	f000 fc47 	bl	b7564 <__aeabi_dmul>
   b6cd6:	ec41 0b10 	vmov	d0, r0, r1
   b6cda:	f7ff bb21 	b.w	b6320 <__ieee754_pow+0x98>
   b6cde:	9b00      	ldr	r3, [sp, #0]
   b6ce0:	2b01      	cmp	r3, #1
   b6ce2:	f47f ab1d 	bne.w	b6320 <__ieee754_pow+0x98>
   b6ce6:	ee10 1a90 	vmov	r1, s1
   b6cea:	ee10 2a10 	vmov	r2, s0
   b6cee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6cf2:	ec43 2b10 	vmov	d0, r2, r3
   b6cf6:	f7ff bb13 	b.w	b6320 <__ieee754_pow+0x98>
   b6cfa:	ed9f 7b27 	vldr	d7, [pc, #156]	; b6d98 <__ieee754_pow+0xb10>
   b6cfe:	eeb0 ca47 	vmov.f32	s24, s14
   b6d02:	eef0 ca67 	vmov.f32	s25, s15
   b6d06:	ed9f 7b26 	vldr	d7, [pc, #152]	; b6da0 <__ieee754_pow+0xb18>
   b6d0a:	eeb0 da47 	vmov.f32	s26, s14
   b6d0e:	eef0 da67 	vmov.f32	s27, s15
   b6d12:	ed9f 7b25 	vldr	d7, [pc, #148]	; b6da8 <__ieee754_pow+0xb20>
   b6d16:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   b6d1a:	ec53 2b17 	vmov	r2, r3, d7
   b6d1e:	f7ff bbeb 	b.w	b64f8 <__ieee754_pow+0x270>
   b6d22:	ec45 4b10 	vmov	d0, r4, r5
   b6d26:	9200      	str	r2, [sp, #0]
   b6d28:	f000 f914 	bl	b6f54 <fabs>
   b6d2c:	9a00      	ldr	r2, [sp, #0]
   b6d2e:	2a00      	cmp	r2, #0
   b6d30:	f47f ab92 	bne.w	b6458 <__ieee754_pow+0x1d0>
   b6d34:	9200      	str	r2, [sp, #0]
   b6d36:	f7ff bb26 	b.w	b6386 <__ieee754_pow+0xfe>
   b6d3a:	ec41 0b10 	vmov	d0, r0, r1
   b6d3e:	9800      	ldr	r0, [sp, #0]
   b6d40:	f000 f9c2 	bl	b70c8 <scalbn>
   b6d44:	ec51 0b10 	vmov	r0, r1, d0
   b6d48:	e6b5      	b.n	b6ab6 <__ieee754_pow+0x82e>
   b6d4a:	f000 0001 	and.w	r0, r0, #1
   b6d4e:	f1c0 0102 	rsb	r1, r0, #2
   b6d52:	9100      	str	r1, [sp, #0]
   b6d54:	2b00      	cmp	r3, #0
   b6d56:	f43f aac1 	beq.w	b62dc <__ieee754_pow+0x54>
   b6d5a:	f7ff bb0d 	b.w	b6378 <__ieee754_pow+0xf0>
   b6d5e:	f000 0001 	and.w	r0, r0, #1
   b6d62:	f1c0 0302 	rsb	r3, r0, #2
   b6d66:	9300      	str	r3, [sp, #0]
   b6d68:	f7ff bab8 	b.w	b62dc <__ieee754_pow+0x54>
   b6d6c:	151b      	asrs	r3, r3, #20
   b6d6e:	e5bb      	b.n	b68e8 <__ieee754_pow+0x660>
   b6d70:	60000000 	.word	0x60000000
   b6d74:	3ff71547 	.word	0x3ff71547
   b6d78:	f85ddf44 	.word	0xf85ddf44
   b6d7c:	3e54ae0b 	.word	0x3e54ae0b
   b6d80:	55555555 	.word	0x55555555
   b6d84:	3fd55555 	.word	0x3fd55555
   b6d88:	652b82fe 	.word	0x652b82fe
   b6d8c:	3ff71547 	.word	0x3ff71547
   b6d90:	8800759c 	.word	0x8800759c
   b6d94:	7e37e43c 	.word	0x7e37e43c
   b6d98:	40000000 	.word	0x40000000
   b6d9c:	3fe2b803 	.word	0x3fe2b803
   b6da0:	43cfd006 	.word	0x43cfd006
   b6da4:	3e4cfdeb 	.word	0x3e4cfdeb
   b6da8:	00000000 	.word	0x00000000
   b6dac:	3ff80000 	.word	0x3ff80000
   b6db0:	3ff00000 	.word	0x3ff00000
   b6db4:	3fd00000 	.word	0x3fd00000
   b6db8:	3fe00000 	.word	0x3fe00000

000b6dbc <__ieee754_sqrt>:
   b6dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6dc0:	4a63      	ldr	r2, [pc, #396]	; (b6f50 <__ieee754_sqrt+0x194>)
   b6dc2:	ec55 4b10 	vmov	r4, r5, d0
   b6dc6:	43aa      	bics	r2, r5
   b6dc8:	f000 809f 	beq.w	b6f0a <__ieee754_sqrt+0x14e>
   b6dcc:	2d00      	cmp	r5, #0
   b6dce:	ee10 ca10 	vmov	ip, s0
   b6dd2:	462b      	mov	r3, r5
   b6dd4:	dd54      	ble.n	b6e80 <__ieee754_sqrt+0xc4>
   b6dd6:	1529      	asrs	r1, r5, #20
   b6dd8:	d063      	beq.n	b6ea2 <__ieee754_sqrt+0xe6>
   b6dda:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b6dde:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   b6de2:	07c9      	lsls	r1, r1, #31
   b6de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6de8:	d404      	bmi.n	b6df4 <__ieee754_sqrt+0x38>
   b6dea:	005b      	lsls	r3, r3, #1
   b6dec:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6df0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6df4:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   b6df8:	2600      	movs	r6, #0
   b6dfa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   b6dfe:	107f      	asrs	r7, r7, #1
   b6e00:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6e04:	f04f 0e16 	mov.w	lr, #22
   b6e08:	4634      	mov	r4, r6
   b6e0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   b6e0e:	18a1      	adds	r1, r4, r2
   b6e10:	4299      	cmp	r1, r3
   b6e12:	dc02      	bgt.n	b6e1a <__ieee754_sqrt+0x5e>
   b6e14:	1a5b      	subs	r3, r3, r1
   b6e16:	188c      	adds	r4, r1, r2
   b6e18:	4416      	add	r6, r2
   b6e1a:	005b      	lsls	r3, r3, #1
   b6e1c:	f1be 0e01 	subs.w	lr, lr, #1
   b6e20:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   b6e24:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6e28:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6e2c:	d1ef      	bne.n	b6e0e <__ieee754_sqrt+0x52>
   b6e2e:	4675      	mov	r5, lr
   b6e30:	2020      	movs	r0, #32
   b6e32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   b6e36:	e00a      	b.n	b6e4e <__ieee754_sqrt+0x92>
   b6e38:	d044      	beq.n	b6ec4 <__ieee754_sqrt+0x108>
   b6e3a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   b6e3e:	3801      	subs	r0, #1
   b6e40:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   b6e44:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   b6e48:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b6e4c:	d043      	beq.n	b6ed6 <__ieee754_sqrt+0x11a>
   b6e4e:	42a3      	cmp	r3, r4
   b6e50:	eb02 010e 	add.w	r1, r2, lr
   b6e54:	ddf0      	ble.n	b6e38 <__ieee754_sqrt+0x7c>
   b6e56:	2900      	cmp	r1, #0
   b6e58:	eb01 0e02 	add.w	lr, r1, r2
   b6e5c:	db0a      	blt.n	b6e74 <__ieee754_sqrt+0xb8>
   b6e5e:	46a0      	mov	r8, r4
   b6e60:	1b1b      	subs	r3, r3, r4
   b6e62:	4561      	cmp	r1, ip
   b6e64:	bf88      	it	hi
   b6e66:	f103 33ff 	addhi.w	r3, r3, #4294967295
   b6e6a:	ebac 0c01 	sub.w	ip, ip, r1
   b6e6e:	4415      	add	r5, r2
   b6e70:	4644      	mov	r4, r8
   b6e72:	e7e2      	b.n	b6e3a <__ieee754_sqrt+0x7e>
   b6e74:	f1be 0f00 	cmp.w	lr, #0
   b6e78:	dbf1      	blt.n	b6e5e <__ieee754_sqrt+0xa2>
   b6e7a:	f104 0801 	add.w	r8, r4, #1
   b6e7e:	e7ef      	b.n	b6e60 <__ieee754_sqrt+0xa4>
   b6e80:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   b6e84:	4322      	orrs	r2, r4
   b6e86:	d038      	beq.n	b6efa <__ieee754_sqrt+0x13e>
   b6e88:	2d00      	cmp	r5, #0
   b6e8a:	d14e      	bne.n	b6f2a <__ieee754_sqrt+0x16e>
   b6e8c:	4629      	mov	r1, r5
   b6e8e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   b6e92:	3915      	subs	r1, #21
   b6e94:	4613      	mov	r3, r2
   b6e96:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   b6e9a:	2a00      	cmp	r2, #0
   b6e9c:	d0f7      	beq.n	b6e8e <__ieee754_sqrt+0xd2>
   b6e9e:	02d6      	lsls	r6, r2, #11
   b6ea0:	d450      	bmi.n	b6f44 <__ieee754_sqrt+0x188>
   b6ea2:	2000      	movs	r0, #0
   b6ea4:	005b      	lsls	r3, r3, #1
   b6ea6:	02dd      	lsls	r5, r3, #11
   b6ea8:	4604      	mov	r4, r0
   b6eaa:	f100 0001 	add.w	r0, r0, #1
   b6eae:	d5f9      	bpl.n	b6ea4 <__ieee754_sqrt+0xe8>
   b6eb0:	461a      	mov	r2, r3
   b6eb2:	4663      	mov	r3, ip
   b6eb4:	fa0c fc00 	lsl.w	ip, ip, r0
   b6eb8:	f1c0 0020 	rsb	r0, r0, #32
   b6ebc:	40c3      	lsrs	r3, r0
   b6ebe:	1b09      	subs	r1, r1, r4
   b6ec0:	4313      	orrs	r3, r2
   b6ec2:	e78a      	b.n	b6dda <__ieee754_sqrt+0x1e>
   b6ec4:	4561      	cmp	r1, ip
   b6ec6:	d8b8      	bhi.n	b6e3a <__ieee754_sqrt+0x7e>
   b6ec8:	2900      	cmp	r1, #0
   b6eca:	eb01 0e02 	add.w	lr, r1, r2
   b6ece:	dbd1      	blt.n	b6e74 <__ieee754_sqrt+0xb8>
   b6ed0:	4698      	mov	r8, r3
   b6ed2:	2300      	movs	r3, #0
   b6ed4:	e7c9      	b.n	b6e6a <__ieee754_sqrt+0xae>
   b6ed6:	ea53 030c 	orrs.w	r3, r3, ip
   b6eda:	d110      	bne.n	b6efe <__ieee754_sqrt+0x142>
   b6edc:	0868      	lsrs	r0, r5, #1
   b6ede:	1071      	asrs	r1, r6, #1
   b6ee0:	07f3      	lsls	r3, r6, #31
   b6ee2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   b6ee6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   b6eea:	bf48      	it	mi
   b6eec:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   b6ef0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   b6ef4:	4602      	mov	r2, r0
   b6ef6:	ec43 2b10 	vmov	d0, r2, r3
   b6efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6efe:	1c6a      	adds	r2, r5, #1
   b6f00:	bf16      	itet	ne
   b6f02:	1c68      	addne	r0, r5, #1
   b6f04:	3601      	addeq	r6, #1
   b6f06:	0840      	lsrne	r0, r0, #1
   b6f08:	e7e9      	b.n	b6ede <__ieee754_sqrt+0x122>
   b6f0a:	ee10 2a10 	vmov	r2, s0
   b6f0e:	ee10 0a10 	vmov	r0, s0
   b6f12:	462b      	mov	r3, r5
   b6f14:	4629      	mov	r1, r5
   b6f16:	f000 fb25 	bl	b7564 <__aeabi_dmul>
   b6f1a:	4622      	mov	r2, r4
   b6f1c:	462b      	mov	r3, r5
   b6f1e:	f000 f96b 	bl	b71f8 <__adddf3>
   b6f22:	ec41 0b10 	vmov	d0, r0, r1
   b6f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6f2a:	ee10 2a10 	vmov	r2, s0
   b6f2e:	4620      	mov	r0, r4
   b6f30:	4629      	mov	r1, r5
   b6f32:	f000 f95f 	bl	b71f4 <__aeabi_dsub>
   b6f36:	4602      	mov	r2, r0
   b6f38:	460b      	mov	r3, r1
   b6f3a:	f000 fc3d 	bl	b77b8 <__aeabi_ddiv>
   b6f3e:	ec41 0b10 	vmov	d0, r0, r1
   b6f42:	e7da      	b.n	b6efa <__ieee754_sqrt+0x13e>
   b6f44:	4663      	mov	r3, ip
   b6f46:	2020      	movs	r0, #32
   b6f48:	f04f 34ff 	mov.w	r4, #4294967295
   b6f4c:	e7b6      	b.n	b6ebc <__ieee754_sqrt+0x100>
   b6f4e:	bf00      	nop
   b6f50:	7ff00000 	.word	0x7ff00000

000b6f54 <fabs>:
   b6f54:	ec51 0b10 	vmov	r0, r1, d0
   b6f58:	ee10 2a10 	vmov	r2, s0
   b6f5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b6f60:	ec43 2b10 	vmov	d0, r2, r3
   b6f64:	4770      	bx	lr
   b6f66:	bf00      	nop

000b6f68 <finite>:
   b6f68:	b082      	sub	sp, #8
   b6f6a:	ed8d 0b00 	vstr	d0, [sp]
   b6f6e:	9801      	ldr	r0, [sp, #4]
   b6f70:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   b6f74:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   b6f78:	0fc0      	lsrs	r0, r0, #31
   b6f7a:	b002      	add	sp, #8
   b6f7c:	4770      	bx	lr
   b6f7e:	bf00      	nop

000b6f80 <nan>:
   b6f80:	ed9f 0b01 	vldr	d0, [pc, #4]	; b6f88 <nan+0x8>
   b6f84:	4770      	bx	lr
   b6f86:	bf00      	nop
   b6f88:	00000000 	.word	0x00000000
   b6f8c:	7ff80000 	.word	0x7ff80000

000b6f90 <rint>:
   b6f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6f92:	ec53 2b10 	vmov	r2, r3, d0
   b6f96:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   b6f9a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   b6f9e:	2913      	cmp	r1, #19
   b6fa0:	ee10 0a10 	vmov	r0, s0
   b6fa4:	b083      	sub	sp, #12
   b6fa6:	461c      	mov	r4, r3
   b6fa8:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   b6fac:	dc3a      	bgt.n	b7024 <rint+0x94>
   b6fae:	2900      	cmp	r1, #0
   b6fb0:	db30      	blt.n	b7014 <rint+0x84>
   b6fb2:	4d42      	ldr	r5, [pc, #264]	; (b70bc <rint+0x12c>)
   b6fb4:	fa45 fc01 	asr.w	ip, r5, r1
   b6fb8:	ea03 050c 	and.w	r5, r3, ip
   b6fbc:	4315      	orrs	r5, r2
   b6fbe:	d02d      	beq.n	b701c <rint+0x8c>
   b6fc0:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   b6fc4:	4318      	orrs	r0, r3
   b6fc6:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   b6fca:	d00c      	beq.n	b6fe6 <rint+0x56>
   b6fcc:	ea24 0c0c 	bic.w	ip, r4, ip
   b6fd0:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   b6fd4:	2913      	cmp	r1, #19
   b6fd6:	fa44 f101 	asr.w	r1, r4, r1
   b6fda:	bf0c      	ite	eq
   b6fdc:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   b6fe0:	2000      	movne	r0, #0
   b6fe2:	ea4c 0401 	orr.w	r4, ip, r1
   b6fe6:	4936      	ldr	r1, [pc, #216]	; (b70c0 <rint+0x130>)
   b6fe8:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   b6fec:	4623      	mov	r3, r4
   b6fee:	e9de 4500 	ldrd	r4, r5, [lr]
   b6ff2:	4602      	mov	r2, r0
   b6ff4:	4629      	mov	r1, r5
   b6ff6:	4620      	mov	r0, r4
   b6ff8:	f000 f8fe 	bl	b71f8 <__adddf3>
   b6ffc:	e9cd 0100 	strd	r0, r1, [sp]
   b7000:	e9dd 0100 	ldrd	r0, r1, [sp]
   b7004:	4622      	mov	r2, r4
   b7006:	462b      	mov	r3, r5
   b7008:	f000 f8f4 	bl	b71f4 <__aeabi_dsub>
   b700c:	ec41 0b10 	vmov	d0, r0, r1
   b7010:	b003      	add	sp, #12
   b7012:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7014:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   b7018:	4311      	orrs	r1, r2
   b701a:	d124      	bne.n	b7066 <rint+0xd6>
   b701c:	ec43 2b10 	vmov	d0, r2, r3
   b7020:	b003      	add	sp, #12
   b7022:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7024:	2933      	cmp	r1, #51	; 0x33
   b7026:	dd08      	ble.n	b703a <rint+0xaa>
   b7028:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   b702c:	d1f6      	bne.n	b701c <rint+0x8c>
   b702e:	4619      	mov	r1, r3
   b7030:	f000 f8e2 	bl	b71f8 <__adddf3>
   b7034:	ec41 0b10 	vmov	d0, r0, r1
   b7038:	e7f2      	b.n	b7020 <rint+0x90>
   b703a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   b703e:	f04f 31ff 	mov.w	r1, #4294967295
   b7042:	fa21 f10c 	lsr.w	r1, r1, ip
   b7046:	420a      	tst	r2, r1
   b7048:	d0e8      	beq.n	b701c <rint+0x8c>
   b704a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   b704e:	ea4f 0351 	mov.w	r3, r1, lsr #1
   b7052:	d0c8      	beq.n	b6fe6 <rint+0x56>
   b7054:	ea20 0303 	bic.w	r3, r0, r3
   b7058:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b705c:	fa40 fc0c 	asr.w	ip, r0, ip
   b7060:	ea43 000c 	orr.w	r0, r3, ip
   b7064:	e7bf      	b.n	b6fe6 <rint+0x56>
   b7066:	f3c3 0313 	ubfx	r3, r3, #0, #20
   b706a:	4318      	orrs	r0, r3
   b706c:	4a14      	ldr	r2, [pc, #80]	; (b70c0 <rint+0x130>)
   b706e:	4243      	negs	r3, r0
   b7070:	4303      	orrs	r3, r0
   b7072:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   b7076:	0b1b      	lsrs	r3, r3, #12
   b7078:	0c62      	lsrs	r2, r4, #17
   b707a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   b707e:	0452      	lsls	r2, r2, #17
   b7080:	ea43 0702 	orr.w	r7, r3, r2
   b7084:	463b      	mov	r3, r7
   b7086:	e9de 6700 	ldrd	r6, r7, [lr]
   b708a:	ee10 2a10 	vmov	r2, s0
   b708e:	4630      	mov	r0, r6
   b7090:	4639      	mov	r1, r7
   b7092:	f000 f8b1 	bl	b71f8 <__adddf3>
   b7096:	e9cd 0100 	strd	r0, r1, [sp]
   b709a:	4632      	mov	r2, r6
   b709c:	463b      	mov	r3, r7
   b709e:	e9dd 0100 	ldrd	r0, r1, [sp]
   b70a2:	f000 f8a7 	bl	b71f4 <__aeabi_dsub>
   b70a6:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   b70aa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b70ae:	4602      	mov	r2, r0
   b70b0:	ea41 0304 	orr.w	r3, r1, r4
   b70b4:	ec43 2b10 	vmov	d0, r2, r3
   b70b8:	b003      	add	sp, #12
   b70ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b70bc:	000fffff 	.word	0x000fffff
   b70c0:	000b82a8 	.word	0x000b82a8
   b70c4:	00000000 	.word	0x00000000

000b70c8 <scalbn>:
   b70c8:	b538      	push	{r3, r4, r5, lr}
   b70ca:	ec53 2b10 	vmov	r2, r3, d0
   b70ce:	f3c3 510a 	ubfx	r1, r3, #20, #11
   b70d2:	4604      	mov	r4, r0
   b70d4:	469c      	mov	ip, r3
   b70d6:	bb89      	cbnz	r1, b713c <scalbn+0x74>
   b70d8:	ee10 1a10 	vmov	r1, s0
   b70dc:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   b70e0:	ea5c 0101 	orrs.w	r1, ip, r1
   b70e4:	d029      	beq.n	b713a <scalbn+0x72>
   b70e6:	4619      	mov	r1, r3
   b70e8:	2200      	movs	r2, #0
   b70ea:	4b3d      	ldr	r3, [pc, #244]	; (b71e0 <scalbn+0x118>)
   b70ec:	4d3d      	ldr	r5, [pc, #244]	; (b71e4 <scalbn+0x11c>)
   b70ee:	ee10 0a10 	vmov	r0, s0
   b70f2:	f000 fa37 	bl	b7564 <__aeabi_dmul>
   b70f6:	42ac      	cmp	r4, r5
   b70f8:	4602      	mov	r2, r0
   b70fa:	460b      	mov	r3, r1
   b70fc:	db16      	blt.n	b712c <scalbn+0x64>
   b70fe:	468c      	mov	ip, r1
   b7100:	f3c1 510a 	ubfx	r1, r1, #20, #11
   b7104:	3936      	subs	r1, #54	; 0x36
   b7106:	4421      	add	r1, r4
   b7108:	f240 70fe 	movw	r0, #2046	; 0x7fe
   b710c:	4281      	cmp	r1, r0
   b710e:	dc21      	bgt.n	b7154 <scalbn+0x8c>
   b7110:	2900      	cmp	r1, #0
   b7112:	dc47      	bgt.n	b71a4 <scalbn+0xdc>
   b7114:	f111 0f35 	cmn.w	r1, #53	; 0x35
   b7118:	da34      	bge.n	b7184 <scalbn+0xbc>
   b711a:	f24c 3150 	movw	r1, #50000	; 0xc350
   b711e:	428c      	cmp	r4, r1
   b7120:	dc18      	bgt.n	b7154 <scalbn+0x8c>
   b7122:	2b00      	cmp	r3, #0
   b7124:	a126      	add	r1, pc, #152	; (adr r1, b71c0 <scalbn+0xf8>)
   b7126:	e9d1 0100 	ldrd	r0, r1, [r1]
   b712a:	db44      	blt.n	b71b6 <scalbn+0xee>
   b712c:	a324      	add	r3, pc, #144	; (adr r3, b71c0 <scalbn+0xf8>)
   b712e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7132:	f000 fa17 	bl	b7564 <__aeabi_dmul>
   b7136:	ec41 0b10 	vmov	d0, r0, r1
   b713a:	bd38      	pop	{r3, r4, r5, pc}
   b713c:	f240 70ff 	movw	r0, #2047	; 0x7ff
   b7140:	4281      	cmp	r1, r0
   b7142:	d1e0      	bne.n	b7106 <scalbn+0x3e>
   b7144:	ee10 0a10 	vmov	r0, s0
   b7148:	4619      	mov	r1, r3
   b714a:	f000 f855 	bl	b71f8 <__adddf3>
   b714e:	ec41 0b10 	vmov	d0, r0, r1
   b7152:	bd38      	pop	{r3, r4, r5, pc}
   b7154:	2b00      	cmp	r3, #0
   b7156:	a11c      	add	r1, pc, #112	; (adr r1, b71c8 <scalbn+0x100>)
   b7158:	e9d1 0100 	ldrd	r0, r1, [r1]
   b715c:	db07      	blt.n	b716e <scalbn+0xa6>
   b715e:	a31a      	add	r3, pc, #104	; (adr r3, b71c8 <scalbn+0x100>)
   b7160:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7164:	f000 f9fe 	bl	b7564 <__aeabi_dmul>
   b7168:	ec41 0b10 	vmov	d0, r0, r1
   b716c:	bd38      	pop	{r3, r4, r5, pc}
   b716e:	a118      	add	r1, pc, #96	; (adr r1, b71d0 <scalbn+0x108>)
   b7170:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7174:	a314      	add	r3, pc, #80	; (adr r3, b71c8 <scalbn+0x100>)
   b7176:	e9d3 2300 	ldrd	r2, r3, [r3]
   b717a:	f000 f9f3 	bl	b7564 <__aeabi_dmul>
   b717e:	ec41 0b10 	vmov	d0, r0, r1
   b7182:	e7f3      	b.n	b716c <scalbn+0xa4>
   b7184:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b7188:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b718c:	3136      	adds	r1, #54	; 0x36
   b718e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b7192:	4610      	mov	r0, r2
   b7194:	4619      	mov	r1, r3
   b7196:	2200      	movs	r2, #0
   b7198:	4b13      	ldr	r3, [pc, #76]	; (b71e8 <scalbn+0x120>)
   b719a:	f000 f9e3 	bl	b7564 <__aeabi_dmul>
   b719e:	ec41 0b10 	vmov	d0, r0, r1
   b71a2:	bd38      	pop	{r3, r4, r5, pc}
   b71a4:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   b71a8:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   b71ac:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   b71b0:	ec43 2b10 	vmov	d0, r2, r3
   b71b4:	bd38      	pop	{r3, r4, r5, pc}
   b71b6:	a108      	add	r1, pc, #32	; (adr r1, b71d8 <scalbn+0x110>)
   b71b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b71bc:	e7b6      	b.n	b712c <scalbn+0x64>
   b71be:	bf00      	nop
   b71c0:	c2f8f359 	.word	0xc2f8f359
   b71c4:	01a56e1f 	.word	0x01a56e1f
   b71c8:	8800759c 	.word	0x8800759c
   b71cc:	7e37e43c 	.word	0x7e37e43c
   b71d0:	8800759c 	.word	0x8800759c
   b71d4:	fe37e43c 	.word	0xfe37e43c
   b71d8:	c2f8f359 	.word	0xc2f8f359
   b71dc:	81a56e1f 	.word	0x81a56e1f
   b71e0:	43500000 	.word	0x43500000
   b71e4:	ffff3cb0 	.word	0xffff3cb0
   b71e8:	3c900000 	.word	0x3c900000

000b71ec <__aeabi_drsub>:
   b71ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b71f0:	e002      	b.n	b71f8 <__adddf3>
   b71f2:	bf00      	nop

000b71f4 <__aeabi_dsub>:
   b71f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b71f8 <__adddf3>:
   b71f8:	b530      	push	{r4, r5, lr}
   b71fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b71fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7202:	ea94 0f05 	teq	r4, r5
   b7206:	bf08      	it	eq
   b7208:	ea90 0f02 	teqeq	r0, r2
   b720c:	bf1f      	itttt	ne
   b720e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7212:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b721a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b721e:	f000 80e2 	beq.w	b73e6 <__adddf3+0x1ee>
   b7222:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b722a:	bfb8      	it	lt
   b722c:	426d      	neglt	r5, r5
   b722e:	dd0c      	ble.n	b724a <__adddf3+0x52>
   b7230:	442c      	add	r4, r5
   b7232:	ea80 0202 	eor.w	r2, r0, r2
   b7236:	ea81 0303 	eor.w	r3, r1, r3
   b723a:	ea82 0000 	eor.w	r0, r2, r0
   b723e:	ea83 0101 	eor.w	r1, r3, r1
   b7242:	ea80 0202 	eor.w	r2, r0, r2
   b7246:	ea81 0303 	eor.w	r3, r1, r3
   b724a:	2d36      	cmp	r5, #54	; 0x36
   b724c:	bf88      	it	hi
   b724e:	bd30      	pophi	{r4, r5, pc}
   b7250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7254:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b725c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7260:	d002      	beq.n	b7268 <__adddf3+0x70>
   b7262:	4240      	negs	r0, r0
   b7264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b726c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7274:	d002      	beq.n	b727c <__adddf3+0x84>
   b7276:	4252      	negs	r2, r2
   b7278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b727c:	ea94 0f05 	teq	r4, r5
   b7280:	f000 80a7 	beq.w	b73d2 <__adddf3+0x1da>
   b7284:	f1a4 0401 	sub.w	r4, r4, #1
   b7288:	f1d5 0e20 	rsbs	lr, r5, #32
   b728c:	db0d      	blt.n	b72aa <__adddf3+0xb2>
   b728e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7292:	fa22 f205 	lsr.w	r2, r2, r5
   b7296:	1880      	adds	r0, r0, r2
   b7298:	f141 0100 	adc.w	r1, r1, #0
   b729c:	fa03 f20e 	lsl.w	r2, r3, lr
   b72a0:	1880      	adds	r0, r0, r2
   b72a2:	fa43 f305 	asr.w	r3, r3, r5
   b72a6:	4159      	adcs	r1, r3
   b72a8:	e00e      	b.n	b72c8 <__adddf3+0xd0>
   b72aa:	f1a5 0520 	sub.w	r5, r5, #32
   b72ae:	f10e 0e20 	add.w	lr, lr, #32
   b72b2:	2a01      	cmp	r2, #1
   b72b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b72b8:	bf28      	it	cs
   b72ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   b72be:	fa43 f305 	asr.w	r3, r3, r5
   b72c2:	18c0      	adds	r0, r0, r3
   b72c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b72c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b72cc:	d507      	bpl.n	b72de <__adddf3+0xe6>
   b72ce:	f04f 0e00 	mov.w	lr, #0
   b72d2:	f1dc 0c00 	rsbs	ip, ip, #0
   b72d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b72da:	eb6e 0101 	sbc.w	r1, lr, r1
   b72de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b72e2:	d31b      	bcc.n	b731c <__adddf3+0x124>
   b72e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b72e8:	d30c      	bcc.n	b7304 <__adddf3+0x10c>
   b72ea:	0849      	lsrs	r1, r1, #1
   b72ec:	ea5f 0030 	movs.w	r0, r0, rrx
   b72f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b72f4:	f104 0401 	add.w	r4, r4, #1
   b72f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b72fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7300:	f080 809a 	bcs.w	b7438 <__adddf3+0x240>
   b7304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7308:	bf08      	it	eq
   b730a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b730e:	f150 0000 	adcs.w	r0, r0, #0
   b7312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7316:	ea41 0105 	orr.w	r1, r1, r5
   b731a:	bd30      	pop	{r4, r5, pc}
   b731c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7320:	4140      	adcs	r0, r0
   b7322:	eb41 0101 	adc.w	r1, r1, r1
   b7326:	3c01      	subs	r4, #1
   b7328:	bf28      	it	cs
   b732a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b732e:	d2e9      	bcs.n	b7304 <__adddf3+0x10c>
   b7330:	f091 0f00 	teq	r1, #0
   b7334:	bf04      	itt	eq
   b7336:	4601      	moveq	r1, r0
   b7338:	2000      	moveq	r0, #0
   b733a:	fab1 f381 	clz	r3, r1
   b733e:	bf08      	it	eq
   b7340:	3320      	addeq	r3, #32
   b7342:	f1a3 030b 	sub.w	r3, r3, #11
   b7346:	f1b3 0220 	subs.w	r2, r3, #32
   b734a:	da0c      	bge.n	b7366 <__adddf3+0x16e>
   b734c:	320c      	adds	r2, #12
   b734e:	dd08      	ble.n	b7362 <__adddf3+0x16a>
   b7350:	f102 0c14 	add.w	ip, r2, #20
   b7354:	f1c2 020c 	rsb	r2, r2, #12
   b7358:	fa01 f00c 	lsl.w	r0, r1, ip
   b735c:	fa21 f102 	lsr.w	r1, r1, r2
   b7360:	e00c      	b.n	b737c <__adddf3+0x184>
   b7362:	f102 0214 	add.w	r2, r2, #20
   b7366:	bfd8      	it	le
   b7368:	f1c2 0c20 	rsble	ip, r2, #32
   b736c:	fa01 f102 	lsl.w	r1, r1, r2
   b7370:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7374:	bfdc      	itt	le
   b7376:	ea41 010c 	orrle.w	r1, r1, ip
   b737a:	4090      	lslle	r0, r2
   b737c:	1ae4      	subs	r4, r4, r3
   b737e:	bfa2      	ittt	ge
   b7380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7384:	4329      	orrge	r1, r5
   b7386:	bd30      	popge	{r4, r5, pc}
   b7388:	ea6f 0404 	mvn.w	r4, r4
   b738c:	3c1f      	subs	r4, #31
   b738e:	da1c      	bge.n	b73ca <__adddf3+0x1d2>
   b7390:	340c      	adds	r4, #12
   b7392:	dc0e      	bgt.n	b73b2 <__adddf3+0x1ba>
   b7394:	f104 0414 	add.w	r4, r4, #20
   b7398:	f1c4 0220 	rsb	r2, r4, #32
   b739c:	fa20 f004 	lsr.w	r0, r0, r4
   b73a0:	fa01 f302 	lsl.w	r3, r1, r2
   b73a4:	ea40 0003 	orr.w	r0, r0, r3
   b73a8:	fa21 f304 	lsr.w	r3, r1, r4
   b73ac:	ea45 0103 	orr.w	r1, r5, r3
   b73b0:	bd30      	pop	{r4, r5, pc}
   b73b2:	f1c4 040c 	rsb	r4, r4, #12
   b73b6:	f1c4 0220 	rsb	r2, r4, #32
   b73ba:	fa20 f002 	lsr.w	r0, r0, r2
   b73be:	fa01 f304 	lsl.w	r3, r1, r4
   b73c2:	ea40 0003 	orr.w	r0, r0, r3
   b73c6:	4629      	mov	r1, r5
   b73c8:	bd30      	pop	{r4, r5, pc}
   b73ca:	fa21 f004 	lsr.w	r0, r1, r4
   b73ce:	4629      	mov	r1, r5
   b73d0:	bd30      	pop	{r4, r5, pc}
   b73d2:	f094 0f00 	teq	r4, #0
   b73d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b73da:	bf06      	itte	eq
   b73dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b73e0:	3401      	addeq	r4, #1
   b73e2:	3d01      	subne	r5, #1
   b73e4:	e74e      	b.n	b7284 <__adddf3+0x8c>
   b73e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b73ea:	bf18      	it	ne
   b73ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b73f0:	d029      	beq.n	b7446 <__adddf3+0x24e>
   b73f2:	ea94 0f05 	teq	r4, r5
   b73f6:	bf08      	it	eq
   b73f8:	ea90 0f02 	teqeq	r0, r2
   b73fc:	d005      	beq.n	b740a <__adddf3+0x212>
   b73fe:	ea54 0c00 	orrs.w	ip, r4, r0
   b7402:	bf04      	itt	eq
   b7404:	4619      	moveq	r1, r3
   b7406:	4610      	moveq	r0, r2
   b7408:	bd30      	pop	{r4, r5, pc}
   b740a:	ea91 0f03 	teq	r1, r3
   b740e:	bf1e      	ittt	ne
   b7410:	2100      	movne	r1, #0
   b7412:	2000      	movne	r0, #0
   b7414:	bd30      	popne	{r4, r5, pc}
   b7416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b741a:	d105      	bne.n	b7428 <__adddf3+0x230>
   b741c:	0040      	lsls	r0, r0, #1
   b741e:	4149      	adcs	r1, r1
   b7420:	bf28      	it	cs
   b7422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7426:	bd30      	pop	{r4, r5, pc}
   b7428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b742c:	bf3c      	itt	cc
   b742e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7432:	bd30      	popcc	{r4, r5, pc}
   b7434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b743c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7440:	f04f 0000 	mov.w	r0, #0
   b7444:	bd30      	pop	{r4, r5, pc}
   b7446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b744a:	bf1a      	itte	ne
   b744c:	4619      	movne	r1, r3
   b744e:	4610      	movne	r0, r2
   b7450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7454:	bf1c      	itt	ne
   b7456:	460b      	movne	r3, r1
   b7458:	4602      	movne	r2, r0
   b745a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b745e:	bf06      	itte	eq
   b7460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7464:	ea91 0f03 	teqeq	r1, r3
   b7468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b746c:	bd30      	pop	{r4, r5, pc}
   b746e:	bf00      	nop

000b7470 <__aeabi_ui2d>:
   b7470:	f090 0f00 	teq	r0, #0
   b7474:	bf04      	itt	eq
   b7476:	2100      	moveq	r1, #0
   b7478:	4770      	bxeq	lr
   b747a:	b530      	push	{r4, r5, lr}
   b747c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7480:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7484:	f04f 0500 	mov.w	r5, #0
   b7488:	f04f 0100 	mov.w	r1, #0
   b748c:	e750      	b.n	b7330 <__adddf3+0x138>
   b748e:	bf00      	nop

000b7490 <__aeabi_i2d>:
   b7490:	f090 0f00 	teq	r0, #0
   b7494:	bf04      	itt	eq
   b7496:	2100      	moveq	r1, #0
   b7498:	4770      	bxeq	lr
   b749a:	b530      	push	{r4, r5, lr}
   b749c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b74a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b74a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b74a8:	bf48      	it	mi
   b74aa:	4240      	negmi	r0, r0
   b74ac:	f04f 0100 	mov.w	r1, #0
   b74b0:	e73e      	b.n	b7330 <__adddf3+0x138>
   b74b2:	bf00      	nop

000b74b4 <__aeabi_f2d>:
   b74b4:	0042      	lsls	r2, r0, #1
   b74b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b74ba:	ea4f 0131 	mov.w	r1, r1, rrx
   b74be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b74c2:	bf1f      	itttt	ne
   b74c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b74c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b74cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b74d0:	4770      	bxne	lr
   b74d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b74d6:	bf08      	it	eq
   b74d8:	4770      	bxeq	lr
   b74da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b74de:	bf04      	itt	eq
   b74e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b74e4:	4770      	bxeq	lr
   b74e6:	b530      	push	{r4, r5, lr}
   b74e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   b74ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b74f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b74f4:	e71c      	b.n	b7330 <__adddf3+0x138>
   b74f6:	bf00      	nop

000b74f8 <__aeabi_ul2d>:
   b74f8:	ea50 0201 	orrs.w	r2, r0, r1
   b74fc:	bf08      	it	eq
   b74fe:	4770      	bxeq	lr
   b7500:	b530      	push	{r4, r5, lr}
   b7502:	f04f 0500 	mov.w	r5, #0
   b7506:	e00a      	b.n	b751e <__aeabi_l2d+0x16>

000b7508 <__aeabi_l2d>:
   b7508:	ea50 0201 	orrs.w	r2, r0, r1
   b750c:	bf08      	it	eq
   b750e:	4770      	bxeq	lr
   b7510:	b530      	push	{r4, r5, lr}
   b7512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7516:	d502      	bpl.n	b751e <__aeabi_l2d+0x16>
   b7518:	4240      	negs	r0, r0
   b751a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b751e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7522:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b752a:	f43f aed8 	beq.w	b72de <__adddf3+0xe6>
   b752e:	f04f 0203 	mov.w	r2, #3
   b7532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7536:	bf18      	it	ne
   b7538:	3203      	addne	r2, #3
   b753a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b753e:	bf18      	it	ne
   b7540:	3203      	addne	r2, #3
   b7542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7546:	f1c2 0320 	rsb	r3, r2, #32
   b754a:	fa00 fc03 	lsl.w	ip, r0, r3
   b754e:	fa20 f002 	lsr.w	r0, r0, r2
   b7552:	fa01 fe03 	lsl.w	lr, r1, r3
   b7556:	ea40 000e 	orr.w	r0, r0, lr
   b755a:	fa21 f102 	lsr.w	r1, r1, r2
   b755e:	4414      	add	r4, r2
   b7560:	e6bd      	b.n	b72de <__adddf3+0xe6>
   b7562:	bf00      	nop

000b7564 <__aeabi_dmul>:
   b7564:	b570      	push	{r4, r5, r6, lr}
   b7566:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b756a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b756e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7572:	bf1d      	ittte	ne
   b7574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7578:	ea94 0f0c 	teqne	r4, ip
   b757c:	ea95 0f0c 	teqne	r5, ip
   b7580:	f000 f8de 	bleq	b7740 <__aeabi_dmul+0x1dc>
   b7584:	442c      	add	r4, r5
   b7586:	ea81 0603 	eor.w	r6, r1, r3
   b758a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b758e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7596:	bf18      	it	ne
   b7598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b759c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b75a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b75a4:	d038      	beq.n	b7618 <__aeabi_dmul+0xb4>
   b75a6:	fba0 ce02 	umull	ip, lr, r0, r2
   b75aa:	f04f 0500 	mov.w	r5, #0
   b75ae:	fbe1 e502 	umlal	lr, r5, r1, r2
   b75b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b75b6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b75ba:	f04f 0600 	mov.w	r6, #0
   b75be:	fbe1 5603 	umlal	r5, r6, r1, r3
   b75c2:	f09c 0f00 	teq	ip, #0
   b75c6:	bf18      	it	ne
   b75c8:	f04e 0e01 	orrne.w	lr, lr, #1
   b75cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b75d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b75d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b75d8:	d204      	bcs.n	b75e4 <__aeabi_dmul+0x80>
   b75da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b75de:	416d      	adcs	r5, r5
   b75e0:	eb46 0606 	adc.w	r6, r6, r6
   b75e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b75e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b75ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b75f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b75f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b75f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b75fc:	bf88      	it	hi
   b75fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7602:	d81e      	bhi.n	b7642 <__aeabi_dmul+0xde>
   b7604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7608:	bf08      	it	eq
   b760a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b760e:	f150 0000 	adcs.w	r0, r0, #0
   b7612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7616:	bd70      	pop	{r4, r5, r6, pc}
   b7618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b761c:	ea46 0101 	orr.w	r1, r6, r1
   b7620:	ea40 0002 	orr.w	r0, r0, r2
   b7624:	ea81 0103 	eor.w	r1, r1, r3
   b7628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b762c:	bfc2      	ittt	gt
   b762e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7636:	bd70      	popgt	{r4, r5, r6, pc}
   b7638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b763c:	f04f 0e00 	mov.w	lr, #0
   b7640:	3c01      	subs	r4, #1
   b7642:	f300 80ab 	bgt.w	b779c <__aeabi_dmul+0x238>
   b7646:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b764a:	bfde      	ittt	le
   b764c:	2000      	movle	r0, #0
   b764e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7652:	bd70      	pople	{r4, r5, r6, pc}
   b7654:	f1c4 0400 	rsb	r4, r4, #0
   b7658:	3c20      	subs	r4, #32
   b765a:	da35      	bge.n	b76c8 <__aeabi_dmul+0x164>
   b765c:	340c      	adds	r4, #12
   b765e:	dc1b      	bgt.n	b7698 <__aeabi_dmul+0x134>
   b7660:	f104 0414 	add.w	r4, r4, #20
   b7664:	f1c4 0520 	rsb	r5, r4, #32
   b7668:	fa00 f305 	lsl.w	r3, r0, r5
   b766c:	fa20 f004 	lsr.w	r0, r0, r4
   b7670:	fa01 f205 	lsl.w	r2, r1, r5
   b7674:	ea40 0002 	orr.w	r0, r0, r2
   b7678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b767c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7684:	fa21 f604 	lsr.w	r6, r1, r4
   b7688:	eb42 0106 	adc.w	r1, r2, r6
   b768c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7690:	bf08      	it	eq
   b7692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7696:	bd70      	pop	{r4, r5, r6, pc}
   b7698:	f1c4 040c 	rsb	r4, r4, #12
   b769c:	f1c4 0520 	rsb	r5, r4, #32
   b76a0:	fa00 f304 	lsl.w	r3, r0, r4
   b76a4:	fa20 f005 	lsr.w	r0, r0, r5
   b76a8:	fa01 f204 	lsl.w	r2, r1, r4
   b76ac:	ea40 0002 	orr.w	r0, r0, r2
   b76b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b76b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b76b8:	f141 0100 	adc.w	r1, r1, #0
   b76bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b76c0:	bf08      	it	eq
   b76c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b76c6:	bd70      	pop	{r4, r5, r6, pc}
   b76c8:	f1c4 0520 	rsb	r5, r4, #32
   b76cc:	fa00 f205 	lsl.w	r2, r0, r5
   b76d0:	ea4e 0e02 	orr.w	lr, lr, r2
   b76d4:	fa20 f304 	lsr.w	r3, r0, r4
   b76d8:	fa01 f205 	lsl.w	r2, r1, r5
   b76dc:	ea43 0302 	orr.w	r3, r3, r2
   b76e0:	fa21 f004 	lsr.w	r0, r1, r4
   b76e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b76e8:	fa21 f204 	lsr.w	r2, r1, r4
   b76ec:	ea20 0002 	bic.w	r0, r0, r2
   b76f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b76f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b76f8:	bf08      	it	eq
   b76fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b76fe:	bd70      	pop	{r4, r5, r6, pc}
   b7700:	f094 0f00 	teq	r4, #0
   b7704:	d10f      	bne.n	b7726 <__aeabi_dmul+0x1c2>
   b7706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b770a:	0040      	lsls	r0, r0, #1
   b770c:	eb41 0101 	adc.w	r1, r1, r1
   b7710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b7714:	bf08      	it	eq
   b7716:	3c01      	subeq	r4, #1
   b7718:	d0f7      	beq.n	b770a <__aeabi_dmul+0x1a6>
   b771a:	ea41 0106 	orr.w	r1, r1, r6
   b771e:	f095 0f00 	teq	r5, #0
   b7722:	bf18      	it	ne
   b7724:	4770      	bxne	lr
   b7726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b772a:	0052      	lsls	r2, r2, #1
   b772c:	eb43 0303 	adc.w	r3, r3, r3
   b7730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b7734:	bf08      	it	eq
   b7736:	3d01      	subeq	r5, #1
   b7738:	d0f7      	beq.n	b772a <__aeabi_dmul+0x1c6>
   b773a:	ea43 0306 	orr.w	r3, r3, r6
   b773e:	4770      	bx	lr
   b7740:	ea94 0f0c 	teq	r4, ip
   b7744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b7748:	bf18      	it	ne
   b774a:	ea95 0f0c 	teqne	r5, ip
   b774e:	d00c      	beq.n	b776a <__aeabi_dmul+0x206>
   b7750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b7754:	bf18      	it	ne
   b7756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b775a:	d1d1      	bne.n	b7700 <__aeabi_dmul+0x19c>
   b775c:	ea81 0103 	eor.w	r1, r1, r3
   b7760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7764:	f04f 0000 	mov.w	r0, #0
   b7768:	bd70      	pop	{r4, r5, r6, pc}
   b776a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b776e:	bf06      	itte	eq
   b7770:	4610      	moveq	r0, r2
   b7772:	4619      	moveq	r1, r3
   b7774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7778:	d019      	beq.n	b77ae <__aeabi_dmul+0x24a>
   b777a:	ea94 0f0c 	teq	r4, ip
   b777e:	d102      	bne.n	b7786 <__aeabi_dmul+0x222>
   b7780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b7784:	d113      	bne.n	b77ae <__aeabi_dmul+0x24a>
   b7786:	ea95 0f0c 	teq	r5, ip
   b778a:	d105      	bne.n	b7798 <__aeabi_dmul+0x234>
   b778c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b7790:	bf1c      	itt	ne
   b7792:	4610      	movne	r0, r2
   b7794:	4619      	movne	r1, r3
   b7796:	d10a      	bne.n	b77ae <__aeabi_dmul+0x24a>
   b7798:	ea81 0103 	eor.w	r1, r1, r3
   b779c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b77a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b77a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b77a8:	f04f 0000 	mov.w	r0, #0
   b77ac:	bd70      	pop	{r4, r5, r6, pc}
   b77ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b77b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b77b6:	bd70      	pop	{r4, r5, r6, pc}

000b77b8 <__aeabi_ddiv>:
   b77b8:	b570      	push	{r4, r5, r6, lr}
   b77ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b77be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b77c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b77c6:	bf1d      	ittte	ne
   b77c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b77cc:	ea94 0f0c 	teqne	r4, ip
   b77d0:	ea95 0f0c 	teqne	r5, ip
   b77d4:	f000 f8a7 	bleq	b7926 <__aeabi_ddiv+0x16e>
   b77d8:	eba4 0405 	sub.w	r4, r4, r5
   b77dc:	ea81 0e03 	eor.w	lr, r1, r3
   b77e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b77e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b77e8:	f000 8088 	beq.w	b78fc <__aeabi_ddiv+0x144>
   b77ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b77f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b77f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b77f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b77fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b7800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b7804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b7808:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b780c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b7810:	429d      	cmp	r5, r3
   b7812:	bf08      	it	eq
   b7814:	4296      	cmpeq	r6, r2
   b7816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b781a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b781e:	d202      	bcs.n	b7826 <__aeabi_ddiv+0x6e>
   b7820:	085b      	lsrs	r3, r3, #1
   b7822:	ea4f 0232 	mov.w	r2, r2, rrx
   b7826:	1ab6      	subs	r6, r6, r2
   b7828:	eb65 0503 	sbc.w	r5, r5, r3
   b782c:	085b      	lsrs	r3, r3, #1
   b782e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b7836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b783a:	ebb6 0e02 	subs.w	lr, r6, r2
   b783e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7842:	bf22      	ittt	cs
   b7844:	1ab6      	subcs	r6, r6, r2
   b7846:	4675      	movcs	r5, lr
   b7848:	ea40 000c 	orrcs.w	r0, r0, ip
   b784c:	085b      	lsrs	r3, r3, #1
   b784e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7852:	ebb6 0e02 	subs.w	lr, r6, r2
   b7856:	eb75 0e03 	sbcs.w	lr, r5, r3
   b785a:	bf22      	ittt	cs
   b785c:	1ab6      	subcs	r6, r6, r2
   b785e:	4675      	movcs	r5, lr
   b7860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b7864:	085b      	lsrs	r3, r3, #1
   b7866:	ea4f 0232 	mov.w	r2, r2, rrx
   b786a:	ebb6 0e02 	subs.w	lr, r6, r2
   b786e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b7872:	bf22      	ittt	cs
   b7874:	1ab6      	subcs	r6, r6, r2
   b7876:	4675      	movcs	r5, lr
   b7878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b787c:	085b      	lsrs	r3, r3, #1
   b787e:	ea4f 0232 	mov.w	r2, r2, rrx
   b7882:	ebb6 0e02 	subs.w	lr, r6, r2
   b7886:	eb75 0e03 	sbcs.w	lr, r5, r3
   b788a:	bf22      	ittt	cs
   b788c:	1ab6      	subcs	r6, r6, r2
   b788e:	4675      	movcs	r5, lr
   b7890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b7894:	ea55 0e06 	orrs.w	lr, r5, r6
   b7898:	d018      	beq.n	b78cc <__aeabi_ddiv+0x114>
   b789a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b789e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b78a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b78a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b78aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b78ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b78b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b78b6:	d1c0      	bne.n	b783a <__aeabi_ddiv+0x82>
   b78b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b78bc:	d10b      	bne.n	b78d6 <__aeabi_ddiv+0x11e>
   b78be:	ea41 0100 	orr.w	r1, r1, r0
   b78c2:	f04f 0000 	mov.w	r0, #0
   b78c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b78ca:	e7b6      	b.n	b783a <__aeabi_ddiv+0x82>
   b78cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b78d0:	bf04      	itt	eq
   b78d2:	4301      	orreq	r1, r0
   b78d4:	2000      	moveq	r0, #0
   b78d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b78da:	bf88      	it	hi
   b78dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b78e0:	f63f aeaf 	bhi.w	b7642 <__aeabi_dmul+0xde>
   b78e4:	ebb5 0c03 	subs.w	ip, r5, r3
   b78e8:	bf04      	itt	eq
   b78ea:	ebb6 0c02 	subseq.w	ip, r6, r2
   b78ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b78f2:	f150 0000 	adcs.w	r0, r0, #0
   b78f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b78fa:	bd70      	pop	{r4, r5, r6, pc}
   b78fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b7900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b7904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b7908:	bfc2      	ittt	gt
   b790a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b790e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7912:	bd70      	popgt	{r4, r5, r6, pc}
   b7914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7918:	f04f 0e00 	mov.w	lr, #0
   b791c:	3c01      	subs	r4, #1
   b791e:	e690      	b.n	b7642 <__aeabi_dmul+0xde>
   b7920:	ea45 0e06 	orr.w	lr, r5, r6
   b7924:	e68d      	b.n	b7642 <__aeabi_dmul+0xde>
   b7926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b792a:	ea94 0f0c 	teq	r4, ip
   b792e:	bf08      	it	eq
   b7930:	ea95 0f0c 	teqeq	r5, ip
   b7934:	f43f af3b 	beq.w	b77ae <__aeabi_dmul+0x24a>
   b7938:	ea94 0f0c 	teq	r4, ip
   b793c:	d10a      	bne.n	b7954 <__aeabi_ddiv+0x19c>
   b793e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7942:	f47f af34 	bne.w	b77ae <__aeabi_dmul+0x24a>
   b7946:	ea95 0f0c 	teq	r5, ip
   b794a:	f47f af25 	bne.w	b7798 <__aeabi_dmul+0x234>
   b794e:	4610      	mov	r0, r2
   b7950:	4619      	mov	r1, r3
   b7952:	e72c      	b.n	b77ae <__aeabi_dmul+0x24a>
   b7954:	ea95 0f0c 	teq	r5, ip
   b7958:	d106      	bne.n	b7968 <__aeabi_ddiv+0x1b0>
   b795a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b795e:	f43f aefd 	beq.w	b775c <__aeabi_dmul+0x1f8>
   b7962:	4610      	mov	r0, r2
   b7964:	4619      	mov	r1, r3
   b7966:	e722      	b.n	b77ae <__aeabi_dmul+0x24a>
   b7968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b796c:	bf18      	it	ne
   b796e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b7972:	f47f aec5 	bne.w	b7700 <__aeabi_dmul+0x19c>
   b7976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b797a:	f47f af0d 	bne.w	b7798 <__aeabi_dmul+0x234>
   b797e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b7982:	f47f aeeb 	bne.w	b775c <__aeabi_dmul+0x1f8>
   b7986:	e712      	b.n	b77ae <__aeabi_dmul+0x24a>

000b7988 <__gedf2>:
   b7988:	f04f 3cff 	mov.w	ip, #4294967295
   b798c:	e006      	b.n	b799c <__cmpdf2+0x4>
   b798e:	bf00      	nop

000b7990 <__ledf2>:
   b7990:	f04f 0c01 	mov.w	ip, #1
   b7994:	e002      	b.n	b799c <__cmpdf2+0x4>
   b7996:	bf00      	nop

000b7998 <__cmpdf2>:
   b7998:	f04f 0c01 	mov.w	ip, #1
   b799c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b79a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b79a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b79a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b79ac:	bf18      	it	ne
   b79ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b79b2:	d01b      	beq.n	b79ec <__cmpdf2+0x54>
   b79b4:	b001      	add	sp, #4
   b79b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b79ba:	bf0c      	ite	eq
   b79bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b79c0:	ea91 0f03 	teqne	r1, r3
   b79c4:	bf02      	ittt	eq
   b79c6:	ea90 0f02 	teqeq	r0, r2
   b79ca:	2000      	moveq	r0, #0
   b79cc:	4770      	bxeq	lr
   b79ce:	f110 0f00 	cmn.w	r0, #0
   b79d2:	ea91 0f03 	teq	r1, r3
   b79d6:	bf58      	it	pl
   b79d8:	4299      	cmppl	r1, r3
   b79da:	bf08      	it	eq
   b79dc:	4290      	cmpeq	r0, r2
   b79de:	bf2c      	ite	cs
   b79e0:	17d8      	asrcs	r0, r3, #31
   b79e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b79e6:	f040 0001 	orr.w	r0, r0, #1
   b79ea:	4770      	bx	lr
   b79ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b79f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b79f4:	d102      	bne.n	b79fc <__cmpdf2+0x64>
   b79f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b79fa:	d107      	bne.n	b7a0c <__cmpdf2+0x74>
   b79fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7a04:	d1d6      	bne.n	b79b4 <__cmpdf2+0x1c>
   b7a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7a0a:	d0d3      	beq.n	b79b4 <__cmpdf2+0x1c>
   b7a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b7a10:	4770      	bx	lr
   b7a12:	bf00      	nop

000b7a14 <__aeabi_cdrcmple>:
   b7a14:	4684      	mov	ip, r0
   b7a16:	4610      	mov	r0, r2
   b7a18:	4662      	mov	r2, ip
   b7a1a:	468c      	mov	ip, r1
   b7a1c:	4619      	mov	r1, r3
   b7a1e:	4663      	mov	r3, ip
   b7a20:	e000      	b.n	b7a24 <__aeabi_cdcmpeq>
   b7a22:	bf00      	nop

000b7a24 <__aeabi_cdcmpeq>:
   b7a24:	b501      	push	{r0, lr}
   b7a26:	f7ff ffb7 	bl	b7998 <__cmpdf2>
   b7a2a:	2800      	cmp	r0, #0
   b7a2c:	bf48      	it	mi
   b7a2e:	f110 0f00 	cmnmi.w	r0, #0
   b7a32:	bd01      	pop	{r0, pc}

000b7a34 <__aeabi_dcmpeq>:
   b7a34:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a38:	f7ff fff4 	bl	b7a24 <__aeabi_cdcmpeq>
   b7a3c:	bf0c      	ite	eq
   b7a3e:	2001      	moveq	r0, #1
   b7a40:	2000      	movne	r0, #0
   b7a42:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a46:	bf00      	nop

000b7a48 <__aeabi_dcmplt>:
   b7a48:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a4c:	f7ff ffea 	bl	b7a24 <__aeabi_cdcmpeq>
   b7a50:	bf34      	ite	cc
   b7a52:	2001      	movcc	r0, #1
   b7a54:	2000      	movcs	r0, #0
   b7a56:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a5a:	bf00      	nop

000b7a5c <__aeabi_dcmple>:
   b7a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a60:	f7ff ffe0 	bl	b7a24 <__aeabi_cdcmpeq>
   b7a64:	bf94      	ite	ls
   b7a66:	2001      	movls	r0, #1
   b7a68:	2000      	movhi	r0, #0
   b7a6a:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a6e:	bf00      	nop

000b7a70 <__aeabi_dcmpge>:
   b7a70:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a74:	f7ff ffce 	bl	b7a14 <__aeabi_cdrcmple>
   b7a78:	bf94      	ite	ls
   b7a7a:	2001      	movls	r0, #1
   b7a7c:	2000      	movhi	r0, #0
   b7a7e:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a82:	bf00      	nop

000b7a84 <__aeabi_dcmpgt>:
   b7a84:	f84d ed08 	str.w	lr, [sp, #-8]!
   b7a88:	f7ff ffc4 	bl	b7a14 <__aeabi_cdrcmple>
   b7a8c:	bf34      	ite	cc
   b7a8e:	2001      	movcc	r0, #1
   b7a90:	2000      	movcs	r0, #0
   b7a92:	f85d fb08 	ldr.w	pc, [sp], #8
   b7a96:	bf00      	nop

000b7a98 <__aeabi_dcmpun>:
   b7a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b7a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7aa0:	d102      	bne.n	b7aa8 <__aeabi_dcmpun+0x10>
   b7aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b7aa6:	d10a      	bne.n	b7abe <__aeabi_dcmpun+0x26>
   b7aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b7aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b7ab0:	d102      	bne.n	b7ab8 <__aeabi_dcmpun+0x20>
   b7ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b7ab6:	d102      	bne.n	b7abe <__aeabi_dcmpun+0x26>
   b7ab8:	f04f 0000 	mov.w	r0, #0
   b7abc:	4770      	bx	lr
   b7abe:	f04f 0001 	mov.w	r0, #1
   b7ac2:	4770      	bx	lr

000b7ac4 <__aeabi_d2uiz>:
   b7ac4:	004a      	lsls	r2, r1, #1
   b7ac6:	d211      	bcs.n	b7aec <__aeabi_d2uiz+0x28>
   b7ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b7acc:	d211      	bcs.n	b7af2 <__aeabi_d2uiz+0x2e>
   b7ace:	d50d      	bpl.n	b7aec <__aeabi_d2uiz+0x28>
   b7ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7ad8:	d40e      	bmi.n	b7af8 <__aeabi_d2uiz+0x34>
   b7ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7ae6:	fa23 f002 	lsr.w	r0, r3, r2
   b7aea:	4770      	bx	lr
   b7aec:	f04f 0000 	mov.w	r0, #0
   b7af0:	4770      	bx	lr
   b7af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7af6:	d102      	bne.n	b7afe <__aeabi_d2uiz+0x3a>
   b7af8:	f04f 30ff 	mov.w	r0, #4294967295
   b7afc:	4770      	bx	lr
   b7afe:	f04f 0000 	mov.w	r0, #0
   b7b02:	4770      	bx	lr

000b7b04 <__aeabi_d2f>:
   b7b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b7b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b7b0c:	bf24      	itt	cs
   b7b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b7b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b7b16:	d90d      	bls.n	b7b34 <__aeabi_d2f+0x30>
   b7b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b7b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b7b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b7b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b7b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b7b2c:	bf08      	it	eq
   b7b2e:	f020 0001 	biceq.w	r0, r0, #1
   b7b32:	4770      	bx	lr
   b7b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b7b38:	d121      	bne.n	b7b7e <__aeabi_d2f+0x7a>
   b7b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b7b3e:	bfbc      	itt	lt
   b7b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b7b44:	4770      	bxlt	lr
   b7b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b7b4e:	f1c2 0218 	rsb	r2, r2, #24
   b7b52:	f1c2 0c20 	rsb	ip, r2, #32
   b7b56:	fa10 f30c 	lsls.w	r3, r0, ip
   b7b5a:	fa20 f002 	lsr.w	r0, r0, r2
   b7b5e:	bf18      	it	ne
   b7b60:	f040 0001 	orrne.w	r0, r0, #1
   b7b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b7b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b7b70:	ea40 000c 	orr.w	r0, r0, ip
   b7b74:	fa23 f302 	lsr.w	r3, r3, r2
   b7b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b7b7c:	e7cc      	b.n	b7b18 <__aeabi_d2f+0x14>
   b7b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b7b82:	d107      	bne.n	b7b94 <__aeabi_d2f+0x90>
   b7b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b7b88:	bf1e      	ittt	ne
   b7b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b7b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b7b92:	4770      	bxne	lr
   b7b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b7b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b7b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b7ba0:	4770      	bx	lr
   b7ba2:	bf00      	nop

000b7ba4 <__aeabi_uldivmod>:
   b7ba4:	b953      	cbnz	r3, b7bbc <__aeabi_uldivmod+0x18>
   b7ba6:	b94a      	cbnz	r2, b7bbc <__aeabi_uldivmod+0x18>
   b7ba8:	2900      	cmp	r1, #0
   b7baa:	bf08      	it	eq
   b7bac:	2800      	cmpeq	r0, #0
   b7bae:	bf1c      	itt	ne
   b7bb0:	f04f 31ff 	movne.w	r1, #4294967295
   b7bb4:	f04f 30ff 	movne.w	r0, #4294967295
   b7bb8:	f000 b992 	b.w	b7ee0 <__aeabi_idiv0>
   b7bbc:	f1ad 0c08 	sub.w	ip, sp, #8
   b7bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b7bc4:	f000 f824 	bl	b7c10 <__udivmoddi4>
   b7bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
   b7bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b7bd0:	b004      	add	sp, #16
   b7bd2:	4770      	bx	lr

000b7bd4 <__aeabi_d2ulz>:
   b7bd4:	b5d0      	push	{r4, r6, r7, lr}
   b7bd6:	4b0c      	ldr	r3, [pc, #48]	; (b7c08 <__aeabi_d2ulz+0x34>)
   b7bd8:	2200      	movs	r2, #0
   b7bda:	4606      	mov	r6, r0
   b7bdc:	460f      	mov	r7, r1
   b7bde:	f7ff fcc1 	bl	b7564 <__aeabi_dmul>
   b7be2:	f7ff ff6f 	bl	b7ac4 <__aeabi_d2uiz>
   b7be6:	4604      	mov	r4, r0
   b7be8:	f7ff fc42 	bl	b7470 <__aeabi_ui2d>
   b7bec:	4b07      	ldr	r3, [pc, #28]	; (b7c0c <__aeabi_d2ulz+0x38>)
   b7bee:	2200      	movs	r2, #0
   b7bf0:	f7ff fcb8 	bl	b7564 <__aeabi_dmul>
   b7bf4:	4602      	mov	r2, r0
   b7bf6:	460b      	mov	r3, r1
   b7bf8:	4630      	mov	r0, r6
   b7bfa:	4639      	mov	r1, r7
   b7bfc:	f7ff fafa 	bl	b71f4 <__aeabi_dsub>
   b7c00:	f7ff ff60 	bl	b7ac4 <__aeabi_d2uiz>
   b7c04:	4621      	mov	r1, r4
   b7c06:	bdd0      	pop	{r4, r6, r7, pc}
   b7c08:	3df00000 	.word	0x3df00000
   b7c0c:	41f00000 	.word	0x41f00000

000b7c10 <__udivmoddi4>:
   b7c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7c14:	9d08      	ldr	r5, [sp, #32]
   b7c16:	4604      	mov	r4, r0
   b7c18:	468e      	mov	lr, r1
   b7c1a:	2b00      	cmp	r3, #0
   b7c1c:	d14d      	bne.n	b7cba <__udivmoddi4+0xaa>
   b7c1e:	428a      	cmp	r2, r1
   b7c20:	4694      	mov	ip, r2
   b7c22:	d969      	bls.n	b7cf8 <__udivmoddi4+0xe8>
   b7c24:	fab2 f282 	clz	r2, r2
   b7c28:	b152      	cbz	r2, b7c40 <__udivmoddi4+0x30>
   b7c2a:	fa01 f302 	lsl.w	r3, r1, r2
   b7c2e:	f1c2 0120 	rsb	r1, r2, #32
   b7c32:	fa20 f101 	lsr.w	r1, r0, r1
   b7c36:	fa0c fc02 	lsl.w	ip, ip, r2
   b7c3a:	ea41 0e03 	orr.w	lr, r1, r3
   b7c3e:	4094      	lsls	r4, r2
   b7c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b7c44:	0c21      	lsrs	r1, r4, #16
   b7c46:	fbbe f6f8 	udiv	r6, lr, r8
   b7c4a:	fa1f f78c 	uxth.w	r7, ip
   b7c4e:	fb08 e316 	mls	r3, r8, r6, lr
   b7c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b7c56:	fb06 f107 	mul.w	r1, r6, r7
   b7c5a:	4299      	cmp	r1, r3
   b7c5c:	d90a      	bls.n	b7c74 <__udivmoddi4+0x64>
   b7c5e:	eb1c 0303 	adds.w	r3, ip, r3
   b7c62:	f106 30ff 	add.w	r0, r6, #4294967295
   b7c66:	f080 811f 	bcs.w	b7ea8 <__udivmoddi4+0x298>
   b7c6a:	4299      	cmp	r1, r3
   b7c6c:	f240 811c 	bls.w	b7ea8 <__udivmoddi4+0x298>
   b7c70:	3e02      	subs	r6, #2
   b7c72:	4463      	add	r3, ip
   b7c74:	1a5b      	subs	r3, r3, r1
   b7c76:	b2a4      	uxth	r4, r4
   b7c78:	fbb3 f0f8 	udiv	r0, r3, r8
   b7c7c:	fb08 3310 	mls	r3, r8, r0, r3
   b7c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b7c84:	fb00 f707 	mul.w	r7, r0, r7
   b7c88:	42a7      	cmp	r7, r4
   b7c8a:	d90a      	bls.n	b7ca2 <__udivmoddi4+0x92>
   b7c8c:	eb1c 0404 	adds.w	r4, ip, r4
   b7c90:	f100 33ff 	add.w	r3, r0, #4294967295
   b7c94:	f080 810a 	bcs.w	b7eac <__udivmoddi4+0x29c>
   b7c98:	42a7      	cmp	r7, r4
   b7c9a:	f240 8107 	bls.w	b7eac <__udivmoddi4+0x29c>
   b7c9e:	4464      	add	r4, ip
   b7ca0:	3802      	subs	r0, #2
   b7ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b7ca6:	1be4      	subs	r4, r4, r7
   b7ca8:	2600      	movs	r6, #0
   b7caa:	b11d      	cbz	r5, b7cb4 <__udivmoddi4+0xa4>
   b7cac:	40d4      	lsrs	r4, r2
   b7cae:	2300      	movs	r3, #0
   b7cb0:	e9c5 4300 	strd	r4, r3, [r5]
   b7cb4:	4631      	mov	r1, r6
   b7cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7cba:	428b      	cmp	r3, r1
   b7cbc:	d909      	bls.n	b7cd2 <__udivmoddi4+0xc2>
   b7cbe:	2d00      	cmp	r5, #0
   b7cc0:	f000 80ef 	beq.w	b7ea2 <__udivmoddi4+0x292>
   b7cc4:	2600      	movs	r6, #0
   b7cc6:	e9c5 0100 	strd	r0, r1, [r5]
   b7cca:	4630      	mov	r0, r6
   b7ccc:	4631      	mov	r1, r6
   b7cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7cd2:	fab3 f683 	clz	r6, r3
   b7cd6:	2e00      	cmp	r6, #0
   b7cd8:	d14a      	bne.n	b7d70 <__udivmoddi4+0x160>
   b7cda:	428b      	cmp	r3, r1
   b7cdc:	d302      	bcc.n	b7ce4 <__udivmoddi4+0xd4>
   b7cde:	4282      	cmp	r2, r0
   b7ce0:	f200 80f9 	bhi.w	b7ed6 <__udivmoddi4+0x2c6>
   b7ce4:	1a84      	subs	r4, r0, r2
   b7ce6:	eb61 0303 	sbc.w	r3, r1, r3
   b7cea:	2001      	movs	r0, #1
   b7cec:	469e      	mov	lr, r3
   b7cee:	2d00      	cmp	r5, #0
   b7cf0:	d0e0      	beq.n	b7cb4 <__udivmoddi4+0xa4>
   b7cf2:	e9c5 4e00 	strd	r4, lr, [r5]
   b7cf6:	e7dd      	b.n	b7cb4 <__udivmoddi4+0xa4>
   b7cf8:	b902      	cbnz	r2, b7cfc <__udivmoddi4+0xec>
   b7cfa:	deff      	udf	#255	; 0xff
   b7cfc:	fab2 f282 	clz	r2, r2
   b7d00:	2a00      	cmp	r2, #0
   b7d02:	f040 8092 	bne.w	b7e2a <__udivmoddi4+0x21a>
   b7d06:	eba1 010c 	sub.w	r1, r1, ip
   b7d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7d0e:	fa1f fe8c 	uxth.w	lr, ip
   b7d12:	2601      	movs	r6, #1
   b7d14:	0c20      	lsrs	r0, r4, #16
   b7d16:	fbb1 f3f7 	udiv	r3, r1, r7
   b7d1a:	fb07 1113 	mls	r1, r7, r3, r1
   b7d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7d22:	fb0e f003 	mul.w	r0, lr, r3
   b7d26:	4288      	cmp	r0, r1
   b7d28:	d908      	bls.n	b7d3c <__udivmoddi4+0x12c>
   b7d2a:	eb1c 0101 	adds.w	r1, ip, r1
   b7d2e:	f103 38ff 	add.w	r8, r3, #4294967295
   b7d32:	d202      	bcs.n	b7d3a <__udivmoddi4+0x12a>
   b7d34:	4288      	cmp	r0, r1
   b7d36:	f200 80cb 	bhi.w	b7ed0 <__udivmoddi4+0x2c0>
   b7d3a:	4643      	mov	r3, r8
   b7d3c:	1a09      	subs	r1, r1, r0
   b7d3e:	b2a4      	uxth	r4, r4
   b7d40:	fbb1 f0f7 	udiv	r0, r1, r7
   b7d44:	fb07 1110 	mls	r1, r7, r0, r1
   b7d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b7d4c:	fb0e fe00 	mul.w	lr, lr, r0
   b7d50:	45a6      	cmp	lr, r4
   b7d52:	d908      	bls.n	b7d66 <__udivmoddi4+0x156>
   b7d54:	eb1c 0404 	adds.w	r4, ip, r4
   b7d58:	f100 31ff 	add.w	r1, r0, #4294967295
   b7d5c:	d202      	bcs.n	b7d64 <__udivmoddi4+0x154>
   b7d5e:	45a6      	cmp	lr, r4
   b7d60:	f200 80bb 	bhi.w	b7eda <__udivmoddi4+0x2ca>
   b7d64:	4608      	mov	r0, r1
   b7d66:	eba4 040e 	sub.w	r4, r4, lr
   b7d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b7d6e:	e79c      	b.n	b7caa <__udivmoddi4+0x9a>
   b7d70:	f1c6 0720 	rsb	r7, r6, #32
   b7d74:	40b3      	lsls	r3, r6
   b7d76:	fa22 fc07 	lsr.w	ip, r2, r7
   b7d7a:	ea4c 0c03 	orr.w	ip, ip, r3
   b7d7e:	fa20 f407 	lsr.w	r4, r0, r7
   b7d82:	fa01 f306 	lsl.w	r3, r1, r6
   b7d86:	431c      	orrs	r4, r3
   b7d88:	40f9      	lsrs	r1, r7
   b7d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b7d8e:	fa00 f306 	lsl.w	r3, r0, r6
   b7d92:	fbb1 f8f9 	udiv	r8, r1, r9
   b7d96:	0c20      	lsrs	r0, r4, #16
   b7d98:	fa1f fe8c 	uxth.w	lr, ip
   b7d9c:	fb09 1118 	mls	r1, r9, r8, r1
   b7da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b7da4:	fb08 f00e 	mul.w	r0, r8, lr
   b7da8:	4288      	cmp	r0, r1
   b7daa:	fa02 f206 	lsl.w	r2, r2, r6
   b7dae:	d90b      	bls.n	b7dc8 <__udivmoddi4+0x1b8>
   b7db0:	eb1c 0101 	adds.w	r1, ip, r1
   b7db4:	f108 3aff 	add.w	sl, r8, #4294967295
   b7db8:	f080 8088 	bcs.w	b7ecc <__udivmoddi4+0x2bc>
   b7dbc:	4288      	cmp	r0, r1
   b7dbe:	f240 8085 	bls.w	b7ecc <__udivmoddi4+0x2bc>
   b7dc2:	f1a8 0802 	sub.w	r8, r8, #2
   b7dc6:	4461      	add	r1, ip
   b7dc8:	1a09      	subs	r1, r1, r0
   b7dca:	b2a4      	uxth	r4, r4
   b7dcc:	fbb1 f0f9 	udiv	r0, r1, r9
   b7dd0:	fb09 1110 	mls	r1, r9, r0, r1
   b7dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b7dd8:	fb00 fe0e 	mul.w	lr, r0, lr
   b7ddc:	458e      	cmp	lr, r1
   b7dde:	d908      	bls.n	b7df2 <__udivmoddi4+0x1e2>
   b7de0:	eb1c 0101 	adds.w	r1, ip, r1
   b7de4:	f100 34ff 	add.w	r4, r0, #4294967295
   b7de8:	d26c      	bcs.n	b7ec4 <__udivmoddi4+0x2b4>
   b7dea:	458e      	cmp	lr, r1
   b7dec:	d96a      	bls.n	b7ec4 <__udivmoddi4+0x2b4>
   b7dee:	3802      	subs	r0, #2
   b7df0:	4461      	add	r1, ip
   b7df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b7df6:	fba0 9402 	umull	r9, r4, r0, r2
   b7dfa:	eba1 010e 	sub.w	r1, r1, lr
   b7dfe:	42a1      	cmp	r1, r4
   b7e00:	46c8      	mov	r8, r9
   b7e02:	46a6      	mov	lr, r4
   b7e04:	d356      	bcc.n	b7eb4 <__udivmoddi4+0x2a4>
   b7e06:	d053      	beq.n	b7eb0 <__udivmoddi4+0x2a0>
   b7e08:	b15d      	cbz	r5, b7e22 <__udivmoddi4+0x212>
   b7e0a:	ebb3 0208 	subs.w	r2, r3, r8
   b7e0e:	eb61 010e 	sbc.w	r1, r1, lr
   b7e12:	fa01 f707 	lsl.w	r7, r1, r7
   b7e16:	fa22 f306 	lsr.w	r3, r2, r6
   b7e1a:	40f1      	lsrs	r1, r6
   b7e1c:	431f      	orrs	r7, r3
   b7e1e:	e9c5 7100 	strd	r7, r1, [r5]
   b7e22:	2600      	movs	r6, #0
   b7e24:	4631      	mov	r1, r6
   b7e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e2a:	f1c2 0320 	rsb	r3, r2, #32
   b7e2e:	40d8      	lsrs	r0, r3
   b7e30:	fa0c fc02 	lsl.w	ip, ip, r2
   b7e34:	fa21 f303 	lsr.w	r3, r1, r3
   b7e38:	4091      	lsls	r1, r2
   b7e3a:	4301      	orrs	r1, r0
   b7e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b7e40:	fa1f fe8c 	uxth.w	lr, ip
   b7e44:	fbb3 f0f7 	udiv	r0, r3, r7
   b7e48:	fb07 3610 	mls	r6, r7, r0, r3
   b7e4c:	0c0b      	lsrs	r3, r1, #16
   b7e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b7e52:	fb00 f60e 	mul.w	r6, r0, lr
   b7e56:	429e      	cmp	r6, r3
   b7e58:	fa04 f402 	lsl.w	r4, r4, r2
   b7e5c:	d908      	bls.n	b7e70 <__udivmoddi4+0x260>
   b7e5e:	eb1c 0303 	adds.w	r3, ip, r3
   b7e62:	f100 38ff 	add.w	r8, r0, #4294967295
   b7e66:	d22f      	bcs.n	b7ec8 <__udivmoddi4+0x2b8>
   b7e68:	429e      	cmp	r6, r3
   b7e6a:	d92d      	bls.n	b7ec8 <__udivmoddi4+0x2b8>
   b7e6c:	3802      	subs	r0, #2
   b7e6e:	4463      	add	r3, ip
   b7e70:	1b9b      	subs	r3, r3, r6
   b7e72:	b289      	uxth	r1, r1
   b7e74:	fbb3 f6f7 	udiv	r6, r3, r7
   b7e78:	fb07 3316 	mls	r3, r7, r6, r3
   b7e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b7e80:	fb06 f30e 	mul.w	r3, r6, lr
   b7e84:	428b      	cmp	r3, r1
   b7e86:	d908      	bls.n	b7e9a <__udivmoddi4+0x28a>
   b7e88:	eb1c 0101 	adds.w	r1, ip, r1
   b7e8c:	f106 38ff 	add.w	r8, r6, #4294967295
   b7e90:	d216      	bcs.n	b7ec0 <__udivmoddi4+0x2b0>
   b7e92:	428b      	cmp	r3, r1
   b7e94:	d914      	bls.n	b7ec0 <__udivmoddi4+0x2b0>
   b7e96:	3e02      	subs	r6, #2
   b7e98:	4461      	add	r1, ip
   b7e9a:	1ac9      	subs	r1, r1, r3
   b7e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b7ea0:	e738      	b.n	b7d14 <__udivmoddi4+0x104>
   b7ea2:	462e      	mov	r6, r5
   b7ea4:	4628      	mov	r0, r5
   b7ea6:	e705      	b.n	b7cb4 <__udivmoddi4+0xa4>
   b7ea8:	4606      	mov	r6, r0
   b7eaa:	e6e3      	b.n	b7c74 <__udivmoddi4+0x64>
   b7eac:	4618      	mov	r0, r3
   b7eae:	e6f8      	b.n	b7ca2 <__udivmoddi4+0x92>
   b7eb0:	454b      	cmp	r3, r9
   b7eb2:	d2a9      	bcs.n	b7e08 <__udivmoddi4+0x1f8>
   b7eb4:	ebb9 0802 	subs.w	r8, r9, r2
   b7eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
   b7ebc:	3801      	subs	r0, #1
   b7ebe:	e7a3      	b.n	b7e08 <__udivmoddi4+0x1f8>
   b7ec0:	4646      	mov	r6, r8
   b7ec2:	e7ea      	b.n	b7e9a <__udivmoddi4+0x28a>
   b7ec4:	4620      	mov	r0, r4
   b7ec6:	e794      	b.n	b7df2 <__udivmoddi4+0x1e2>
   b7ec8:	4640      	mov	r0, r8
   b7eca:	e7d1      	b.n	b7e70 <__udivmoddi4+0x260>
   b7ecc:	46d0      	mov	r8, sl
   b7ece:	e77b      	b.n	b7dc8 <__udivmoddi4+0x1b8>
   b7ed0:	3b02      	subs	r3, #2
   b7ed2:	4461      	add	r1, ip
   b7ed4:	e732      	b.n	b7d3c <__udivmoddi4+0x12c>
   b7ed6:	4630      	mov	r0, r6
   b7ed8:	e709      	b.n	b7cee <__udivmoddi4+0xde>
   b7eda:	4464      	add	r4, ip
   b7edc:	3802      	subs	r0, #2
   b7ede:	e742      	b.n	b7d66 <__udivmoddi4+0x156>

000b7ee0 <__aeabi_idiv0>:
   b7ee0:	4770      	bx	lr
   b7ee2:	bf00      	nop

000b7ee4 <__cxa_atexit>:
   b7ee4:	b510      	push	{r4, lr}
   b7ee6:	4c05      	ldr	r4, [pc, #20]	; (b7efc <__cxa_atexit+0x18>)
   b7ee8:	4613      	mov	r3, r2
   b7eea:	b12c      	cbz	r4, b7ef8 <__cxa_atexit+0x14>
   b7eec:	460a      	mov	r2, r1
   b7eee:	4601      	mov	r1, r0
   b7ef0:	2002      	movs	r0, #2
   b7ef2:	f3af 8000 	nop.w
   b7ef6:	bd10      	pop	{r4, pc}
   b7ef8:	4620      	mov	r0, r4
   b7efa:	e7fc      	b.n	b7ef6 <__cxa_atexit+0x12>
   b7efc:	00000000 	.word	0x00000000

000b7f00 <memcpy>:
   b7f00:	440a      	add	r2, r1
   b7f02:	4291      	cmp	r1, r2
   b7f04:	f100 33ff 	add.w	r3, r0, #4294967295
   b7f08:	d100      	bne.n	b7f0c <memcpy+0xc>
   b7f0a:	4770      	bx	lr
   b7f0c:	b510      	push	{r4, lr}
   b7f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7f12:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7f16:	4291      	cmp	r1, r2
   b7f18:	d1f9      	bne.n	b7f0e <memcpy+0xe>
   b7f1a:	bd10      	pop	{r4, pc}

000b7f1c <memset>:
   b7f1c:	4402      	add	r2, r0
   b7f1e:	4603      	mov	r3, r0
   b7f20:	4293      	cmp	r3, r2
   b7f22:	d100      	bne.n	b7f26 <memset+0xa>
   b7f24:	4770      	bx	lr
   b7f26:	f803 1b01 	strb.w	r1, [r3], #1
   b7f2a:	e7f9      	b.n	b7f20 <memset+0x4>

000b7f2c <srand>:
   b7f2c:	b538      	push	{r3, r4, r5, lr}
   b7f2e:	4b10      	ldr	r3, [pc, #64]	; (b7f70 <srand+0x44>)
   b7f30:	681d      	ldr	r5, [r3, #0]
   b7f32:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f34:	4604      	mov	r4, r0
   b7f36:	b9b3      	cbnz	r3, b7f66 <srand+0x3a>
   b7f38:	2018      	movs	r0, #24
   b7f3a:	f7fc febd 	bl	b4cb8 <malloc>
   b7f3e:	4602      	mov	r2, r0
   b7f40:	63a8      	str	r0, [r5, #56]	; 0x38
   b7f42:	b920      	cbnz	r0, b7f4e <srand+0x22>
   b7f44:	4b0b      	ldr	r3, [pc, #44]	; (b7f74 <srand+0x48>)
   b7f46:	480c      	ldr	r0, [pc, #48]	; (b7f78 <srand+0x4c>)
   b7f48:	2142      	movs	r1, #66	; 0x42
   b7f4a:	f7fc fee5 	bl	b4d18 <__assert_func>
   b7f4e:	490b      	ldr	r1, [pc, #44]	; (b7f7c <srand+0x50>)
   b7f50:	4b0b      	ldr	r3, [pc, #44]	; (b7f80 <srand+0x54>)
   b7f52:	e9c0 1300 	strd	r1, r3, [r0]
   b7f56:	4b0b      	ldr	r3, [pc, #44]	; (b7f84 <srand+0x58>)
   b7f58:	6083      	str	r3, [r0, #8]
   b7f5a:	230b      	movs	r3, #11
   b7f5c:	8183      	strh	r3, [r0, #12]
   b7f5e:	2100      	movs	r1, #0
   b7f60:	2001      	movs	r0, #1
   b7f62:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7f66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7f68:	2200      	movs	r2, #0
   b7f6a:	611c      	str	r4, [r3, #16]
   b7f6c:	615a      	str	r2, [r3, #20]
   b7f6e:	bd38      	pop	{r3, r4, r5, pc}
   b7f70:	2003e638 	.word	0x2003e638
   b7f74:	000b82b8 	.word	0x000b82b8
   b7f78:	000b82cf 	.word	0x000b82cf
   b7f7c:	abcd330e 	.word	0xabcd330e
   b7f80:	e66d1234 	.word	0xe66d1234
   b7f84:	0005deec 	.word	0x0005deec

000b7f88 <strcmp>:
   b7f88:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7f90:	2a01      	cmp	r2, #1
   b7f92:	bf28      	it	cs
   b7f94:	429a      	cmpcs	r2, r3
   b7f96:	d0f7      	beq.n	b7f88 <strcmp>
   b7f98:	1ad0      	subs	r0, r2, r3
   b7f9a:	4770      	bx	lr

000b7f9c <strdup>:
   b7f9c:	4b02      	ldr	r3, [pc, #8]	; (b7fa8 <strdup+0xc>)
   b7f9e:	4601      	mov	r1, r0
   b7fa0:	6818      	ldr	r0, [r3, #0]
   b7fa2:	f000 b803 	b.w	b7fac <_strdup_r>
   b7fa6:	bf00      	nop
   b7fa8:	2003e638 	.word	0x2003e638

000b7fac <_strdup_r>:
   b7fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7fae:	4604      	mov	r4, r0
   b7fb0:	4608      	mov	r0, r1
   b7fb2:	460d      	mov	r5, r1
   b7fb4:	f000 f80f 	bl	b7fd6 <strlen>
   b7fb8:	1c42      	adds	r2, r0, #1
   b7fba:	4611      	mov	r1, r2
   b7fbc:	4620      	mov	r0, r4
   b7fbe:	9201      	str	r2, [sp, #4]
   b7fc0:	f7fc fe9a 	bl	b4cf8 <_malloc_r>
   b7fc4:	4604      	mov	r4, r0
   b7fc6:	b118      	cbz	r0, b7fd0 <_strdup_r+0x24>
   b7fc8:	9a01      	ldr	r2, [sp, #4]
   b7fca:	4629      	mov	r1, r5
   b7fcc:	f7ff ff98 	bl	b7f00 <memcpy>
   b7fd0:	4620      	mov	r0, r4
   b7fd2:	b003      	add	sp, #12
   b7fd4:	bd30      	pop	{r4, r5, pc}

000b7fd6 <strlen>:
   b7fd6:	4603      	mov	r3, r0
   b7fd8:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7fdc:	2a00      	cmp	r2, #0
   b7fde:	d1fb      	bne.n	b7fd8 <strlen+0x2>
   b7fe0:	1a18      	subs	r0, r3, r0
   b7fe2:	3801      	subs	r0, #1
   b7fe4:	4770      	bx	lr

000b7fe6 <link_code_end>:
	...

000b7fe8 <dynalib_user>:
   b7fe8:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7ff8:	0000 0000 6146 206e 764f 7265 6972 6564     ....Fan Override
   b8008:	5200 7065 726f 2074 6554 706d 7265 7461     .Report Temperat
   b8018:	7275 0065 6f4d 6974 6e6f 6420 7465 6365     ure.Motion detec
   b8028:	6574 2164 3100 4d00 4d00 746f 6f69 206e     ted!.1.M.Motion 
   b8038:	7473 706f 6570 2164 4e00 206f 6f6d 6974     stopped!.No moti
   b8048:	6e6f 6620 726f 3120 3038 7320 6365 6e6f     on for 180 secon
   b8058:	7364 0021 0046 6f4e 6d20 746f 6f69 206e     ds!.F.No motion 
   b8068:	6f66 2072 3032 7320 6365 6e6f 7364 2021     for 20 seconds! 
   b8078:	7574 6e72 6e69 2067 7473 6675 2066 666f     turning stuff of
   b8088:	0066 004f 3030 0030 6572 6f70 7472 6600     f.O.000.report.f
   b8098:	6e61 6f20 6576 7272 6469 2065 7274 6575     an override true
   b80a8:	6600 6e61 6f20 6576 7272 6469 2065 6166     .fan override fa
   b80b8:	736c 0065 6166 206e 7073 6565 2064 6f6c     lse.fan speed lo
   b80c8:	0077 6f4c 0077 6146 206e 7053 6565 0064     w.Low.Fan Speed.
   b80d8:	6166 206e 7073 6565 2064 656d 6964 6d75     fan speed medium
   b80e8:	4d00 6465 7569 006d 6166 206e 7073 6565     .Medium.fan spee
   b80f8:	2064 6968 6867 4800 6769 0068 3230 0035     d high.High.025.
   b8108:	3130 0035 3130 0030                         015.010.

000b8110 <_ZTVN5spark13EthernetClassE>:
	...
   b8118:	4d97 000b 4d8d 000b 4d83 000b 4d79 000b     .M...M...M..yM..
   b8128:	4d6d 000b 4d61 000b 5e39 000b 5e41 000b     mM..aM..9^..A^..
   b8138:	4d55 000b 4d4d 000b 4d43 000b 4d39 000b     UM..MM..CM..9M..
   b8148:	5e71 000b 7061 0070 5925 252d 2d6d 6425     q^..app.%Y-%m-%d
   b8158:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8168:	6d69 0065                                   ime.

000b816c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b8174:	5381 000b 5387 000b 53c5 000b 5395 000b     .S...S...S...S..
   b8184:	5383 000b                                   .S..

000b8188 <_ZTV9IPAddress>:
	...
   b8190:	590d 000b 58fd 000b 58ff 000b               .Y...X...X..

000b819c <_ZTV9USBSerial>:
	...
   b81a4:	59f1 000b 5a59 000b 5a2f 000b 512d 000b     .Y..YZ../Z..-Q..
   b81b4:	5a21 000b 59f3 000b 5a03 000b 5a53 000b     !Z...Y...Z..SZ..
   b81c4:	5a13 000b 59ed 000b                         .Z...Y..

000b81cc <_ZTVN5spark13CellularClassE>:
	...
   b81d4:	5b5b 000b 5b51 000b 5b47 000b 5afd 000b     [[..Q[..G[...Z..
   b81e4:	5b3b 000b 5b2f 000b 5e39 000b 5e41 000b     ;[../[..9^..A^..
   b81f4:	5b23 000b 5b1b 000b 5b11 000b 5b07 000b     #[...[...[...[..
   b8204:	5e71 000b                                   q^..

000b8208 <_ZTV11USARTSerial>:
	...
   b8210:	5b95 000b 5c01 000b 5bd9 000b 512d 000b     .[...\...[..-Q..
   b8220:	5ba9 000b 5bc5 000b 5bb7 000b 5bd3 000b     .[...[...[...[..
   b8230:	5b97 000b 5b9b 000b                         .[...[..

000b8238 <_ZTV7TwoWire>:
	...
   b8240:	5cfd 000b 5d47 000b 5d1f 000b 5cff 000b     .\..G]...]...\..
   b8250:	5d27 000b 5d2f 000b 5d37 000b 5d3f 000b     ']../]..7]..?]..

000b8260 <_ZTVN5spark12NetworkClassE>:
	...
   b8268:	5df9 000b 5e03 000b 5e0d 000b 5e17 000b     .]...^...^...^..
   b8278:	5e21 000b 5e2d 000b 5e39 000b 5e41 000b     !^..-^..9^..A^..
   b8288:	5e49 000b 5e55 000b 5e5d 000b 5e67 000b     I^..U^..]^..g^..
   b8298:	5e71 000b                                   q^..

000b829c <_ZSt7nothrow>:
	...

000b82a8 <TWO52>:
   b82a8:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
   b82b8:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
   b82c8:	6563 6465 6465 2f00 6e6d 2f74 6f77 6b72     ceeded./mnt/work
   b82d8:	7073 6361 2f65 6f77 6b72 7073 6361 2f65     space/workspace/
   b82e8:	4347 2d43 3031 702d 7069 6c65 6e69 2f65     GCC-10-pipeline/
   b82f8:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   b8308:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   b8318:	3231 5f34 3631 3630 3831 3630 3134 732f     124_1606180641/s
   b8328:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   b8338:	6c2f 6269 2f63 7473 6c64 6269 722f 6e61     /libc/stdlib/ran
   b8348:	2e64 0063                                   d.c.

000b834c <link_const_variable_data_end>:
   b834c:	000b4539 	.word	0x000b4539
   b8350:	000b4da1 	.word	0x000b4da1
   b8354:	000b4de9 	.word	0x000b4de9
   b8358:	000b5105 	.word	0x000b5105
   b835c:	000b51f5 	.word	0x000b51f5
   b8360:	000b5205 	.word	0x000b5205
   b8364:	000b522d 	.word	0x000b522d
   b8368:	000b5b65 	.word	0x000b5b65
   b836c:	000b5f49 	.word	0x000b5f49
