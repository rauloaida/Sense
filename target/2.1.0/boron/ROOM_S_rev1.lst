
/Users/rauloaida/Documents/Firmware/ROOM_S_rev1/target/2.1.0/boron/ROOM_S_rev1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001d44  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5d60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e698  000d5d64  0001e698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000ec  2003e704  2003e704  0002e704  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5dd0  000d5dd0  00025dd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5df8  000d5df8  00025df8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0012b752  00000000  00000000  00025dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000148c7  00000000  00000000  0015154e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000297bd  00000000  00000000  00165e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002538  00000000  00000000  0018f5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007308  00000000  00000000  00191b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034aed  00000000  00000000  00198e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032f73  00000000  00000000  001cd8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108775  00000000  00000000  00200872  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000064b0  00000000  00000000  00308fe8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd09 	bl	d5a44 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd11 	bl	d5a60 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e698 	.word	0x2003e698
   d4048:	000d5d64 	.word	0x000d5d64
   d404c:	2003e704 	.word	0x2003e704
   d4050:	2003e704 	.word	0x2003e704
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fbeb 	bl	d5838 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5d38 	.word	0x000d5d38
   d407c:	000d5d5c 	.word	0x000d5d5c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b822 	b.w	d40c8 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f853 	bl	d4130 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bb95 	b.w	d57bc <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb67 	b.w	d4764 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bb65 	b.w	d4764 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bb6b 	b.w	d4774 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40b0:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d40b4:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40b6:	f88d 5000 	strb.w	r5, [sp]
   d40ba:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40bc:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f000 fd6f 	bl	d4ba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d40c2:	4620      	mov	r0, r4
   d40c4:	b003      	add	sp, #12
   d40c6:	bd30      	pop	{r4, r5, pc}

000d40c8 <setup>:
bool delayEnabled = true;
bool setDelayExpired = false;
unsigned long delayStartTime;
int report(String command);

void setup() {
   d40c8:	b508      	push	{r3, lr}
  Serial.begin(9600);  
   d40ca:	f001 fae9 	bl	d56a0 <_Z16_fetch_usbserialv>
   d40ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d2:	f001 fad9 	bl	d5688 <_ZN9USBSerial5beginEl>
  pinMode(PIN_TO_SENSOR, INPUT_PULLUP); // set arduino pin to input mode to read value from OUTPUT pin of sensor
   d40d6:	2102      	movs	r1, #2
   d40d8:	4608      	mov	r0, r1
   d40da:	f001 fc1d 	bl	d5918 <pinMode>
  setDelayExpired = true;
   d40de:	4b05      	ldr	r3, [pc, #20]	; (d40f4 <setup+0x2c>)
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d40e0:	4905      	ldr	r1, [pc, #20]	; (d40f8 <setup+0x30>)
   d40e2:	4806      	ldr	r0, [pc, #24]	; (d40fc <setup+0x34>)
   d40e4:	2201      	movs	r2, #1
   d40e6:	701a      	strb	r2, [r3, #0]
  Particle.function("report", report);
}
   d40e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40ec:	4a04      	ldr	r2, [pc, #16]	; (d4100 <setup+0x38>)
   d40ee:	f000 bc53 	b.w	d4998 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d40f2:	bf00      	nop
   d40f4:	2003e718 	.word	0x2003e718
   d40f8:	000d4219 	.word	0x000d4219
   d40fc:	000d496d 	.word	0x000d496d
   d4100:	000d5b2c 	.word	0x000d5b2c

000d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4104:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4106:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4108:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d410a:	b17c      	cbz	r4, d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d410c:	6863      	ldr	r3, [r4, #4]
   d410e:	3b01      	subs	r3, #1
   d4110:	6063      	str	r3, [r4, #4]
   d4112:	b95b      	cbnz	r3, d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4114:	6823      	ldr	r3, [r4, #0]
   d4116:	4620      	mov	r0, r4
   d4118:	689b      	ldr	r3, [r3, #8]
   d411a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d411c:	68a3      	ldr	r3, [r4, #8]
   d411e:	3b01      	subs	r3, #1
   d4120:	60a3      	str	r3, [r4, #8]
   d4122:	b91b      	cbnz	r3, d412c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4124:	6823      	ldr	r3, [r4, #0]
   d4126:	4620      	mov	r0, r4
   d4128:	68db      	ldr	r3, [r3, #12]
   d412a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d412c:	4628      	mov	r0, r5
   d412e:	bd38      	pop	{r3, r4, r5, pc}

000d4130 <loop>:

void loop() {
   d4130:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  pinStatePrevious = pinStateCurrent; // store state
   d4132:	4e2c      	ldr	r6, [pc, #176]	; (d41e4 <loop+0xb4>)
   d4134:	4d2c      	ldr	r5, [pc, #176]	; (d41e8 <loop+0xb8>)
   d4136:	6833      	ldr	r3, [r6, #0]
   d4138:	602b      	str	r3, [r5, #0]
  pinStateCurrent =! digitalRead(PIN_TO_SENSOR);   // read new state
   d413a:	2002      	movs	r0, #2
   d413c:	f001 fbfd 	bl	d593a <digitalRead>
   d4140:	4604      	mov	r4, r0
   d4142:	fab0 f080 	clz	r0, r0
   d4146:	0940      	lsrs	r0, r0, #5
   d4148:	6030      	str	r0, [r6, #0]

  if (pinStatePrevious == LOW && pinStateCurrent == HIGH && setDelayExpired == true) {   // pin state change: LOW -> HIGH
   d414a:	682e      	ldr	r6, [r5, #0]
   d414c:	4d27      	ldr	r5, [pc, #156]	; (d41ec <loop+0xbc>)
   d414e:	b9c6      	cbnz	r6, d4182 <loop+0x52>
   d4150:	bb2c      	cbnz	r4, d419e <loop+0x6e>
   d4152:	4e27      	ldr	r6, [pc, #156]	; (d41f0 <loop+0xc0>)
   d4154:	7833      	ldrb	r3, [r6, #0]
   d4156:	b313      	cbz	r3, d419e <loop+0x6e>
    Serial.println("Motion detected!");
   d4158:	f001 faa2 	bl	d56a0 <_Z16_fetch_usbserialv>
   d415c:	4925      	ldr	r1, [pc, #148]	; (d41f4 <loop+0xc4>)
   d415e:	f001 f872 	bl	d5246 <_ZN5Print7printlnEPKc>
    Particle.publish("M", "1", PRIVATE);
   d4162:	4b25      	ldr	r3, [pc, #148]	; (d41f8 <loop+0xc8>)
   d4164:	f88d 4000 	strb.w	r4, [sp]
   d4168:	781b      	ldrb	r3, [r3, #0]
   d416a:	4a24      	ldr	r2, [pc, #144]	; (d41fc <loop+0xcc>)
   d416c:	4924      	ldr	r1, [pc, #144]	; (d4200 <loop+0xd0>)
   d416e:	a802      	add	r0, sp, #8
   d4170:	f7ff ff9d 	bl	d40ae <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4174:	a803      	add	r0, sp, #12
   d4176:	f7ff ffc5 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delayEnabled = false; // disable delay
   d417a:	702c      	strb	r4, [r5, #0]
    setDelayExpired = false;
   d417c:	7034      	strb	r4, [r6, #0]
    Serial.println("No motion for 180 seconds!");
    Particle.publish("M", "0", PRIVATE);
    delayEnabled = false; // disable delay
    setDelayExpired = true;
  }   
}
   d417e:	b004      	add	sp, #16
   d4180:	bd70      	pop	{r4, r5, r6, pc}
  else if (pinStatePrevious == HIGH && pinStateCurrent == LOW) {   // pin state change: HIGH -> LOW
   d4182:	2e01      	cmp	r6, #1
   d4184:	d10b      	bne.n	d419e <loop+0x6e>
   d4186:	b154      	cbz	r4, d419e <loop+0x6e>
    Serial.println("Motion stopped!");
   d4188:	f001 fa8a 	bl	d56a0 <_Z16_fetch_usbserialv>
   d418c:	491d      	ldr	r1, [pc, #116]	; (d4204 <loop+0xd4>)
   d418e:	f001 f85a 	bl	d5246 <_ZN5Print7printlnEPKc>
    delayEnabled = true; // enable delay
   d4192:	702e      	strb	r6, [r5, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4194:	f000 f91a 	bl	d43cc <HAL_Timer_Get_Milli_Seconds>
    delayStartTime = millis(); // set start time
   d4198:	4b1b      	ldr	r3, [pc, #108]	; (d4208 <loop+0xd8>)
   d419a:	6018      	str	r0, [r3, #0]
   d419c:	e7ef      	b.n	d417e <loop+0x4e>
   else if (delayEnabled == true && (millis() - delayStartTime) >= DELAY_TIME_MS) {
   d419e:	782b      	ldrb	r3, [r5, #0]
   d41a0:	2b00      	cmp	r3, #0
   d41a2:	d0ec      	beq.n	d417e <loop+0x4e>
   d41a4:	f000 f912 	bl	d43cc <HAL_Timer_Get_Milli_Seconds>
   d41a8:	4b17      	ldr	r3, [pc, #92]	; (d4208 <loop+0xd8>)
   d41aa:	681b      	ldr	r3, [r3, #0]
   d41ac:	1ac0      	subs	r0, r0, r3
   d41ae:	4b17      	ldr	r3, [pc, #92]	; (d420c <loop+0xdc>)
   d41b0:	4298      	cmp	r0, r3
   d41b2:	d9e4      	bls.n	d417e <loop+0x4e>
    Serial.println("No motion for 180 seconds!");
   d41b4:	f001 fa74 	bl	d56a0 <_Z16_fetch_usbserialv>
   d41b8:	4915      	ldr	r1, [pc, #84]	; (d4210 <loop+0xe0>)
   d41ba:	f001 f844 	bl	d5246 <_ZN5Print7printlnEPKc>
        val_(0) {
   d41be:	2400      	movs	r4, #0
    Particle.publish("M", "0", PRIVATE);
   d41c0:	4b0d      	ldr	r3, [pc, #52]	; (d41f8 <loop+0xc8>)
   d41c2:	f88d 4000 	strb.w	r4, [sp]
   d41c6:	781b      	ldrb	r3, [r3, #0]
   d41c8:	4a12      	ldr	r2, [pc, #72]	; (d4214 <loop+0xe4>)
   d41ca:	490d      	ldr	r1, [pc, #52]	; (d4200 <loop+0xd0>)
   d41cc:	a802      	add	r0, sp, #8
   d41ce:	f7ff ff6e 	bl	d40ae <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d41d2:	a803      	add	r0, sp, #12
   d41d4:	f7ff ff96 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    setDelayExpired = true;
   d41d8:	4b05      	ldr	r3, [pc, #20]	; (d41f0 <loop+0xc0>)
    delayEnabled = false; // disable delay
   d41da:	702c      	strb	r4, [r5, #0]
    setDelayExpired = true;
   d41dc:	2201      	movs	r2, #1
   d41de:	701a      	strb	r2, [r3, #0]
}
   d41e0:	e7cd      	b.n	d417e <loop+0x4e>
   d41e2:	bf00      	nop
   d41e4:	2003e710 	.word	0x2003e710
   d41e8:	2003e714 	.word	0x2003e714
   d41ec:	2003e698 	.word	0x2003e698
   d41f0:	2003e718 	.word	0x2003e718
   d41f4:	000d5b33 	.word	0x000d5b33
   d41f8:	2003e708 	.word	0x2003e708
   d41fc:	000d5b93 	.word	0x000d5b93
   d4200:	000d5b44 	.word	0x000d5b44
   d4204:	000d5b46 	.word	0x000d5b46
   d4208:	2003e70c 	.word	0x2003e70c
   d420c:	0002bf1f 	.word	0x0002bf1f
   d4210:	000d5b56 	.word	0x000d5b56
   d4214:	000d5b71 	.word	0x000d5b71

000d4218 <_Z6report6String>:


//The chunk below deals with reporting current measurements to Particle Cloud for QA purpouses. 
int report(String command)
{
   d4218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d421c:	4953      	ldr	r1, [pc, #332]	; (d436c <_Z6report6String+0x154>)
   d421e:	b08b      	sub	sp, #44	; 0x2c
   d4220:	f001 f8f6 	bl	d5410 <_ZNK6String6equalsEPKc>
  if(command == "report")
   d4224:	2800      	cmp	r0, #0
   d4226:	f000 809e 	beq.w	d4366 <_Z6report6String+0x14e>
  {
      Serial1.begin(9600);
   d422a:	f001 f997 	bl	d555c <_Z22__fetch_global_Serial1v>
   d422e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4232:	f001 f98f 	bl	d5554 <_ZN11USARTSerial5beginEm>
      Serial1.write("P");
   d4236:	f001 f991 	bl	d555c <_Z22__fetch_global_Serial1v>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d423a:	6803      	ldr	r3, [r0, #0]
   d423c:	494c      	ldr	r1, [pc, #304]	; (d4370 <_Z6report6String+0x158>)
   d423e:	68db      	ldr	r3, [r3, #12]
   d4240:	4c4c      	ldr	r4, [pc, #304]	; (d4374 <_Z6report6String+0x15c>)
   d4242:	2201      	movs	r2, #1
   d4244:	4798      	blx	r3
      delay(10000);
   d4246:	f242 7010 	movw	r0, #10000	; 0x2710
   d424a:	f000 fabb 	bl	d47c4 <delay>
      unsigned int val1 = analogRead(A3);
   d424e:	2010      	movs	r0, #16
   d4250:	f001 fb86 	bl	d5960 <analogRead>
   d4254:	9003      	str	r0, [sp, #12]
      unsigned int val2 = analogRead(A4);
   d4256:	200f      	movs	r0, #15
   d4258:	f001 fb82 	bl	d5960 <analogRead>
   d425c:	4681      	mov	r9, r0
      unsigned int val3 = analogRead(A5);
   d425e:	200e      	movs	r0, #14
   d4260:	f001 fb7e 	bl	d5960 <analogRead>
   d4264:	4680      	mov	r8, r0
      unsigned int val4 = analogRead(A0);
   d4266:	2013      	movs	r0, #19
   d4268:	f001 fb7a 	bl	d5960 <analogRead>
   d426c:	4607      	mov	r7, r0
      unsigned int val5 = analogRead(A1);
   d426e:	2012      	movs	r0, #18
   d4270:	f001 fb76 	bl	d5960 <analogRead>
   d4274:	2500      	movs	r5, #0
      Particle.publish("Ambient_1", String(val1), PRIVATE); //Ambient1 current
   d4276:	9903      	ldr	r1, [sp, #12]
      unsigned int val5 = analogRead(A1);
   d4278:	4606      	mov	r6, r0
      Particle.publish("Ambient_1", String(val1), PRIVATE); //Ambient1 current
   d427a:	220a      	movs	r2, #10
   d427c:	a806      	add	r0, sp, #24
   d427e:	f001 f8b4 	bl	d53ea <_ZN6StringC1Ejh>
   d4282:	7823      	ldrb	r3, [r4, #0]
   d4284:	9a06      	ldr	r2, [sp, #24]
   d4286:	493c      	ldr	r1, [pc, #240]	; (d4378 <_Z6report6String+0x160>)
   d4288:	f88d 5000 	strb.w	r5, [sp]
   d428c:	a804      	add	r0, sp, #16
   d428e:	f7ff ff0e 	bl	d40ae <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4292:	a805      	add	r0, sp, #20
   d4294:	f7ff ff36 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4298:	a806      	add	r0, sp, #24
   d429a:	f001 f81b 	bl	d52d4 <_ZN6StringD1Ev>
      delay(500);
   d429e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42a2:	f000 fa8f 	bl	d47c4 <delay>
      Particle.publish("Ambient_2", String(val2), PRIVATE); //Ambient2 current
   d42a6:	220a      	movs	r2, #10
   d42a8:	4649      	mov	r1, r9
   d42aa:	a806      	add	r0, sp, #24
   d42ac:	f001 f89d 	bl	d53ea <_ZN6StringC1Ejh>
   d42b0:	7823      	ldrb	r3, [r4, #0]
   d42b2:	9a06      	ldr	r2, [sp, #24]
   d42b4:	4931      	ldr	r1, [pc, #196]	; (d437c <_Z6report6String+0x164>)
   d42b6:	f88d 5000 	strb.w	r5, [sp]
   d42ba:	a804      	add	r0, sp, #16
   d42bc:	f7ff fef7 	bl	d40ae <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d42c0:	a805      	add	r0, sp, #20
   d42c2:	f7ff ff1f 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42c6:	a806      	add	r0, sp, #24
   d42c8:	f001 f804 	bl	d52d4 <_ZN6StringD1Ev>
      delay(500);
   d42cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42d0:	f000 fa78 	bl	d47c4 <delay>
      Particle.publish("Spotlight_1", String(val3), PRIVATE); //Spot1 current
   d42d4:	220a      	movs	r2, #10
   d42d6:	4641      	mov	r1, r8
   d42d8:	a806      	add	r0, sp, #24
   d42da:	f001 f886 	bl	d53ea <_ZN6StringC1Ejh>
   d42de:	7823      	ldrb	r3, [r4, #0]
   d42e0:	9a06      	ldr	r2, [sp, #24]
   d42e2:	4927      	ldr	r1, [pc, #156]	; (d4380 <_Z6report6String+0x168>)
   d42e4:	f88d 5000 	strb.w	r5, [sp]
   d42e8:	a804      	add	r0, sp, #16
   d42ea:	f7ff fee0 	bl	d40ae <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d42ee:	a805      	add	r0, sp, #20
   d42f0:	f7ff ff08 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42f4:	a806      	add	r0, sp, #24
   d42f6:	f000 ffed 	bl	d52d4 <_ZN6StringD1Ev>
      delay(500);
   d42fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d42fe:	f000 fa61 	bl	d47c4 <delay>
      Particle.publish("Spotlight_2", String(val4), PRIVATE); //Spot 2 current -- change to A6 for BSOM
   d4302:	220a      	movs	r2, #10
   d4304:	4639      	mov	r1, r7
   d4306:	a806      	add	r0, sp, #24
   d4308:	f001 f86f 	bl	d53ea <_ZN6StringC1Ejh>
   d430c:	7823      	ldrb	r3, [r4, #0]
   d430e:	9a06      	ldr	r2, [sp, #24]
   d4310:	491c      	ldr	r1, [pc, #112]	; (d4384 <_Z6report6String+0x16c>)
   d4312:	f88d 5000 	strb.w	r5, [sp]
   d4316:	a804      	add	r0, sp, #16
   d4318:	f7ff fec9 	bl	d40ae <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d431c:	a805      	add	r0, sp, #20
   d431e:	f7ff fef1 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4322:	a806      	add	r0, sp, #24
   d4324:	f000 ffd6 	bl	d52d4 <_ZN6StringD1Ev>
      delay(500);
   d4328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d432c:	f000 fa4a 	bl	d47c4 <delay>
      Particle.publish("Fan", String(val5), PRIVATE); //Fan current -- change to A7 for BSOM
   d4330:	220a      	movs	r2, #10
   d4332:	4631      	mov	r1, r6
   d4334:	a806      	add	r0, sp, #24
   d4336:	f001 f858 	bl	d53ea <_ZN6StringC1Ejh>
   d433a:	7823      	ldrb	r3, [r4, #0]
   d433c:	9a06      	ldr	r2, [sp, #24]
   d433e:	4912      	ldr	r1, [pc, #72]	; (d4388 <_Z6report6String+0x170>)
   d4340:	f88d 5000 	strb.w	r5, [sp]
   d4344:	a804      	add	r0, sp, #16
   d4346:	f7ff feb2 	bl	d40ae <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d434a:	a805      	add	r0, sp, #20
   d434c:	f7ff feda 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4350:	a806      	add	r0, sp, #24
   d4352:	f000 ffbf 	bl	d52d4 <_ZN6StringD1Ev>
      delay(500);
   d4356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d435a:	f000 fa33 	bl	d47c4 <delay>
   d435e:	2001      	movs	r0, #1
      return 1;
  }
  else return -1;
   d4360:	b00b      	add	sp, #44	; 0x2c
   d4362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else return -1;
   d4366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d436a:	e7f9      	b.n	d4360 <_Z6report6String+0x148>
   d436c:	000d5b2c 	.word	0x000d5b2c
   d4370:	000d5b73 	.word	0x000d5b73
   d4374:	2003e708 	.word	0x2003e708
   d4378:	000d5b75 	.word	0x000d5b75
   d437c:	000d5b7f 	.word	0x000d5b7f
   d4380:	000d5b89 	.word	0x000d5b89
   d4384:	000d5b95 	.word	0x000d5b95
   d4388:	000d5ba1 	.word	0x000d5ba1

000d438c <_GLOBAL__sub_I_pinStateCurrent>:
        val_(val) {
   d438c:	4b02      	ldr	r3, [pc, #8]	; (d4398 <_GLOBAL__sub_I_pinStateCurrent+0xc>)
   d438e:	2001      	movs	r0, #1
   d4390:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED); //uncomment to run all FW at startup without waiting for LTE connection to be estabished
   d4392:	2100      	movs	r1, #0
   d4394:	f000 b93a 	b.w	d460c <system_thread_set_state>
   d4398:	2003e708 	.word	0x2003e708

000d439c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <os_mutex_recursive_create+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030248 	.word	0x00030248

000d43ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <os_mutex_recursive_destroy+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030248 	.word	0x00030248

000d43bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_RNG_GetRandomNumber+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	685b      	ldr	r3, [r3, #4]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	00030218 	.word	0x00030218

000d43cc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	695b      	ldr	r3, [r3, #20]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	00030218 	.word	0x00030218

000d43dc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <HAL_Validate_Pin_Function+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	685b      	ldr	r3, [r3, #4]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	0003022c 	.word	0x0003022c

000d43ec <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <HAL_Pin_Mode+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	689b      	ldr	r3, [r3, #8]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	0003022c 	.word	0x0003022c

000d43fc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <HAL_Get_Pin_Mode+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	68db      	ldr	r3, [r3, #12]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	0003022c 	.word	0x0003022c

000d440c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <HAL_GPIO_Read+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	695b      	ldr	r3, [r3, #20]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	0003022c 	.word	0x0003022c

000d441c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <hal_adc_read+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	0003022c 	.word	0x0003022c

000d442c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <hal_i2c_write+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	6a1b      	ldr	r3, [r3, #32]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030228 	.word	0x00030228

000d443c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <hal_i2c_available+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030228 	.word	0x00030228

000d444c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <hal_i2c_read+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030228 	.word	0x00030228

000d445c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <hal_i2c_peek+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030228 	.word	0x00030228

000d446c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <hal_i2c_flush+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030228 	.word	0x00030228

000d447c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <hal_i2c_is_enabled+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030228 	.word	0x00030228

000d448c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <hal_i2c_init+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030228 	.word	0x00030228

000d449c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b02      	ldr	r3, [pc, #8]	; (d44a8 <inet_inet_ntop+0xc>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	695b      	ldr	r3, [r3, #20]
   d44a4:	9301      	str	r3, [sp, #4]
   d44a6:	bd08      	pop	{r3, pc}
   d44a8:	00030264 	.word	0x00030264

000d44ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44ac:	b508      	push	{r3, lr}
   d44ae:	4b02      	ldr	r3, [pc, #8]	; (d44b8 <netdb_freeaddrinfo+0xc>)
   d44b0:	681b      	ldr	r3, [r3, #0]
   d44b2:	689b      	ldr	r3, [r3, #8]
   d44b4:	9301      	str	r3, [sp, #4]
   d44b6:	bd08      	pop	{r3, pc}
   d44b8:	00030268 	.word	0x00030268

000d44bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44bc:	b508      	push	{r3, lr}
   d44be:	4b02      	ldr	r3, [pc, #8]	; (d44c8 <netdb_getaddrinfo+0xc>)
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	68db      	ldr	r3, [r3, #12]
   d44c4:	9301      	str	r3, [sp, #4]
   d44c6:	bd08      	pop	{r3, pc}
   d44c8:	00030268 	.word	0x00030268

000d44cc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d44cc:	b508      	push	{r3, lr}
   d44ce:	4b02      	ldr	r3, [pc, #8]	; (d44d8 <hal_spi_init+0xc>)
   d44d0:	681b      	ldr	r3, [r3, #0]
   d44d2:	69db      	ldr	r3, [r3, #28]
   d44d4:	9301      	str	r3, [sp, #4]
   d44d6:	bd08      	pop	{r3, pc}
   d44d8:	00030230 	.word	0x00030230

000d44dc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d44dc:	b508      	push	{r3, lr}
   d44de:	4b02      	ldr	r3, [pc, #8]	; (d44e8 <hal_spi_is_enabled+0xc>)
   d44e0:	681b      	ldr	r3, [r3, #0]
   d44e2:	6a1b      	ldr	r3, [r3, #32]
   d44e4:	9301      	str	r3, [sp, #4]
   d44e6:	bd08      	pop	{r3, pc}
   d44e8:	00030230 	.word	0x00030230

000d44ec <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d44ec:	b508      	push	{r3, lr}
   d44ee:	4b02      	ldr	r3, [pc, #8]	; (d44f8 <hal_usart_init+0xc>)
   d44f0:	681b      	ldr	r3, [r3, #0]
   d44f2:	681b      	ldr	r3, [r3, #0]
   d44f4:	9301      	str	r3, [sp, #4]
   d44f6:	bd08      	pop	{r3, pc}
   d44f8:	0003023c 	.word	0x0003023c

000d44fc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d44fc:	b508      	push	{r3, lr}
   d44fe:	4b02      	ldr	r3, [pc, #8]	; (d4508 <hal_usart_write+0xc>)
   d4500:	681b      	ldr	r3, [r3, #0]
   d4502:	68db      	ldr	r3, [r3, #12]
   d4504:	9301      	str	r3, [sp, #4]
   d4506:	bd08      	pop	{r3, pc}
   d4508:	0003023c 	.word	0x0003023c

000d450c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d450c:	b508      	push	{r3, lr}
   d450e:	4b02      	ldr	r3, [pc, #8]	; (d4518 <hal_usart_available+0xc>)
   d4510:	681b      	ldr	r3, [r3, #0]
   d4512:	691b      	ldr	r3, [r3, #16]
   d4514:	9301      	str	r3, [sp, #4]
   d4516:	bd08      	pop	{r3, pc}
   d4518:	0003023c 	.word	0x0003023c

000d451c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d451c:	b508      	push	{r3, lr}
   d451e:	4b02      	ldr	r3, [pc, #8]	; (d4528 <hal_usart_read+0xc>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	695b      	ldr	r3, [r3, #20]
   d4524:	9301      	str	r3, [sp, #4]
   d4526:	bd08      	pop	{r3, pc}
   d4528:	0003023c 	.word	0x0003023c

000d452c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <hal_usart_peek+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	699b      	ldr	r3, [r3, #24]
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	0003023c 	.word	0x0003023c

000d453c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <hal_usart_flush+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	69db      	ldr	r3, [r3, #28]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	0003023c 	.word	0x0003023c

000d454c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <hal_usart_is_enabled+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	6a1b      	ldr	r3, [r3, #32]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	0003023c 	.word	0x0003023c

000d455c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <hal_usart_available_data_for_write+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	0003023c 	.word	0x0003023c

000d456c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <hal_usart_begin_config+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	0003023c 	.word	0x0003023c

000d457c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <HAL_USB_USART_Init+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	681b      	ldr	r3, [r3, #0]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	0003024c 	.word	0x0003024c

000d458c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <HAL_USB_USART_Begin+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	685b      	ldr	r3, [r3, #4]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	0003024c 	.word	0x0003024c

000d459c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <HAL_USB_USART_Available_Data+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	691b      	ldr	r3, [r3, #16]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	0003024c 	.word	0x0003024c

000d45ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	695b      	ldr	r3, [r3, #20]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	0003024c 	.word	0x0003024c

000d45bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <HAL_USB_USART_Receive_Data+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	699b      	ldr	r3, [r3, #24]
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	0003024c 	.word	0x0003024c

000d45cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <HAL_USB_USART_Send_Data+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	69db      	ldr	r3, [r3, #28]
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	0003024c 	.word	0x0003024c

000d45dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <HAL_USB_USART_Flush_Data+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	6a1b      	ldr	r3, [r3, #32]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003024c 	.word	0x0003024c

000d45ec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <set_system_mode+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	685b      	ldr	r3, [r3, #4]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030220 	.word	0x00030220

000d45fc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <system_delay_ms+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	695b      	ldr	r3, [r3, #20]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030220 	.word	0x00030220

000d460c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <system_thread_set_state+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030220 	.word	0x00030220

000d461c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <application_thread_current+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030220 	.word	0x00030220

000d462c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <application_thread_invoke+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030220 	.word	0x00030220

000d463c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b03      	ldr	r3, [pc, #12]	; (d464c <system_ctrl_set_app_request_handler+0x10>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4646:	9301      	str	r3, [sp, #4]
   d4648:	bd08      	pop	{r3, pc}
   d464a:	0000      	.short	0x0000
   d464c:	00030220 	.word	0x00030220

000d4650 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b03      	ldr	r3, [pc, #12]	; (d4660 <system_ctrl_set_result+0x10>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d465a:	9301      	str	r3, [sp, #4]
   d465c:	bd08      	pop	{r3, pc}
   d465e:	0000      	.short	0x0000
   d4660:	00030220 	.word	0x00030220

000d4664 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <spark_function+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	685b      	ldr	r3, [r3, #4]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030244 	.word	0x00030244

000d4674 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <spark_cloud_flag_connected+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	695b      	ldr	r3, [r3, #20]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030244 	.word	0x00030244

000d4684 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <spark_send_event+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6a1b      	ldr	r3, [r3, #32]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030244 	.word	0x00030244

000d4694 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	00030244 	.word	0x00030244

000d46a4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <network_connect+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	685b      	ldr	r3, [r3, #4]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030240 	.word	0x00030240

000d46b4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <network_connecting+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	689b      	ldr	r3, [r3, #8]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030240 	.word	0x00030240

000d46c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <network_disconnect+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	68db      	ldr	r3, [r3, #12]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030240 	.word	0x00030240

000d46d4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <network_ready+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	691b      	ldr	r3, [r3, #16]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030240 	.word	0x00030240

000d46e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <network_on+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	695b      	ldr	r3, [r3, #20]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030240 	.word	0x00030240

000d46f4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <network_off+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	699b      	ldr	r3, [r3, #24]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030240 	.word	0x00030240

000d4704 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <network_listen+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	69db      	ldr	r3, [r3, #28]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030240 	.word	0x00030240

000d4714 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <network_listening+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6a1b      	ldr	r3, [r3, #32]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030240 	.word	0x00030240

000d4724 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <network_set_listen_timeout+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030240 	.word	0x00030240

000d4734 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <network_get_listen_timeout+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030240 	.word	0x00030240

000d4744 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <network_is_on+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030240 	.word	0x00030240

000d4754 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <network_is_off+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030240 	.word	0x00030240

000d4764 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <malloc+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	681b      	ldr	r3, [r3, #0]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	0003021c 	.word	0x0003021c

000d4774 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <free+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	685b      	ldr	r3, [r3, #4]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	0003021c 	.word	0x0003021c

000d4784 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <realloc+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	689b      	ldr	r3, [r3, #8]
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	0003021c 	.word	0x0003021c

000d4794 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <abort+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	0003021c 	.word	0x0003021c

000d47a4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <_malloc_r+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	0003021c 	.word	0x0003021c

000d47b4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <newlib_impure_ptr_callback+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	0003021c 	.word	0x0003021c

000d47c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d47c4:	2100      	movs	r1, #0
   d47c6:	f7ff bf19 	b.w	d45fc <system_delay_ms>

000d47ca <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d47ca:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d47cc:	6883      	ldr	r3, [r0, #8]
   d47ce:	4604      	mov	r4, r0
   d47d0:	b90b      	cbnz	r3, d47d6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d47d2:	f001 f926 	bl	d5a22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d47d6:	68c3      	ldr	r3, [r0, #12]
   d47d8:	4798      	blx	r3
      if (_M_manager)
   d47da:	68a3      	ldr	r3, [r4, #8]
   d47dc:	b11b      	cbz	r3, d47e6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d47de:	2203      	movs	r2, #3
   d47e0:	4621      	mov	r1, r4
   d47e2:	4620      	mov	r0, r4
   d47e4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d47e6:	4620      	mov	r0, r4
   d47e8:	2110      	movs	r1, #16
}
   d47ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d47ee:	f001 b914 	b.w	d5a1a <_ZdlPvj>

000d47f2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d47f2:	b510      	push	{r4, lr}
   d47f4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d47f6:	6800      	ldr	r0, [r0, #0]
   d47f8:	b108      	cbz	r0, d47fe <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d47fa:	f7ff fdd7 	bl	d43ac <os_mutex_recursive_destroy>
    }
   d47fe:	4620      	mov	r0, r4
   d4800:	bd10      	pop	{r4, pc}

000d4802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4802:	680b      	ldr	r3, [r1, #0]
   d4804:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4806:	b113      	cbz	r3, d480e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4808:	685a      	ldr	r2, [r3, #4]
   d480a:	3201      	adds	r2, #1
   d480c:	605a      	str	r2, [r3, #4]
      }
   d480e:	4770      	bx	lr

000d4810 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4810:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4812:	4c06      	ldr	r4, [pc, #24]	; (d482c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4814:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4816:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4818:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d481a:	f7ff fdbf 	bl	d439c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d481e:	4620      	mov	r0, r4
   d4820:	4a03      	ldr	r2, [pc, #12]	; (d4830 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4822:	4904      	ldr	r1, [pc, #16]	; (d4834 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4828:	f001 b8f2 	b.w	d5a10 <__aeabi_atexit>
   d482c:	2003e71c 	.word	0x2003e71c
   d4830:	2003e704 	.word	0x2003e704
   d4834:	000d47f3 	.word	0x000d47f3

000d4838 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4838:	2200      	movs	r2, #0
   d483a:	6840      	ldr	r0, [r0, #4]
   d483c:	4611      	mov	r1, r2
   d483e:	f7ff bf49 	b.w	d46d4 <network_ready>

000d4842 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d4842:	2200      	movs	r2, #0
   d4844:	6840      	ldr	r0, [r0, #4]
   d4846:	4611      	mov	r1, r2
   d4848:	f7ff bf64 	b.w	d4714 <network_listening>

000d484c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d484c:	2200      	movs	r2, #0
   d484e:	6840      	ldr	r0, [r0, #4]
   d4850:	4611      	mov	r1, r2
   d4852:	f7ff bf6f 	b.w	d4734 <network_get_listen_timeout>

000d4856 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4856:	6840      	ldr	r0, [r0, #4]
   d4858:	2200      	movs	r2, #0
   d485a:	f7ff bf63 	b.w	d4724 <network_set_listen_timeout>

000d485e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d485e:	6840      	ldr	r0, [r0, #4]
   d4860:	2200      	movs	r2, #0
   d4862:	f081 0101 	eor.w	r1, r1, #1
   d4866:	f7ff bf4d 	b.w	d4704 <network_listen>

000d486a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d486a:	2300      	movs	r3, #0
   d486c:	6840      	ldr	r0, [r0, #4]
   d486e:	461a      	mov	r2, r3
   d4870:	4619      	mov	r1, r3
   d4872:	f7ff bf3f 	b.w	d46f4 <network_off>

000d4876 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4876:	2300      	movs	r3, #0
   d4878:	6840      	ldr	r0, [r0, #4]
   d487a:	461a      	mov	r2, r3
   d487c:	4619      	mov	r1, r3
   d487e:	f7ff bf31 	b.w	d46e4 <network_on>

000d4882 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4882:	2200      	movs	r2, #0
   d4884:	6840      	ldr	r0, [r0, #4]
   d4886:	4611      	mov	r1, r2
   d4888:	f7ff bf14 	b.w	d46b4 <network_connecting>

000d488c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d488c:	6840      	ldr	r0, [r0, #4]
   d488e:	2200      	movs	r2, #0
   d4890:	2102      	movs	r1, #2
   d4892:	f7ff bf17 	b.w	d46c4 <network_disconnect>

000d4896 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4896:	2300      	movs	r3, #0
   d4898:	6840      	ldr	r0, [r0, #4]
   d489a:	461a      	mov	r2, r3
   d489c:	f7ff bf02 	b.w	d46a4 <network_connect>

000d48a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d48a0:	4b08      	ldr	r3, [pc, #32]	; (d48c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d48a2:	b510      	push	{r4, lr}
   d48a4:	2428      	movs	r4, #40	; 0x28
   d48a6:	4622      	mov	r2, r4
   d48a8:	4618      	mov	r0, r3
   d48aa:	2100      	movs	r1, #0
   d48ac:	f001 f8d8 	bl	d5a60 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d48b0:	4b05      	ldr	r3, [pc, #20]	; (d48c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d48b2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d48b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d48b8:	6042      	str	r2, [r0, #4]
   d48ba:	2204      	movs	r2, #4
   d48bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d48be:	4a03      	ldr	r2, [pc, #12]	; (d48cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d48c0:	601a      	str	r2, [r3, #0]
   d48c2:	bd10      	pop	{r4, pc}
   d48c4:	2003e728 	.word	0x2003e728
   d48c8:	2003e720 	.word	0x2003e720
   d48cc:	000d5bb0 	.word	0x000d5bb0

000d48d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d48d0:	4770      	bx	lr

000d48d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d48d2:	2000      	movs	r0, #0
   d48d4:	4770      	bx	lr

000d48d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d48d6:	b510      	push	{r4, lr}
   d48d8:	2110      	movs	r1, #16
   d48da:	4604      	mov	r4, r0
   d48dc:	f001 f89d 	bl	d5a1a <_ZdlPvj>
   d48e0:	4620      	mov	r0, r4
   d48e2:	bd10      	pop	{r4, pc}

000d48e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d48e4:	b508      	push	{r3, lr}
      { delete this; }
   d48e6:	f7ff fff6 	bl	d48d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d48ea:	bd08      	pop	{r3, pc}

000d48ec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d48ec:	b510      	push	{r4, lr}
      if (_M_manager)
   d48ee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d48f0:	4604      	mov	r4, r0
      if (_M_manager)
   d48f2:	b113      	cbz	r3, d48fa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48f4:	2203      	movs	r2, #3
   d48f6:	4601      	mov	r1, r0
   d48f8:	4798      	blx	r3
    }
   d48fa:	4620      	mov	r0, r4
   d48fc:	bd10      	pop	{r4, pc}

000d48fe <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d48fe:	b530      	push	{r4, r5, lr}
        type_(type) {
   d4900:	2200      	movs	r2, #0
   d4902:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4906:	6002      	str	r2, [r0, #0]
   d4908:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d490a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d490c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d490e:	680c      	ldr	r4, [r1, #0]
   d4910:	8085      	strh	r5, [r0, #4]
   d4912:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4914:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4916:	bd30      	pop	{r4, r5, pc}

000d4918 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4918:	b510      	push	{r4, lr}
   d491a:	4604      	mov	r4, r0
    free((void*)msg_);
   d491c:	6800      	ldr	r0, [r0, #0]
   d491e:	f7ff ff29 	bl	d4774 <free>
}
   d4922:	4620      	mov	r0, r4
   d4924:	bd10      	pop	{r4, pc}

000d4926 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4926:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4928:	68c4      	ldr	r4, [r0, #12]
   d492a:	b1f4      	cbz	r4, d496a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d492c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d492e:	2b02      	cmp	r3, #2
   d4930:	d103      	bne.n	d493a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d4932:	f104 000c 	add.w	r0, r4, #12
   d4936:	f7ff ffef 	bl	d4918 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d493a:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d493c:	b135      	cbz	r5, d494c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d493e:	4628      	mov	r0, r5
   d4940:	f7ff ffd4 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
   d4944:	2110      	movs	r1, #16
   d4946:	4628      	mov	r0, r5
   d4948:	f001 f867 	bl	d5a1a <_ZdlPvj>
   d494c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d494e:	b135      	cbz	r5, d495e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d4950:	4628      	mov	r0, r5
   d4952:	f7ff ffcb 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
   d4956:	2110      	movs	r1, #16
   d4958:	4628      	mov	r0, r5
   d495a:	f001 f85e 	bl	d5a1a <_ZdlPvj>
   d495e:	4620      	mov	r0, r4
   d4960:	2114      	movs	r1, #20
   d4962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4966:	f001 b858 	b.w	d5a1a <_ZdlPvj>
   d496a:	bd38      	pop	{r3, r4, r5, pc}

000d496c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d496c:	b510      	push	{r4, lr}
   d496e:	b088      	sub	sp, #32
   d4970:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d4972:	4668      	mov	r0, sp
   d4974:	f000 fcf9 	bl	d536a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d4978:	4669      	mov	r1, sp
   d497a:	a804      	add	r0, sp, #16
   d497c:	f000 fd18 	bl	d53b0 <_ZN6StringC1ERKS_>
   d4980:	a804      	add	r0, sp, #16
   d4982:	47a0      	blx	r4
   d4984:	4604      	mov	r4, r0
   d4986:	a804      	add	r0, sp, #16
   d4988:	f000 fca4 	bl	d52d4 <_ZN6StringD1Ev>
    String p(param);
   d498c:	4668      	mov	r0, sp
   d498e:	f000 fca1 	bl	d52d4 <_ZN6StringD1Ev>
}
   d4992:	4620      	mov	r0, r4
   d4994:	b008      	add	sp, #32
   d4996:	bd10      	pop	{r4, pc}

000d4998 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d4998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d499a:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d499c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d49a0:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d49a2:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d49a4:	461a      	mov	r2, r3
   d49a6:	4669      	mov	r1, sp
   d49a8:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d49aa:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d49ae:	f8ad 4000 	strh.w	r4, [sp]
   d49b2:	f7ff fe57 	bl	d4664 <spark_function>
}
   d49b6:	b004      	add	sp, #16
   d49b8:	bd10      	pop	{r4, pc}

000d49ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d49ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d49bc:	460e      	mov	r6, r1
   d49be:	4604      	mov	r4, r0
   d49c0:	f856 3b04 	ldr.w	r3, [r6], #4
   d49c4:	9300      	str	r3, [sp, #0]
   d49c6:	460d      	mov	r5, r1
   d49c8:	a801      	add	r0, sp, #4
   d49ca:	4631      	mov	r1, r6
   d49cc:	f7ff ff19 	bl	d4802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d49d0:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d49d2:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d49d4:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d49d6:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d49d8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d49da:	2300      	movs	r3, #0
   d49dc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d49de:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d49e0:	f7ff fb90 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49e4:	4630      	mov	r0, r6
   d49e6:	f7ff fb8d 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d49ea:	4628      	mov	r0, r5
   d49ec:	2108      	movs	r1, #8
   d49ee:	f001 f814 	bl	d5a1a <_ZdlPvj>
        return p;
    }
   d49f2:	4620      	mov	r0, r4
   d49f4:	b002      	add	sp, #8
   d49f6:	bd70      	pop	{r4, r5, r6, pc}

000d49f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d49f8:	b513      	push	{r0, r1, r4, lr}
   d49fa:	460b      	mov	r3, r1
   d49fc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49fe:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4a02:	466c      	mov	r4, sp
   d4a04:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4a08:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4a0c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4a10:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4a14:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4a18:	b002      	add	sp, #8
   d4a1a:	bd10      	pop	{r4, pc}

000d4a1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4a1c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4a1e:	b510      	push	{r4, lr}
      if (_M_empty())
   d4a20:	b90a      	cbnz	r2, d4a26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4a22:	f000 fffe 	bl	d5a22 <_ZSt25__throw_bad_function_callv>
    }
   d4a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a2a:	68c3      	ldr	r3, [r0, #12]
   d4a2c:	4718      	bx	r3

000d4a2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a2e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4a30:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4a32:	f100 0110 	add.w	r1, r0, #16
   d4a36:	f7ff fff1 	bl	d4a1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4a3a:	bd08      	pop	{r3, pc}

000d4a3c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4a3c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d4a3e:	b510      	push	{r4, lr}
      if (_M_empty())
   d4a40:	b90a      	cbnz	r2, d4a46 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4a42:	f000 ffee 	bl	d5a22 <_ZSt25__throw_bad_function_callv>
    }
   d4a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4a4a:	68c3      	ldr	r3, [r0, #12]
   d4a4c:	4718      	bx	r3

000d4a4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4a4e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d4a50:	6800      	ldr	r0, [r0, #0]
   d4a52:	f100 0110 	add.w	r1, r0, #16
   d4a56:	f7ff fff1 	bl	d4a3c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d4a5a:	bd08      	pop	{r3, pc}

000d4a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a5c:	b538      	push	{r3, r4, r5, lr}
   d4a5e:	2300      	movs	r3, #0
   d4a60:	4604      	mov	r4, r0
   d4a62:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a64:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d4a66:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a68:	f7ff fb13 	bl	d4092 <_Znwj>
   d4a6c:	b128      	cbz	r0, d4a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d4a6e:	2301      	movs	r3, #1
   d4a70:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d4a74:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d4a76:	6003      	str	r3, [r0, #0]
   d4a78:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4a7a:	6020      	str	r0, [r4, #0]
	}
   d4a7c:	4620      	mov	r0, r4
   d4a7e:	bd38      	pop	{r3, r4, r5, pc}
   d4a80:	000d5bec 	.word	0x000d5bec

000d4a84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d4a84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4a86:	2300      	movs	r3, #0
   d4a88:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4a8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4a8c:	4604      	mov	r4, r0
   d4a8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4a90:	b12b      	cbz	r3, d4a9e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4a92:	2202      	movs	r2, #2
   d4a94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4a96:	68eb      	ldr	r3, [r5, #12]
   d4a98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4a9a:	68ab      	ldr	r3, [r5, #8]
   d4a9c:	60a3      	str	r3, [r4, #8]
    }
   d4a9e:	4620      	mov	r0, r4
   d4aa0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4aa6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4aa8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4aaa:	4668      	mov	r0, sp
   d4aac:	f7ff ff27 	bl	d48fe <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4ab0:	f04f 0302 	mov.w	r3, #2
   d4ab4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4ab8:	2a00      	cmp	r2, #0
   d4aba:	d103      	bne.n	d4ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4abc:	e8c4 3f41 	strexb	r1, r3, [r4]
   d4ac0:	2900      	cmp	r1, #0
   d4ac2:	d1f7      	bne.n	d4ab4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4ac4:	d125      	bne.n	d4b12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4ac6:	f104 050c 	add.w	r5, r4, #12
   d4aca:	4669      	mov	r1, sp
   d4acc:	4628      	mov	r0, r5
   d4ace:	f7ff ff16 	bl	d48fe <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d4ad2:	f3bf 8f5b 	dmb	ish
   d4ad6:	2301      	movs	r3, #1
   d4ad8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4ada:	2000      	movs	r0, #0
   d4adc:	f104 0308 	add.w	r3, r4, #8
   d4ae0:	f3bf 8f5b 	dmb	ish
   d4ae4:	e853 6f00 	ldrex	r6, [r3]
   d4ae8:	e843 0200 	strex	r2, r0, [r3]
   d4aec:	2a00      	cmp	r2, #0
   d4aee:	d1f9      	bne.n	d4ae4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d4af0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4af4:	b16e      	cbz	r6, d4b12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4af6:	f7ff fd91 	bl	d461c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4afa:	b178      	cbz	r0, d4b1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4afc:	4629      	mov	r1, r5
   d4afe:	4630      	mov	r0, r6
   d4b00:	f7ff ff8c 	bl	d4a1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4b04:	4630      	mov	r0, r6
   d4b06:	f7ff fef1 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4b0a:	2110      	movs	r1, #16
   d4b0c:	4630      	mov	r0, r6
   d4b0e:	f000 ff84 	bl	d5a1a <_ZdlPvj>
        p_->setError(std::move(error));
   d4b12:	4668      	mov	r0, sp
   d4b14:	f7ff ff00 	bl	d4918 <_ZN8particle5ErrorD1Ev>
    }
   d4b18:	b009      	add	sp, #36	; 0x24
   d4b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4b1c:	4631      	mov	r1, r6
   d4b1e:	a802      	add	r0, sp, #8
   d4b20:	f7ff ffb0 	bl	d4a84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4b24:	68e0      	ldr	r0, [r4, #12]
   d4b26:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4b2a:	b108      	cbz	r0, d4b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4b2c:	f000 ffce 	bl	d5acc <strdup>
        type_(type) {
   d4b30:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4b32:	2010      	movs	r0, #16
   d4b34:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4b38:	f7ff faab 	bl	d4092 <_Znwj>
   d4b3c:	4605      	mov	r5, r0
   d4b3e:	b1e8      	cbz	r0, d4b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d4b40:	2700      	movs	r7, #0
   d4b42:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b44:	2018      	movs	r0, #24
   d4b46:	f7ff faa4 	bl	d4092 <_Znwj>
   d4b4a:	4604      	mov	r4, r0
   d4b4c:	b188      	cbz	r0, d4b72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d4b4e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d4b50:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4b52:	a802      	add	r0, sp, #8
   d4b54:	f7ff ff50 	bl	d49f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b58:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4b5a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b5c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4b5e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4b60:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4b62:	a906      	add	r1, sp, #24
   d4b64:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4b66:	60e3      	str	r3, [r4, #12]
   d4b68:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d4b6c:	9205      	str	r2, [sp, #20]
   d4b6e:	f7ff fec6 	bl	d48fe <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d4b72:	4b08      	ldr	r3, [pc, #32]	; (d4b94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d4b74:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4b76:	4b08      	ldr	r3, [pc, #32]	; (d4b98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4b78:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4b7a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d4b7c:	a806      	add	r0, sp, #24
   d4b7e:	f7ff fecb 	bl	d4918 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4b82:	a802      	add	r0, sp, #8
   d4b84:	f7ff feb2 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4b88:	2200      	movs	r2, #0
   d4b8a:	4629      	mov	r1, r5
   d4b8c:	4803      	ldr	r0, [pc, #12]	; (d4b9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d4b8e:	f7ff fd4d 	bl	d462c <application_thread_invoke>
   d4b92:	e7b7      	b.n	d4b04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d4b94:	000d4a2f 	.word	0x000d4a2f
   d4b98:	000d4cc5 	.word	0x000d4cc5
   d4b9c:	000d47cb 	.word	0x000d47cb

000d4ba0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d4ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4ba4:	b08a      	sub	sp, #40	; 0x28
   d4ba6:	4605      	mov	r5, r0
   d4ba8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4bac:	460c      	mov	r4, r1
   d4bae:	4617      	mov	r7, r2
   d4bb0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bb2:	f7ff fd5f 	bl	d4674 <spark_cloud_flag_connected>
   d4bb6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4bb8:	4682      	mov	sl, r0
   d4bba:	bb38      	cbnz	r0, d4c0c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4bbc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4bc0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4bc2:	a905      	add	r1, sp, #20
   d4bc4:	4630      	mov	r0, r6
   d4bc6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4bca:	f7ff fe98 	bl	d48fe <_ZN8particle5ErrorC1EOS0_>
   d4bce:	2014      	movs	r0, #20
   d4bd0:	f7ff fa5f 	bl	d4092 <_Znwj>
   d4bd4:	4604      	mov	r4, r0
   d4bd6:	b148      	cbz	r0, d4bec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4bd8:	2302      	movs	r3, #2
   d4bda:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4bdc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4bde:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4be2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4be4:	4631      	mov	r1, r6
   d4be6:	300c      	adds	r0, #12
   d4be8:	f7ff fe89 	bl	d48fe <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4bec:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4bee:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4bf0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4bf4:	f7ff ff32 	bl	d4a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4bf8:	4630      	mov	r0, r6
   d4bfa:	f7ff fe8d 	bl	d4918 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4bfe:	a805      	add	r0, sp, #20
   d4c00:	f7ff fe8a 	bl	d4918 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4c04:	4628      	mov	r0, r5
   d4c06:	b00a      	add	sp, #40	; 0x28
   d4c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4c0c:	230c      	movs	r3, #12
   d4c0e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4c12:	2014      	movs	r0, #20
   d4c14:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4c18:	9307      	str	r3, [sp, #28]
   d4c1a:	f7ff fa3a 	bl	d4092 <_Znwj>
   d4c1e:	4601      	mov	r1, r0
   d4c20:	b128      	cbz	r0, d4c2e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4c22:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4c26:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4c2a:	f880 a001 	strb.w	sl, [r0, #1]
   d4c2e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4c30:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4c32:	f7ff ff13 	bl	d4a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4c36:	4b22      	ldr	r3, [pc, #136]	; (d4cc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4c38:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4c3a:	2008      	movs	r0, #8
   d4c3c:	f7ff fa29 	bl	d4092 <_Znwj>
   d4c40:	4682      	mov	sl, r0
   d4c42:	b128      	cbz	r0, d4c50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c44:	9b03      	ldr	r3, [sp, #12]
   d4c46:	f840 3b04 	str.w	r3, [r0], #4
   d4c4a:	a904      	add	r1, sp, #16
   d4c4c:	f7ff fdd9 	bl	d4802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c50:	9600      	str	r6, [sp, #0]
   d4c52:	fa5f f389 	uxtb.w	r3, r9
   d4c56:	4642      	mov	r2, r8
   d4c58:	4639      	mov	r1, r7
   d4c5a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4c5c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4c60:	f7ff fd10 	bl	d4684 <spark_send_event>
   d4c64:	b9b8      	cbnz	r0, d4c96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4c66:	9b03      	ldr	r3, [sp, #12]
   d4c68:	785b      	ldrb	r3, [r3, #1]
   d4c6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4c6e:	b993      	cbnz	r3, d4c96 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4c70:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4c74:	a905      	add	r1, sp, #20
   d4c76:	a803      	add	r0, sp, #12
   d4c78:	9205      	str	r2, [sp, #20]
   d4c7a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4c7e:	f7ff ff11 	bl	d4aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4c82:	a805      	add	r0, sp, #20
   d4c84:	f7ff fe48 	bl	d4918 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4c88:	a805      	add	r0, sp, #20
   d4c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4c8c:	f7ff fe95 	bl	d49ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4c90:	a806      	add	r0, sp, #24
   d4c92:	f7ff fa37 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4c96:	9b03      	ldr	r3, [sp, #12]
   d4c98:	9305      	str	r3, [sp, #20]
   d4c9a:	a904      	add	r1, sp, #16
   d4c9c:	a806      	add	r0, sp, #24
   d4c9e:	f7ff fdb0 	bl	d4802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ca2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4ca4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4ca6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4ca8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4caa:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4cac:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4cae:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4cb0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4cb2:	f7ff fa27 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4cb6:	a804      	add	r0, sp, #16
   d4cb8:	f7ff fa24 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4cbc:	e7a2      	b.n	d4c04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4cbe:	bf00      	nop
   d4cc0:	000d4d89 	.word	0x000d4d89

000d4cc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4cc4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cc8:	4605      	mov	r5, r0
	  switch (__op)
   d4cca:	d007      	beq.n	d4cdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4ccc:	2a03      	cmp	r2, #3
   d4cce:	d018      	beq.n	d4d02 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4cd0:	2a01      	cmp	r2, #1
   d4cd2:	d101      	bne.n	d4cd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4cd4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4cd6:	6003      	str	r3, [r0, #0]
	}
   d4cd8:	2000      	movs	r0, #0
   d4cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4cdc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4cde:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4ce0:	f7ff f9d7 	bl	d4092 <_Znwj>
   d4ce4:	4604      	mov	r4, r0
   d4ce6:	b150      	cbz	r0, d4cfe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4ce8:	4631      	mov	r1, r6
   d4cea:	f7ff fecb 	bl	d4a84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4cee:	6930      	ldr	r0, [r6, #16]
   d4cf0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4cf4:	b108      	cbz	r0, d4cfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4cf6:	f000 fee9 	bl	d5acc <strdup>
        type_(type) {
   d4cfa:	6120      	str	r0, [r4, #16]
   d4cfc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4cfe:	602c      	str	r4, [r5, #0]
	}
   d4d00:	e7ea      	b.n	d4cd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4d02:	6804      	ldr	r4, [r0, #0]
   d4d04:	2c00      	cmp	r4, #0
   d4d06:	d0e7      	beq.n	d4cd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4d08:	f104 0010 	add.w	r0, r4, #16
   d4d0c:	f7ff fe04 	bl	d4918 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4d10:	4620      	mov	r0, r4
   d4d12:	f7ff fdeb 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4d16:	2118      	movs	r1, #24
   d4d18:	4620      	mov	r0, r4
   d4d1a:	f000 fe7e 	bl	d5a1a <_ZdlPvj>
   d4d1e:	e7db      	b.n	d4cd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4d20 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4d20:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4d22:	2300      	movs	r3, #0
   d4d24:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4d26:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4d28:	4604      	mov	r4, r0
   d4d2a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4d2c:	b12b      	cbz	r3, d4d3a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4d2e:	2202      	movs	r2, #2
   d4d30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4d32:	68eb      	ldr	r3, [r5, #12]
   d4d34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4d36:	68ab      	ldr	r3, [r5, #8]
   d4d38:	60a3      	str	r3, [r4, #8]
    }
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	bd38      	pop	{r3, r4, r5, pc}

000d4d3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4d3e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4d40:	b570      	push	{r4, r5, r6, lr}
   d4d42:	4604      	mov	r4, r0
	  switch (__op)
   d4d44:	d007      	beq.n	d4d56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4d46:	2a03      	cmp	r2, #3
   d4d48:	d012      	beq.n	d4d70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4d4a:	2a01      	cmp	r2, #1
   d4d4c:	d101      	bne.n	d4d52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4d4e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4d50:	6003      	str	r3, [r0, #0]
	}
   d4d52:	2000      	movs	r0, #0
   d4d54:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4d56:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4d58:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4d5a:	f7ff f99a 	bl	d4092 <_Znwj>
   d4d5e:	4605      	mov	r5, r0
   d4d60:	b120      	cbz	r0, d4d6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4d62:	4631      	mov	r1, r6
   d4d64:	f7ff ffdc 	bl	d4d20 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4d68:	7c33      	ldrb	r3, [r6, #16]
   d4d6a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4d6c:	6025      	str	r5, [r4, #0]
	}
   d4d6e:	e7f0      	b.n	d4d52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4d70:	6804      	ldr	r4, [r0, #0]
   d4d72:	2c00      	cmp	r4, #0
   d4d74:	d0ed      	beq.n	d4d52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4d76:	4620      	mov	r0, r4
   d4d78:	f7ff fdb8 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4d7c:	2114      	movs	r1, #20
   d4d7e:	4620      	mov	r0, r4
   d4d80:	f000 fe4b 	bl	d5a1a <_ZdlPvj>
   d4d84:	e7e5      	b.n	d4d52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4d88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4d88:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4d8a:	b089      	sub	sp, #36	; 0x24
   d4d8c:	4604      	mov	r4, r0
   d4d8e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4d90:	a801      	add	r0, sp, #4
   d4d92:	4611      	mov	r1, r2
   d4d94:	f7ff fe11 	bl	d49ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4d98:	b1a4      	cbz	r4, d4dc4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4d9a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4d9c:	b11d      	cbz	r5, d4da6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4d9e:	4628      	mov	r0, r5
   d4da0:	f000 fe94 	bl	d5acc <strdup>
   d4da4:	4605      	mov	r5, r0
   d4da6:	a801      	add	r0, sp, #4
   d4da8:	a903      	add	r1, sp, #12
        type_(type) {
   d4daa:	9503      	str	r5, [sp, #12]
   d4dac:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4db0:	f7ff fe78 	bl	d4aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4db4:	a803      	add	r0, sp, #12
   d4db6:	f7ff fdaf 	bl	d4918 <_ZN8particle5ErrorD1Ev>
   d4dba:	a802      	add	r0, sp, #8
   d4dbc:	f7ff f9a2 	bl	d4104 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4dc0:	b009      	add	sp, #36	; 0x24
   d4dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4dc4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4dc6:	2301      	movs	r3, #1
   d4dc8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4dcc:	2a00      	cmp	r2, #0
   d4dce:	d103      	bne.n	d4dd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4dd0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4dd4:	2900      	cmp	r1, #0
   d4dd6:	d1f7      	bne.n	d4dc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4dd8:	d1ef      	bne.n	d4dba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4dda:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4ddc:	f3bf 8f5b 	dmb	ish
   d4de0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4de2:	1d2b      	adds	r3, r5, #4
   d4de4:	f3bf 8f5b 	dmb	ish
   d4de8:	e853 6f00 	ldrex	r6, [r3]
   d4dec:	e843 4200 	strex	r2, r4, [r3]
   d4df0:	2a00      	cmp	r2, #0
   d4df2:	d1f9      	bne.n	d4de8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d4df4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4df8:	2e00      	cmp	r6, #0
   d4dfa:	d0de      	beq.n	d4dba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d4dfc:	4620      	mov	r0, r4
   d4dfe:	f7ff fc0d 	bl	d461c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4e02:	4607      	mov	r7, r0
   d4e04:	b160      	cbz	r0, d4e20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4e06:	f105 010c 	add.w	r1, r5, #12
   d4e0a:	4630      	mov	r0, r6
   d4e0c:	f7ff fe16 	bl	d4a3c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d4e10:	4630      	mov	r0, r6
   d4e12:	f7ff fd6b 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4e16:	2110      	movs	r1, #16
   d4e18:	4630      	mov	r0, r6
   d4e1a:	f000 fdfe 	bl	d5a1a <_ZdlPvj>
   d4e1e:	e7cc      	b.n	d4dba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4e20:	4631      	mov	r1, r6
   d4e22:	a803      	add	r0, sp, #12
   d4e24:	f7ff ff7c 	bl	d4d20 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4e28:	7b2b      	ldrb	r3, [r5, #12]
   d4e2a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4e2e:	2010      	movs	r0, #16
   d4e30:	f7ff f92f 	bl	d4092 <_Znwj>
   d4e34:	4605      	mov	r5, r0
   d4e36:	b1d0      	cbz	r0, d4e6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d4e38:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e3a:	2014      	movs	r0, #20
   d4e3c:	f7ff f929 	bl	d4092 <_Znwj>
   d4e40:	4604      	mov	r4, r0
   d4e42:	b178      	cbz	r0, d4e64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d4e44:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4e46:	4601      	mov	r1, r0
   d4e48:	a803      	add	r0, sp, #12
   d4e4a:	f7ff fdd5 	bl	d49f8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e4e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4e50:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e52:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e54:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4e56:	9205      	str	r2, [sp, #20]
   d4e58:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4e5a:	60e3      	str	r3, [r4, #12]
   d4e5c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4e60:	9206      	str	r2, [sp, #24]
   d4e62:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d4e64:	4b06      	ldr	r3, [pc, #24]	; (d4e80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d4e66:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4e68:	4b06      	ldr	r3, [pc, #24]	; (d4e84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4e6a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4e6c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d4e6e:	a803      	add	r0, sp, #12
   d4e70:	f7ff fd3c 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4e74:	2200      	movs	r2, #0
   d4e76:	4629      	mov	r1, r5
   d4e78:	4803      	ldr	r0, [pc, #12]	; (d4e88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d4e7a:	f7ff fbd7 	bl	d462c <application_thread_invoke>
   d4e7e:	e7c7      	b.n	d4e10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d4e80:	000d4a4f 	.word	0x000d4a4f
   d4e84:	000d4d3f 	.word	0x000d4d3f
   d4e88:	000d47cb 	.word	0x000d47cb

000d4e8c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e8c:	2200      	movs	r2, #0
   d4e8e:	6840      	ldr	r0, [r0, #4]
   d4e90:	4611      	mov	r1, r2
   d4e92:	f7ff bc3f 	b.w	d4714 <network_listening>

000d4e96 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4e96:	2200      	movs	r2, #0
   d4e98:	6840      	ldr	r0, [r0, #4]
   d4e9a:	4611      	mov	r1, r2
   d4e9c:	f7ff bc4a 	b.w	d4734 <network_get_listen_timeout>

000d4ea0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ea0:	6840      	ldr	r0, [r0, #4]
   d4ea2:	2200      	movs	r2, #0
   d4ea4:	f7ff bc3e 	b.w	d4724 <network_set_listen_timeout>

000d4ea8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ea8:	6840      	ldr	r0, [r0, #4]
   d4eaa:	2200      	movs	r2, #0
   d4eac:	f081 0101 	eor.w	r1, r1, #1
   d4eb0:	f7ff bc28 	b.w	d4704 <network_listen>

000d4eb4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	6840      	ldr	r0, [r0, #4]
   d4eb8:	461a      	mov	r2, r3
   d4eba:	4619      	mov	r1, r3
   d4ebc:	f7ff bc1a 	b.w	d46f4 <network_off>

000d4ec0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4ec0:	2300      	movs	r3, #0
   d4ec2:	6840      	ldr	r0, [r0, #4]
   d4ec4:	461a      	mov	r2, r3
   d4ec6:	4619      	mov	r1, r3
   d4ec8:	f7ff bc0c 	b.w	d46e4 <network_on>

000d4ecc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ecc:	2200      	movs	r2, #0
   d4ece:	6840      	ldr	r0, [r0, #4]
   d4ed0:	4611      	mov	r1, r2
   d4ed2:	f7ff bbff 	b.w	d46d4 <network_ready>

000d4ed6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4ed6:	2200      	movs	r2, #0
   d4ed8:	6840      	ldr	r0, [r0, #4]
   d4eda:	4611      	mov	r1, r2
   d4edc:	f7ff bbea 	b.w	d46b4 <network_connecting>

000d4ee0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ee0:	6840      	ldr	r0, [r0, #4]
   d4ee2:	2200      	movs	r2, #0
   d4ee4:	2102      	movs	r1, #2
   d4ee6:	f7ff bbed 	b.w	d46c4 <network_disconnect>

000d4eea <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4eea:	2300      	movs	r3, #0
   d4eec:	6840      	ldr	r0, [r0, #4]
   d4eee:	461a      	mov	r2, r3
   d4ef0:	f7ff bbd8 	b.w	d46a4 <network_connect>

000d4ef4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4ef4:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ef6:	2203      	movs	r2, #3
   d4ef8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4efa:	4a02      	ldr	r2, [pc, #8]	; (d4f04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4efc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4efe:	4770      	bx	lr
   d4f00:	2003e750 	.word	0x2003e750
   d4f04:	000d5c08 	.word	0x000d5c08

000d4f08 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4f08:	4770      	bx	lr

000d4f0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f0c:	4606      	mov	r6, r0
   d4f0e:	4615      	mov	r5, r2
   d4f10:	460c      	mov	r4, r1
   d4f12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4f14:	42bc      	cmp	r4, r7
   d4f16:	d006      	beq.n	d4f26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4f18:	6833      	ldr	r3, [r6, #0]
   d4f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4f1e:	689b      	ldr	r3, [r3, #8]
   d4f20:	4630      	mov	r0, r6
   d4f22:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4f24:	e7f6      	b.n	d4f14 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4f26:	4628      	mov	r0, r5
   d4f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f2a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4f2a:	7c00      	ldrb	r0, [r0, #16]
   d4f2c:	2200      	movs	r2, #0
   d4f2e:	f7ff ba7d 	b.w	d442c <hal_i2c_write>

000d4f32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4f32:	7c00      	ldrb	r0, [r0, #16]
   d4f34:	2100      	movs	r1, #0
   d4f36:	f7ff ba81 	b.w	d443c <hal_i2c_available>

000d4f3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4f3a:	7c00      	ldrb	r0, [r0, #16]
   d4f3c:	2100      	movs	r1, #0
   d4f3e:	f7ff ba85 	b.w	d444c <hal_i2c_read>

000d4f42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4f42:	7c00      	ldrb	r0, [r0, #16]
   d4f44:	2100      	movs	r1, #0
   d4f46:	f7ff ba89 	b.w	d445c <hal_i2c_peek>

000d4f4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4f4a:	7c00      	ldrb	r0, [r0, #16]
   d4f4c:	2100      	movs	r1, #0
   d4f4e:	f7ff ba8d 	b.w	d446c <hal_i2c_flush>

000d4f52 <_ZN7TwoWireD0Ev>:
   d4f52:	b510      	push	{r4, lr}
   d4f54:	2114      	movs	r1, #20
   d4f56:	4604      	mov	r4, r0
   d4f58:	f000 fd5f 	bl	d5a1a <_ZdlPvj>
   d4f5c:	4620      	mov	r0, r4
   d4f5e:	bd10      	pop	{r4, pc}

000d4f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4f60:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4f66:	4604      	mov	r4, r0
   d4f68:	4608      	mov	r0, r1
   d4f6a:	2100      	movs	r1, #0
   d4f6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4f70:	4b03      	ldr	r3, [pc, #12]	; (d4f80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4f72:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4f74:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4f76:	4611      	mov	r1, r2
   d4f78:	f7ff fa88 	bl	d448c <hal_i2c_init>
}
   d4f7c:	4620      	mov	r0, r4
   d4f7e:	bd10      	pop	{r4, pc}
   d4f80:	000d5c44 	.word	0x000d5c44

000d4f84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4f84:	4770      	bx	lr

000d4f86 <_ZN9IPAddressD0Ev>:
   d4f86:	b510      	push	{r4, lr}
   d4f88:	2118      	movs	r1, #24
   d4f8a:	4604      	mov	r4, r0
   d4f8c:	f000 fd45 	bl	d5a1a <_ZdlPvj>
   d4f90:	4620      	mov	r0, r4
   d4f92:	bd10      	pop	{r4, pc}

000d4f94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4f94:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4f96:	7d03      	ldrb	r3, [r0, #20]
   d4f98:	2b06      	cmp	r3, #6
{
   d4f9a:	b08d      	sub	sp, #52	; 0x34
   d4f9c:	460e      	mov	r6, r1
   d4f9e:	f100 0704 	add.w	r7, r0, #4
   d4fa2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4fa6:	d012      	beq.n	d4fce <_ZNK9IPAddress7printToER5Print+0x3a>
   d4fa8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4fac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4fb0:	220a      	movs	r2, #10
   d4fb2:	4630      	mov	r0, r6
   d4fb4:	f000 f951 	bl	d525a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4fb8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4fba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4fbc:	d019      	beq.n	d4ff2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4fbe:	2c00      	cmp	r4, #0
   d4fc0:	d0f4      	beq.n	d4fac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4fc2:	212e      	movs	r1, #46	; 0x2e
   d4fc4:	4630      	mov	r0, r6
   d4fc6:	f000 f92f 	bl	d5228 <_ZN5Print5printEc>
   d4fca:	4404      	add	r4, r0
   d4fcc:	e7ee      	b.n	d4fac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fce:	232f      	movs	r3, #47	; 0x2f
   d4fd0:	466a      	mov	r2, sp
   d4fd2:	4639      	mov	r1, r7
   d4fd4:	200a      	movs	r0, #10
		buf[0] = 0;
   d4fd6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4fda:	f7ff fa5f 	bl	d449c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4fde:	4668      	mov	r0, sp
   d4fe0:	f000 fd91 	bl	d5b06 <strlen>
   d4fe4:	6833      	ldr	r3, [r6, #0]
   d4fe6:	4602      	mov	r2, r0
   d4fe8:	68db      	ldr	r3, [r3, #12]
   d4fea:	4669      	mov	r1, sp
   d4fec:	4630      	mov	r0, r6
   d4fee:	4798      	blx	r3
   d4ff0:	4604      	mov	r4, r0
    }
    return n;
}
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	b00d      	add	sp, #52	; 0x34
   d4ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ff8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4ff8:	b510      	push	{r4, lr}
   d4ffa:	4b05      	ldr	r3, [pc, #20]	; (d5010 <_ZN9IPAddressC1Ev+0x18>)
   d4ffc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4ffe:	2211      	movs	r2, #17
   d5000:	f840 3b04 	str.w	r3, [r0], #4
   d5004:	2100      	movs	r1, #0
   d5006:	f000 fd2b 	bl	d5a60 <memset>
}
   d500a:	4620      	mov	r0, r4
   d500c:	bd10      	pop	{r4, pc}
   d500e:	bf00      	nop
   d5010:	000d5c6c 	.word	0x000d5c6c

000d5014 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5014:	4603      	mov	r3, r0
   d5016:	4a07      	ldr	r2, [pc, #28]	; (d5034 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5018:	b510      	push	{r4, lr}
   d501a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d501e:	f101 0210 	add.w	r2, r1, #16
   d5022:	f851 4b04 	ldr.w	r4, [r1], #4
   d5026:	f843 4b04 	str.w	r4, [r3], #4
   d502a:	4291      	cmp	r1, r2
   d502c:	d1f9      	bne.n	d5022 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d502e:	780a      	ldrb	r2, [r1, #0]
   d5030:	701a      	strb	r2, [r3, #0]
}
   d5032:	bd10      	pop	{r4, pc}
   d5034:	000d5c6c 	.word	0x000d5c6c

000d5038 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5038:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d503a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d503e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5042:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5046:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d504a:	2304      	movs	r3, #4
   d504c:	6041      	str	r1, [r0, #4]
   d504e:	7503      	strb	r3, [r0, #20]
}
   d5050:	bd10      	pop	{r4, pc}

000d5052 <_ZN9IPAddressaSEPKh>:
{
   d5052:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5054:	78cb      	ldrb	r3, [r1, #3]
   d5056:	9300      	str	r3, [sp, #0]
   d5058:	788b      	ldrb	r3, [r1, #2]
   d505a:	784a      	ldrb	r2, [r1, #1]
   d505c:	7809      	ldrb	r1, [r1, #0]
   d505e:	f7ff ffeb 	bl	d5038 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5062:	b002      	add	sp, #8
   d5064:	bd10      	pop	{r4, pc}
	...

000d5068 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5068:	4b01      	ldr	r3, [pc, #4]	; (d5070 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d506a:	4a02      	ldr	r2, [pc, #8]	; (d5074 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d506c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d506e:	4770      	bx	lr
   d5070:	2003e758 	.word	0x2003e758
   d5074:	000d5c78 	.word	0x000d5c78

000d5078 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5078:	2300      	movs	r3, #0
   d507a:	6840      	ldr	r0, [r0, #4]
   d507c:	461a      	mov	r2, r3
   d507e:	f7ff bb11 	b.w	d46a4 <network_connect>

000d5082 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5082:	6840      	ldr	r0, [r0, #4]
   d5084:	2200      	movs	r2, #0
   d5086:	2102      	movs	r1, #2
   d5088:	f7ff bb1c 	b.w	d46c4 <network_disconnect>

000d508c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d508c:	2200      	movs	r2, #0
   d508e:	6840      	ldr	r0, [r0, #4]
   d5090:	4611      	mov	r1, r2
   d5092:	f7ff bb0f 	b.w	d46b4 <network_connecting>

000d5096 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5096:	2200      	movs	r2, #0
   d5098:	6840      	ldr	r0, [r0, #4]
   d509a:	4611      	mov	r1, r2
   d509c:	f7ff bb1a 	b.w	d46d4 <network_ready>

000d50a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d50a0:	2300      	movs	r3, #0
   d50a2:	6840      	ldr	r0, [r0, #4]
   d50a4:	461a      	mov	r2, r3
   d50a6:	4619      	mov	r1, r3
   d50a8:	f7ff bb1c 	b.w	d46e4 <network_on>

000d50ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d50ac:	2300      	movs	r3, #0
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	461a      	mov	r2, r3
   d50b2:	4619      	mov	r1, r3
   d50b4:	f7ff bb1e 	b.w	d46f4 <network_off>

000d50b8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d50b8:	6840      	ldr	r0, [r0, #4]
   d50ba:	2100      	movs	r1, #0
   d50bc:	f7ff bb42 	b.w	d4744 <network_is_on>

000d50c0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d50c0:	6840      	ldr	r0, [r0, #4]
   d50c2:	2100      	movs	r1, #0
   d50c4:	f7ff bb46 	b.w	d4754 <network_is_off>

000d50c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d50c8:	6840      	ldr	r0, [r0, #4]
   d50ca:	2200      	movs	r2, #0
   d50cc:	f081 0101 	eor.w	r1, r1, #1
   d50d0:	f7ff bb18 	b.w	d4704 <network_listen>

000d50d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d50d4:	6840      	ldr	r0, [r0, #4]
   d50d6:	2200      	movs	r2, #0
   d50d8:	f7ff bb24 	b.w	d4724 <network_set_listen_timeout>

000d50dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d50dc:	2200      	movs	r2, #0
   d50de:	6840      	ldr	r0, [r0, #4]
   d50e0:	4611      	mov	r1, r2
   d50e2:	f7ff bb27 	b.w	d4734 <network_get_listen_timeout>

000d50e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d50e6:	2200      	movs	r2, #0
   d50e8:	6840      	ldr	r0, [r0, #4]
   d50ea:	4611      	mov	r1, r2
   d50ec:	f7ff bb12 	b.w	d4714 <network_listening>

000d50f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d50f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d50f4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d50f6:	b095      	sub	sp, #84	; 0x54
   d50f8:	4616      	mov	r6, r2
   d50fa:	460d      	mov	r5, r1
   d50fc:	4607      	mov	r7, r0
    IPAddress addr;
   d50fe:	f7ff ff7b 	bl	d4ff8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5102:	4621      	mov	r1, r4
   d5104:	2218      	movs	r2, #24
   d5106:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5108:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d510a:	f000 fca9 	bl	d5a60 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d510e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5110:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5114:	4621      	mov	r1, r4
   d5116:	466b      	mov	r3, sp
   d5118:	aa0c      	add	r2, sp, #48	; 0x30
   d511a:	4630      	mov	r0, r6
   d511c:	f7ff f9ce 	bl	d44bc <netdb_getaddrinfo>
    if (!r) {
   d5120:	4604      	mov	r4, r0
   d5122:	2800      	cmp	r0, #0
   d5124:	d146      	bne.n	d51b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5126:	4602      	mov	r2, r0
   d5128:	2101      	movs	r1, #1
   d512a:	6868      	ldr	r0, [r5, #4]
   d512c:	f7ff fad2 	bl	d46d4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5130:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5132:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5134:	4622      	mov	r2, r4
   d5136:	6868      	ldr	r0, [r5, #4]
   d5138:	f7ff facc 	bl	d46d4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d513c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d513e:	4681      	mov	r9, r0
        bool ok = false;
   d5140:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5142:	2e00      	cmp	r6, #0
   d5144:	d036      	beq.n	d51b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5146:	2900      	cmp	r1, #0
   d5148:	d134      	bne.n	d51b4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d514a:	6873      	ldr	r3, [r6, #4]
   d514c:	2b02      	cmp	r3, #2
   d514e:	d003      	beq.n	d5158 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5150:	2b0a      	cmp	r3, #10
   d5152:	d00b      	beq.n	d516c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5154:	69f6      	ldr	r6, [r6, #28]
   d5156:	e7f4      	b.n	d5142 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5158:	f1b8 0f00 	cmp.w	r8, #0
   d515c:	d004      	beq.n	d5168 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d515e:	6971      	ldr	r1, [r6, #20]
   d5160:	4638      	mov	r0, r7
   d5162:	3104      	adds	r1, #4
   d5164:	f7ff ff75 	bl	d5052 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5168:	4641      	mov	r1, r8
   d516a:	e7f3      	b.n	d5154 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d516c:	f1b9 0f00 	cmp.w	r9, #0
   d5170:	d101      	bne.n	d5176 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5172:	4649      	mov	r1, r9
   d5174:	e7ee      	b.n	d5154 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5176:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5178:	2210      	movs	r2, #16
   d517a:	a801      	add	r0, sp, #4
   d517c:	f000 fc70 	bl	d5a60 <memset>
                    a.v = 6;
   d5180:	2306      	movs	r3, #6
   d5182:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5186:	ad01      	add	r5, sp, #4
   d5188:	f104 0308 	add.w	r3, r4, #8
   d518c:	3418      	adds	r4, #24
   d518e:	6818      	ldr	r0, [r3, #0]
   d5190:	6859      	ldr	r1, [r3, #4]
   d5192:	462a      	mov	r2, r5
   d5194:	c203      	stmia	r2!, {r0, r1}
   d5196:	3308      	adds	r3, #8
   d5198:	42a3      	cmp	r3, r4
   d519a:	4615      	mov	r5, r2
   d519c:	d1f7      	bne.n	d518e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d519e:	a901      	add	r1, sp, #4
   d51a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d51a2:	ad07      	add	r5, sp, #28
   d51a4:	f7ff ff36 	bl	d5014 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d51a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d51aa:	1d3c      	adds	r4, r7, #4
   d51ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d51ae:	682b      	ldr	r3, [r5, #0]
   d51b0:	7023      	strb	r3, [r4, #0]
   d51b2:	e7de      	b.n	d5172 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d51b4:	9800      	ldr	r0, [sp, #0]
   d51b6:	f7ff f979 	bl	d44ac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d51ba:	4638      	mov	r0, r7
   d51bc:	b015      	add	sp, #84	; 0x54
   d51be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d51c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d51c4:	4b02      	ldr	r3, [pc, #8]	; (d51d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d51c6:	4a03      	ldr	r2, [pc, #12]	; (d51d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d51c8:	601a      	str	r2, [r3, #0]
   d51ca:	2200      	movs	r2, #0
   d51cc:	605a      	str	r2, [r3, #4]

} // spark
   d51ce:	4770      	bx	lr
   d51d0:	2003e75c 	.word	0x2003e75c
   d51d4:	000d5c84 	.word	0x000d5c84

000d51d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d51d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51da:	4606      	mov	r6, r0
   d51dc:	460d      	mov	r5, r1
  size_t n = 0;
   d51de:	188f      	adds	r7, r1, r2
   d51e0:	2400      	movs	r4, #0
  while (size--) {
   d51e2:	42bd      	cmp	r5, r7
   d51e4:	d00c      	beq.n	d5200 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d51e6:	6833      	ldr	r3, [r6, #0]
   d51e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d51ec:	689b      	ldr	r3, [r3, #8]
   d51ee:	4630      	mov	r0, r6
   d51f0:	4798      	blx	r3
     if (chunk>=0)
   d51f2:	1e03      	subs	r3, r0, #0
   d51f4:	db01      	blt.n	d51fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d51f6:	441c      	add	r4, r3
  while (size--) {
   d51f8:	e7f3      	b.n	d51e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d51fa:	2c00      	cmp	r4, #0
   d51fc:	bf08      	it	eq
   d51fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5200:	4620      	mov	r0, r4
   d5202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5204 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5204:	b513      	push	{r0, r1, r4, lr}
   d5206:	4604      	mov	r4, r0
    }
   d5208:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d520a:	b159      	cbz	r1, d5224 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d520c:	9101      	str	r1, [sp, #4]
   d520e:	f000 fc7a 	bl	d5b06 <strlen>
   d5212:	6823      	ldr	r3, [r4, #0]
   d5214:	9901      	ldr	r1, [sp, #4]
   d5216:	68db      	ldr	r3, [r3, #12]
   d5218:	4602      	mov	r2, r0
   d521a:	4620      	mov	r0, r4
    }
   d521c:	b002      	add	sp, #8
   d521e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5222:	4718      	bx	r3
    }
   d5224:	b002      	add	sp, #8
   d5226:	bd10      	pop	{r4, pc}

000d5228 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5228:	6803      	ldr	r3, [r0, #0]
   d522a:	689b      	ldr	r3, [r3, #8]
   d522c:	4718      	bx	r3

000d522e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d522e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5230:	210d      	movs	r1, #13
{
   d5232:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5234:	f7ff fff8 	bl	d5228 <_ZN5Print5printEc>
  n += print('\n');
   d5238:	210a      	movs	r1, #10
  size_t n = print('\r');
   d523a:	4604      	mov	r4, r0
  n += print('\n');
   d523c:	4628      	mov	r0, r5
   d523e:	f7ff fff3 	bl	d5228 <_ZN5Print5printEc>
  return n;
}
   d5242:	4420      	add	r0, r4
   d5244:	bd38      	pop	{r3, r4, r5, pc}

000d5246 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5246:	b538      	push	{r3, r4, r5, lr}
   d5248:	4605      	mov	r5, r0
  return write(str);
   d524a:	f7ff ffdb 	bl	d5204 <_ZN5Print5writeEPKc>
   d524e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5250:	4628      	mov	r0, r5
   d5252:	f7ff ffec 	bl	d522e <_ZN5Print7printlnEv>
  return n;
}
   d5256:	4420      	add	r0, r4
   d5258:	bd38      	pop	{r3, r4, r5, pc}

000d525a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d525a:	b530      	push	{r4, r5, lr}
   d525c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d525e:	2300      	movs	r3, #0
   d5260:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5264:	2a01      	cmp	r2, #1
   d5266:	bf98      	it	ls
   d5268:	220a      	movls	r2, #10
   d526a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d526c:	460d      	mov	r5, r1
   d526e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5272:	fb01 5312 	mls	r3, r1, r2, r5
   d5276:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d527a:	2b09      	cmp	r3, #9
   d527c:	bf94      	ite	ls
   d527e:	3330      	addls	r3, #48	; 0x30
   d5280:	3337      	addhi	r3, #55	; 0x37
   d5282:	b2db      	uxtb	r3, r3
  } while(n);
   d5284:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5286:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d528a:	d9ef      	bls.n	d526c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d528c:	4621      	mov	r1, r4
   d528e:	f7ff ffb9 	bl	d5204 <_ZN5Print5writeEPKc>
}
   d5292:	b00b      	add	sp, #44	; 0x2c
   d5294:	bd30      	pop	{r4, r5, pc}

000d5296 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5296:	b510      	push	{r4, lr}
   d5298:	4604      	mov	r4, r0
   d529a:	f7ff fb27 	bl	d48ec <_ZNSt14_Function_baseD1Ev>
   d529e:	4620      	mov	r0, r4
   d52a0:	bd10      	pop	{r4, pc}
	...

000d52a4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d52a4:	4803      	ldr	r0, [pc, #12]	; (d52b4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d52a6:	4a04      	ldr	r2, [pc, #16]	; (d52b8 <_GLOBAL__sub_I_RGB+0x14>)
   d52a8:	4904      	ldr	r1, [pc, #16]	; (d52bc <_GLOBAL__sub_I_RGB+0x18>)
   d52aa:	2300      	movs	r3, #0
   d52ac:	6083      	str	r3, [r0, #8]
   d52ae:	f000 bbaf 	b.w	d5a10 <__aeabi_atexit>
   d52b2:	bf00      	nop
   d52b4:	2003e764 	.word	0x2003e764
   d52b8:	2003e704 	.word	0x2003e704
   d52bc:	000d5297 	.word	0x000d5297

000d52c0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d52c0:	b510      	push	{r4, lr}
   d52c2:	4604      	mov	r4, r0
   d52c4:	4608      	mov	r0, r1
{
    _spi = spi;
   d52c6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d52c8:	f7ff f900 	bl	d44cc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d52cc:	2300      	movs	r3, #0
   d52ce:	6063      	str	r3, [r4, #4]
}
   d52d0:	4620      	mov	r0, r4
   d52d2:	bd10      	pop	{r4, pc}

000d52d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d52d4:	b510      	push	{r4, lr}
   d52d6:	4604      	mov	r4, r0
{
	free(buffer);
   d52d8:	6800      	ldr	r0, [r0, #0]
   d52da:	f7ff fa4b 	bl	d4774 <free>
}
   d52de:	4620      	mov	r0, r4
   d52e0:	bd10      	pop	{r4, pc}

000d52e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d52e2:	b510      	push	{r4, lr}
   d52e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d52e6:	6800      	ldr	r0, [r0, #0]
   d52e8:	b108      	cbz	r0, d52ee <_ZN6String10invalidateEv+0xc>
   d52ea:	f7ff fa43 	bl	d4774 <free>
	buffer = NULL;
   d52ee:	2300      	movs	r3, #0
	capacity = len = 0;
   d52f0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d52f4:	6023      	str	r3, [r4, #0]
}
   d52f6:	bd10      	pop	{r4, pc}

000d52f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d52f8:	b538      	push	{r3, r4, r5, lr}
   d52fa:	4604      	mov	r4, r0
   d52fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d52fe:	6800      	ldr	r0, [r0, #0]
   d5300:	3101      	adds	r1, #1
   d5302:	f7ff fa3f 	bl	d4784 <realloc>
	if (newbuffer) {
   d5306:	b110      	cbz	r0, d530e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5308:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d530c:	2001      	movs	r0, #1
	}
	return 0;
}
   d530e:	bd38      	pop	{r3, r4, r5, pc}

000d5310 <_ZN6String7reserveEj>:
{
   d5310:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5312:	6803      	ldr	r3, [r0, #0]
{
   d5314:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5316:	b123      	cbz	r3, d5322 <_ZN6String7reserveEj+0x12>
   d5318:	6843      	ldr	r3, [r0, #4]
   d531a:	428b      	cmp	r3, r1
   d531c:	d301      	bcc.n	d5322 <_ZN6String7reserveEj+0x12>
   d531e:	2001      	movs	r0, #1
}
   d5320:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5322:	4620      	mov	r0, r4
   d5324:	f7ff ffe8 	bl	d52f8 <_ZN6String12changeBufferEj>
   d5328:	2800      	cmp	r0, #0
   d532a:	d0f9      	beq.n	d5320 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d532c:	68a3      	ldr	r3, [r4, #8]
   d532e:	2b00      	cmp	r3, #0
   d5330:	d1f5      	bne.n	d531e <_ZN6String7reserveEj+0xe>
   d5332:	6822      	ldr	r2, [r4, #0]
   d5334:	7013      	strb	r3, [r2, #0]
   d5336:	e7f2      	b.n	d531e <_ZN6String7reserveEj+0xe>

000d5338 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5338:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d533a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d533c:	4611      	mov	r1, r2
   d533e:	9201      	str	r2, [sp, #4]
{
   d5340:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5342:	f7ff ffe5 	bl	d5310 <_ZN6String7reserveEj>
   d5346:	9a01      	ldr	r2, [sp, #4]
   d5348:	b928      	cbnz	r0, d5356 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d534a:	4620      	mov	r0, r4
   d534c:	f7ff ffc9 	bl	d52e2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5350:	4620      	mov	r0, r4
   d5352:	b003      	add	sp, #12
   d5354:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5356:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5358:	4629      	mov	r1, r5
   d535a:	6820      	ldr	r0, [r4, #0]
   d535c:	f000 fb72 	bl	d5a44 <memcpy>
	buffer[len] = 0;
   d5360:	6822      	ldr	r2, [r4, #0]
   d5362:	68a3      	ldr	r3, [r4, #8]
   d5364:	2100      	movs	r1, #0
   d5366:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5368:	e7f2      	b.n	d5350 <_ZN6String4copyEPKcj+0x18>

000d536a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d536a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d536c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d536e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5372:	4604      	mov	r4, r0
	len = 0;
   d5374:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5376:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5378:	b141      	cbz	r1, d538c <_ZN6StringC1EPKc+0x22>
   d537a:	4608      	mov	r0, r1
   d537c:	9101      	str	r1, [sp, #4]
   d537e:	f000 fbc2 	bl	d5b06 <strlen>
   d5382:	9901      	ldr	r1, [sp, #4]
   d5384:	4602      	mov	r2, r0
   d5386:	4620      	mov	r0, r4
   d5388:	f7ff ffd6 	bl	d5338 <_ZN6String4copyEPKcj>
}
   d538c:	4620      	mov	r0, r4
   d538e:	b002      	add	sp, #8
   d5390:	bd10      	pop	{r4, pc}

000d5392 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5392:	4288      	cmp	r0, r1
{
   d5394:	b510      	push	{r4, lr}
   d5396:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5398:	d005      	beq.n	d53a6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d539a:	680b      	ldr	r3, [r1, #0]
   d539c:	b12b      	cbz	r3, d53aa <_ZN6StringaSERKS_+0x18>
   d539e:	688a      	ldr	r2, [r1, #8]
   d53a0:	4619      	mov	r1, r3
   d53a2:	f7ff ffc9 	bl	d5338 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d53a6:	4620      	mov	r0, r4
   d53a8:	bd10      	pop	{r4, pc}
	else invalidate();
   d53aa:	f7ff ff9a 	bl	d52e2 <_ZN6String10invalidateEv>
   d53ae:	e7fa      	b.n	d53a6 <_ZN6StringaSERKS_+0x14>

000d53b0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d53b0:	b510      	push	{r4, lr}
	buffer = NULL;
   d53b2:	2300      	movs	r3, #0
String::String(const String &value)
   d53b4:	4604      	mov	r4, r0
	capacity = 0;
   d53b6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d53ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   d53bc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d53be:	f7ff ffe8 	bl	d5392 <_ZN6StringaSERKS_>
}
   d53c2:	4620      	mov	r0, r4
   d53c4:	bd10      	pop	{r4, pc}

000d53c6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d53c6:	b513      	push	{r0, r1, r4, lr}
   d53c8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d53ca:	b159      	cbz	r1, d53e4 <_ZN6StringaSEPKc+0x1e>
   d53cc:	4608      	mov	r0, r1
   d53ce:	9101      	str	r1, [sp, #4]
   d53d0:	f000 fb99 	bl	d5b06 <strlen>
   d53d4:	9901      	ldr	r1, [sp, #4]
   d53d6:	4602      	mov	r2, r0
   d53d8:	4620      	mov	r0, r4
   d53da:	f7ff ffad 	bl	d5338 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d53de:	4620      	mov	r0, r4
   d53e0:	b002      	add	sp, #8
   d53e2:	bd10      	pop	{r4, pc}
	else invalidate();
   d53e4:	f7ff ff7d 	bl	d52e2 <_ZN6String10invalidateEv>
   d53e8:	e7f9      	b.n	d53de <_ZN6StringaSEPKc+0x18>

000d53ea <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   d53ea:	b510      	push	{r4, lr}
   d53ec:	4604      	mov	r4, r0
   d53ee:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d53f0:	2300      	movs	r3, #0
	capacity = 0;
   d53f2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d53f6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d53f8:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   d53fa:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d53fc:	a901      	add	r1, sp, #4
   d53fe:	f000 f9b5 	bl	d576c <utoa>
	*this = buf;
   d5402:	a901      	add	r1, sp, #4
   d5404:	4620      	mov	r0, r4
   d5406:	f7ff ffde 	bl	d53c6 <_ZN6StringaSEPKc>
}
   d540a:	4620      	mov	r0, r4
   d540c:	b00a      	add	sp, #40	; 0x28
   d540e:	bd10      	pop	{r4, pc}

000d5410 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5410:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5412:	6882      	ldr	r2, [r0, #8]
   d5414:	b93a      	cbnz	r2, d5426 <_ZNK6String6equalsEPKc+0x16>
   d5416:	b121      	cbz	r1, d5422 <_ZNK6String6equalsEPKc+0x12>
   d5418:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d541a:	fab0 f080 	clz	r0, r0
   d541e:	0940      	lsrs	r0, r0, #5
   d5420:	e000      	b.n	d5424 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5422:	2001      	movs	r0, #1
}
   d5424:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5426:	6800      	ldr	r0, [r0, #0]
   d5428:	b909      	cbnz	r1, d542e <_ZNK6String6equalsEPKc+0x1e>
   d542a:	7800      	ldrb	r0, [r0, #0]
   d542c:	e7f5      	b.n	d541a <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d542e:	f000 fb43 	bl	d5ab8 <strcmp>
   d5432:	e7f2      	b.n	d541a <_ZNK6String6equalsEPKc+0xa>

000d5434 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5434:	b510      	push	{r4, lr}
   d5436:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5438:	6800      	ldr	r0, [r0, #0]
   d543a:	b118      	cbz	r0, d5444 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d543c:	f7ff f99a 	bl	d4774 <free>
            wakeupSource_ = nullptr;
   d5440:	2300      	movs	r3, #0
   d5442:	6023      	str	r3, [r4, #0]
        }
    }
   d5444:	bd10      	pop	{r4, pc}

000d5446 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5446:	b510      	push	{r4, lr}
   d5448:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d544a:	f7ff fff3 	bl	d5434 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d544e:	4620      	mov	r0, r4
   d5450:	bd10      	pop	{r4, pc}
	...

000d5454 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5454:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5456:	4b09      	ldr	r3, [pc, #36]	; (d547c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5458:	4c09      	ldr	r4, [pc, #36]	; (d5480 <_GLOBAL__sub_I_System+0x2c>)
   d545a:	2202      	movs	r2, #2
   d545c:	2000      	movs	r0, #0
   d545e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5460:	4b08      	ldr	r3, [pc, #32]	; (d5484 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5462:	6020      	str	r0, [r4, #0]
   d5464:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5466:	71a0      	strb	r0, [r4, #6]
   d5468:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d546a:	f7ff f8bf 	bl	d45ec <set_system_mode>
SystemClass System;
   d546e:	4620      	mov	r0, r4
   d5470:	4a05      	ldr	r2, [pc, #20]	; (d5488 <_GLOBAL__sub_I_System+0x34>)
   d5472:	4906      	ldr	r1, [pc, #24]	; (d548c <_GLOBAL__sub_I_System+0x38>)
   d5474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5478:	f000 baca 	b.w	d5a10 <__aeabi_atexit>
   d547c:	2003e780 	.word	0x2003e780
   d5480:	2003e774 	.word	0x2003e774
   d5484:	ffff0000 	.word	0xffff0000
   d5488:	2003e704 	.word	0x2003e704
   d548c:	000d5447 	.word	0x000d5447

000d5490 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5490:	4b02      	ldr	r3, [pc, #8]	; (d549c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5492:	681a      	ldr	r2, [r3, #0]
   d5494:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5496:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5498:	4770      	bx	lr
   d549a:	bf00      	nop
   d549c:	2003e69c 	.word	0x2003e69c
   d54a0:	2003e784 	.word	0x2003e784

000d54a4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d54a4:	4770      	bx	lr

000d54a6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54a6:	7441      	strb	r1, [r0, #17]
}
   d54a8:	4770      	bx	lr

000d54aa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d54aa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d54ac:	7c00      	ldrb	r0, [r0, #16]
   d54ae:	f7ff f855 	bl	d455c <hal_usart_available_data_for_write>
}
   d54b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54b6:	bd08      	pop	{r3, pc}

000d54b8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d54b8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d54ba:	7c00      	ldrb	r0, [r0, #16]
   d54bc:	f7ff f826 	bl	d450c <hal_usart_available>
}
   d54c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54c4:	bd08      	pop	{r3, pc}

000d54c6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d54c6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d54c8:	7c00      	ldrb	r0, [r0, #16]
   d54ca:	f7ff f82f 	bl	d452c <hal_usart_peek>
}
   d54ce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d54d2:	bd08      	pop	{r3, pc}

000d54d4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d54d4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d54d6:	7c00      	ldrb	r0, [r0, #16]
   d54d8:	f7ff f820 	bl	d451c <hal_usart_read>
}
   d54dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d54e0:	bd08      	pop	{r3, pc}

000d54e2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d54e2:	7c00      	ldrb	r0, [r0, #16]
   d54e4:	f7ff b82a 	b.w	d453c <hal_usart_flush>

000d54e8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d54e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d54ea:	7c45      	ldrb	r5, [r0, #17]
{
   d54ec:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d54ee:	b12d      	cbz	r5, d54fc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d54f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d54f2:	b003      	add	sp, #12
   d54f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d54f8:	f7ff b800 	b.w	d44fc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d54fc:	7c00      	ldrb	r0, [r0, #16]
   d54fe:	9101      	str	r1, [sp, #4]
   d5500:	f7ff f82c 	bl	d455c <hal_usart_available_data_for_write>
   d5504:	2800      	cmp	r0, #0
   d5506:	9901      	ldr	r1, [sp, #4]
   d5508:	dcf2      	bgt.n	d54f0 <_ZN11USARTSerial5writeEh+0x8>
}
   d550a:	4628      	mov	r0, r5
   d550c:	b003      	add	sp, #12
   d550e:	bd30      	pop	{r4, r5, pc}

000d5510 <_ZN11USARTSerialD0Ev>:
   d5510:	b510      	push	{r4, lr}
   d5512:	2114      	movs	r1, #20
   d5514:	4604      	mov	r4, r0
   d5516:	f000 fa80 	bl	d5a1a <_ZdlPvj>
   d551a:	4620      	mov	r0, r4
   d551c:	bd10      	pop	{r4, pc}
	...

000d5520 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5520:	b510      	push	{r4, lr}
   d5522:	f04f 0c00 	mov.w	ip, #0
   d5526:	4604      	mov	r4, r0
   d5528:	4608      	mov	r0, r1
   d552a:	4611      	mov	r1, r2
   d552c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5530:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5534:	4a04      	ldr	r2, [pc, #16]	; (d5548 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5536:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5538:	2201      	movs	r2, #1
  _serial = serial;
   d553a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d553c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d553e:	461a      	mov	r2, r3
   d5540:	f7fe ffd4 	bl	d44ec <hal_usart_init>
}
   d5544:	4620      	mov	r0, r4
   d5546:	bd10      	pop	{r4, pc}
   d5548:	000d5cdc 	.word	0x000d5cdc

000d554c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d554c:	7c00      	ldrb	r0, [r0, #16]
   d554e:	2300      	movs	r3, #0
   d5550:	f7ff b80c 	b.w	d456c <hal_usart_begin_config>

000d5554 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d5554:	2200      	movs	r2, #0
   d5556:	f7ff bff9 	b.w	d554c <_ZN11USARTSerial5beginEmm>
	...

000d555c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d555c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d555e:	4c1b      	ldr	r4, [pc, #108]	; (d55cc <_Z22__fetch_global_Serial1v+0x70>)
   d5560:	6826      	ldr	r6, [r4, #0]
   d5562:	b94e      	cbnz	r6, d5578 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5564:	2084      	movs	r0, #132	; 0x84
   d5566:	f7fe fd94 	bl	d4092 <_Znwj>
   d556a:	4605      	mov	r5, r0
   d556c:	b118      	cbz	r0, d5576 <_Z22__fetch_global_Serial1v+0x1a>
   d556e:	2284      	movs	r2, #132	; 0x84
   d5570:	4631      	mov	r1, r6
   d5572:	f000 fa75 	bl	d5a60 <memset>
   d5576:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5578:	4d15      	ldr	r5, [pc, #84]	; (d55d0 <_Z22__fetch_global_Serial1v+0x74>)
   d557a:	682f      	ldr	r7, [r5, #0]
   d557c:	b94f      	cbnz	r7, d5592 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d557e:	2084      	movs	r0, #132	; 0x84
   d5580:	f7fe fd87 	bl	d4092 <_Znwj>
   d5584:	4606      	mov	r6, r0
   d5586:	b118      	cbz	r0, d5590 <_Z22__fetch_global_Serial1v+0x34>
   d5588:	2284      	movs	r2, #132	; 0x84
   d558a:	4639      	mov	r1, r7
   d558c:	f000 fa68 	bl	d5a60 <memset>
   d5590:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5592:	4e10      	ldr	r6, [pc, #64]	; (d55d4 <_Z22__fetch_global_Serial1v+0x78>)
   d5594:	7831      	ldrb	r1, [r6, #0]
   d5596:	f3bf 8f5b 	dmb	ish
   d559a:	f011 0101 	ands.w	r1, r1, #1
   d559e:	d112      	bne.n	d55c6 <_Z22__fetch_global_Serial1v+0x6a>
   d55a0:	4630      	mov	r0, r6
   d55a2:	9101      	str	r1, [sp, #4]
   d55a4:	f7fe fd7b 	bl	d409e <__cxa_guard_acquire>
   d55a8:	9901      	ldr	r1, [sp, #4]
   d55aa:	b160      	cbz	r0, d55c6 <_Z22__fetch_global_Serial1v+0x6a>
   d55ac:	6822      	ldr	r2, [r4, #0]
   d55ae:	682b      	ldr	r3, [r5, #0]
   d55b0:	4809      	ldr	r0, [pc, #36]	; (d55d8 <_Z22__fetch_global_Serial1v+0x7c>)
   d55b2:	f7ff ffb5 	bl	d5520 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d55b6:	4630      	mov	r0, r6
   d55b8:	f7fe fd76 	bl	d40a8 <__cxa_guard_release>
   d55bc:	4a07      	ldr	r2, [pc, #28]	; (d55dc <_Z22__fetch_global_Serial1v+0x80>)
   d55be:	4908      	ldr	r1, [pc, #32]	; (d55e0 <_Z22__fetch_global_Serial1v+0x84>)
   d55c0:	4805      	ldr	r0, [pc, #20]	; (d55d8 <_Z22__fetch_global_Serial1v+0x7c>)
   d55c2:	f000 fa25 	bl	d5a10 <__aeabi_atexit>
#endif
	return serial1;
}
   d55c6:	4804      	ldr	r0, [pc, #16]	; (d55d8 <_Z22__fetch_global_Serial1v+0x7c>)
   d55c8:	b003      	add	sp, #12
   d55ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55cc:	2003e78c 	.word	0x2003e78c
   d55d0:	2003e790 	.word	0x2003e790
   d55d4:	2003e788 	.word	0x2003e788
   d55d8:	2003e794 	.word	0x2003e794
   d55dc:	2003e704 	.word	0x2003e704
   d55e0:	000d54a5 	.word	0x000d54a5

000d55e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55e4:	7441      	strb	r1, [r0, #17]
}
   d55e6:	4770      	bx	lr

000d55e8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d55e8:	4770      	bx	lr

000d55ea <_ZN9USBSerial4readEv>:
{
   d55ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d55ec:	2100      	movs	r1, #0
   d55ee:	7c00      	ldrb	r0, [r0, #16]
   d55f0:	f7fe ffe4 	bl	d45bc <HAL_USB_USART_Receive_Data>
}
   d55f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55f8:	bd08      	pop	{r3, pc}

000d55fa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d55fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d55fc:	2101      	movs	r1, #1
   d55fe:	7c00      	ldrb	r0, [r0, #16]
   d5600:	f7fe ffdc 	bl	d45bc <HAL_USB_USART_Receive_Data>
}
   d5604:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5608:	bd08      	pop	{r3, pc}

000d560a <_ZN9USBSerial17availableForWriteEv>:
{
   d560a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d560c:	7c00      	ldrb	r0, [r0, #16]
   d560e:	f7fe ffcd 	bl	d45ac <HAL_USB_USART_Available_Data_For_Write>
}
   d5612:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5616:	bd08      	pop	{r3, pc}

000d5618 <_ZN9USBSerial9availableEv>:
{
   d5618:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d561a:	7c00      	ldrb	r0, [r0, #16]
   d561c:	f7fe ffbe 	bl	d459c <HAL_USB_USART_Available_Data>
}
   d5620:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5624:	bd08      	pop	{r3, pc}

000d5626 <_ZN9USBSerial5writeEh>:
{
   d5626:	b513      	push	{r0, r1, r4, lr}
   d5628:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d562a:	7c00      	ldrb	r0, [r0, #16]
{
   d562c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d562e:	f7fe ffbd 	bl	d45ac <HAL_USB_USART_Available_Data_For_Write>
   d5632:	2800      	cmp	r0, #0
   d5634:	9901      	ldr	r1, [sp, #4]
   d5636:	dc01      	bgt.n	d563c <_ZN9USBSerial5writeEh+0x16>
   d5638:	7c60      	ldrb	r0, [r4, #17]
   d563a:	b120      	cbz	r0, d5646 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d563c:	7c20      	ldrb	r0, [r4, #16]
   d563e:	f7fe ffc5 	bl	d45cc <HAL_USB_USART_Send_Data>
   d5642:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5646:	b002      	add	sp, #8
   d5648:	bd10      	pop	{r4, pc}

000d564a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d564a:	7c00      	ldrb	r0, [r0, #16]
   d564c:	f7fe bfc6 	b.w	d45dc <HAL_USB_USART_Flush_Data>

000d5650 <_ZN9USBSerialD0Ev>:
   d5650:	b510      	push	{r4, lr}
   d5652:	2114      	movs	r1, #20
   d5654:	4604      	mov	r4, r0
   d5656:	f000 f9e0 	bl	d5a1a <_ZdlPvj>
   d565a:	4620      	mov	r0, r4
   d565c:	bd10      	pop	{r4, pc}
	...

000d5660 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5660:	b510      	push	{r4, lr}
   d5662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5666:	4604      	mov	r4, r0
   d5668:	4608      	mov	r0, r1
   d566a:	2100      	movs	r1, #0
   d566c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5670:	4b04      	ldr	r3, [pc, #16]	; (d5684 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5672:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5674:	2301      	movs	r3, #1
  _serial = serial;
   d5676:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5678:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d567a:	4611      	mov	r1, r2
   d567c:	f7fe ff7e 	bl	d457c <HAL_USB_USART_Init>
}
   d5680:	4620      	mov	r0, r4
   d5682:	bd10      	pop	{r4, pc}
   d5684:	000d5d0c 	.word	0x000d5d0c

000d5688 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5688:	7c00      	ldrb	r0, [r0, #16]
   d568a:	2200      	movs	r2, #0
   d568c:	f7fe bf7e 	b.w	d458c <HAL_USB_USART_Begin>

000d5690 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5690:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5692:	2214      	movs	r2, #20
{
   d5694:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5696:	2100      	movs	r1, #0
   d5698:	f000 f9e2 	bl	d5a60 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d569c:	4620      	mov	r0, r4
   d569e:	bd10      	pop	{r4, pc}

000d56a0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d56a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56a2:	4c10      	ldr	r4, [pc, #64]	; (d56e4 <_Z16_fetch_usbserialv+0x44>)
{
   d56a4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d56a6:	a803      	add	r0, sp, #12
   d56a8:	f7ff fff2 	bl	d5690 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56ac:	7821      	ldrb	r1, [r4, #0]
   d56ae:	f3bf 8f5b 	dmb	ish
   d56b2:	f011 0101 	ands.w	r1, r1, #1
   d56b6:	d111      	bne.n	d56dc <_Z16_fetch_usbserialv+0x3c>
   d56b8:	4620      	mov	r0, r4
   d56ba:	9101      	str	r1, [sp, #4]
   d56bc:	f7fe fcef 	bl	d409e <__cxa_guard_acquire>
   d56c0:	9901      	ldr	r1, [sp, #4]
   d56c2:	b158      	cbz	r0, d56dc <_Z16_fetch_usbserialv+0x3c>
   d56c4:	aa03      	add	r2, sp, #12
   d56c6:	4808      	ldr	r0, [pc, #32]	; (d56e8 <_Z16_fetch_usbserialv+0x48>)
   d56c8:	f7ff ffca 	bl	d5660 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d56cc:	4620      	mov	r0, r4
   d56ce:	f7fe fceb 	bl	d40a8 <__cxa_guard_release>
   d56d2:	4a06      	ldr	r2, [pc, #24]	; (d56ec <_Z16_fetch_usbserialv+0x4c>)
   d56d4:	4906      	ldr	r1, [pc, #24]	; (d56f0 <_Z16_fetch_usbserialv+0x50>)
   d56d6:	4804      	ldr	r0, [pc, #16]	; (d56e8 <_Z16_fetch_usbserialv+0x48>)
   d56d8:	f000 f99a 	bl	d5a10 <__aeabi_atexit>
	return _usbserial;
}
   d56dc:	4802      	ldr	r0, [pc, #8]	; (d56e8 <_Z16_fetch_usbserialv+0x48>)
   d56de:	b008      	add	sp, #32
   d56e0:	bd10      	pop	{r4, pc}
   d56e2:	bf00      	nop
   d56e4:	2003e7a8 	.word	0x2003e7a8
   d56e8:	2003e7ac 	.word	0x2003e7ac
   d56ec:	2003e704 	.word	0x2003e704
   d56f0:	000d55e9 	.word	0x000d55e9

000d56f4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d56f4:	b510      	push	{r4, lr}
   d56f6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d56f8:	f000 fa05 	bl	d5b06 <strlen>
   d56fc:	3801      	subs	r0, #1
   d56fe:	1823      	adds	r3, r4, r0
   d5700:	4620      	mov	r0, r4
	while(i<j){
   d5702:	4283      	cmp	r3, r0
   d5704:	d906      	bls.n	d5714 <_Z11str_reversePc+0x20>
		c = *i;
   d5706:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5708:	7819      	ldrb	r1, [r3, #0]
   d570a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d570e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5712:	e7f6      	b.n	d5702 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5714:	bd10      	pop	{r4, pc}

000d5716 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5716:	b570      	push	{r4, r5, r6, lr}
   d5718:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d571a:	1e91      	subs	r1, r2, #2
   d571c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d571e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5720:	d822      	bhi.n	d5768 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5722:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5724:	b16d      	cbz	r5, d5742 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5726:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d572a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d572e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5730:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5732:	bf94      	ite	ls
   d5734:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5736:	3157      	addhi	r1, #87	; 0x57
   d5738:	b2c9      	uxtb	r1, r1
   d573a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d573e:	4635      	mov	r5, r6
	while(a){
   d5740:	e7f0      	b.n	d5724 <ultoa+0xe>
   d5742:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5744:	4423      	add	r3, r4
            *ptr++ = '0';
   d5746:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5748:	4293      	cmp	r3, r2
   d574a:	d902      	bls.n	d5752 <ultoa+0x3c>
            *ptr++ = '0';
   d574c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5750:	e7fa      	b.n	d5748 <ultoa+0x32>
   d5752:	1a1a      	subs	r2, r3, r0
   d5754:	4283      	cmp	r3, r0
   d5756:	bf38      	it	cc
   d5758:	2200      	movcc	r2, #0

	*ptr = '\0';
   d575a:	2300      	movs	r3, #0
   d575c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d575e:	4620      	mov	r0, r4
   d5760:	f7ff ffc8 	bl	d56f4 <_Z11str_reversePc>
	return buffer;
   d5764:	4620      	mov	r0, r4
}
   d5766:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5768:	2000      	movs	r0, #0
   d576a:	e7fc      	b.n	d5766 <ultoa+0x50>

000d576c <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d576c:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d576e:	2301      	movs	r3, #1
   d5770:	f7ff ffd1 	bl	d5716 <ultoa>
}
   d5774:	bd08      	pop	{r3, pc}
	...

000d5778 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5778:	4b01      	ldr	r3, [pc, #4]	; (d5780 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d577a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d577c:	4770      	bx	lr
   d577e:	bf00      	nop
   d5780:	2003e6a0 	.word	0x2003e6a0

000d5784 <serialEventRun>:
{
   d5784:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5786:	4b0b      	ldr	r3, [pc, #44]	; (d57b4 <serialEventRun+0x30>)
   d5788:	b143      	cbz	r3, d579c <serialEventRun+0x18>
   d578a:	f7ff ff89 	bl	d56a0 <_Z16_fetch_usbserialv>
   d578e:	6803      	ldr	r3, [r0, #0]
   d5790:	691b      	ldr	r3, [r3, #16]
   d5792:	4798      	blx	r3
   d5794:	2800      	cmp	r0, #0
   d5796:	dd01      	ble.n	d579c <serialEventRun+0x18>
        serialEvent();
   d5798:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d579c:	4b06      	ldr	r3, [pc, #24]	; (d57b8 <serialEventRun+0x34>)
   d579e:	b143      	cbz	r3, d57b2 <serialEventRun+0x2e>
   d57a0:	f7ff fedc 	bl	d555c <_Z22__fetch_global_Serial1v>
   d57a4:	6803      	ldr	r3, [r0, #0]
   d57a6:	691b      	ldr	r3, [r3, #16]
   d57a8:	4798      	blx	r3
   d57aa:	2800      	cmp	r0, #0
   d57ac:	dd01      	ble.n	d57b2 <serialEventRun+0x2e>
        serialEvent1();
   d57ae:	f3af 8000 	nop.w
}
   d57b2:	bd08      	pop	{r3, pc}
	...

000d57bc <_post_loop>:
{
   d57bc:	b508      	push	{r3, lr}
	serialEventRun();
   d57be:	f7ff ffe1 	bl	d5784 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d57c2:	f7fe fe03 	bl	d43cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d57c6:	4b01      	ldr	r3, [pc, #4]	; (d57cc <_post_loop+0x10>)
   d57c8:	6018      	str	r0, [r3, #0]
}
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	2003e7d4 	.word	0x2003e7d4

000d57d0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d57d0:	4802      	ldr	r0, [pc, #8]	; (d57dc <_Z33system_initialize_user_backup_ramv+0xc>)
   d57d2:	4a03      	ldr	r2, [pc, #12]	; (d57e0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d57d4:	4903      	ldr	r1, [pc, #12]	; (d57e4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d57d6:	1a12      	subs	r2, r2, r0
   d57d8:	f000 b934 	b.w	d5a44 <memcpy>
   d57dc:	2003f400 	.word	0x2003f400
   d57e0:	2003f404 	.word	0x2003f404
   d57e4:	000d5d60 	.word	0x000d5d60

000d57e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57ea:	2300      	movs	r3, #0
   d57ec:	9300      	str	r3, [sp, #0]
   d57ee:	461a      	mov	r2, r3
   d57f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57f4:	f7fe ff2c 	bl	d4650 <system_ctrl_set_result>
}
   d57f8:	b003      	add	sp, #12
   d57fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5800 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5800:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5802:	8843      	ldrh	r3, [r0, #2]
   d5804:	2b0a      	cmp	r3, #10
   d5806:	d008      	beq.n	d581a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5808:	2b50      	cmp	r3, #80	; 0x50
   d580a:	d10b      	bne.n	d5824 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d580c:	4b09      	ldr	r3, [pc, #36]	; (d5834 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d580e:	681b      	ldr	r3, [r3, #0]
   d5810:	b14b      	cbz	r3, d5826 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5812:	b003      	add	sp, #12
   d5814:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5818:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d581a:	f7ff ffe5 	bl	d57e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d581e:	b003      	add	sp, #12
   d5820:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5824:	2300      	movs	r3, #0
   d5826:	9300      	str	r3, [sp, #0]
   d5828:	461a      	mov	r2, r3
   d582a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d582e:	f7fe ff0f 	bl	d4650 <system_ctrl_set_result>
}
   d5832:	e7f4      	b.n	d581e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5834:	2003e7c4 	.word	0x2003e7c4

000d5838 <module_user_init_hook>:
{
   d5838:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d583a:	4c12      	ldr	r4, [pc, #72]	; (d5884 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d583c:	4812      	ldr	r0, [pc, #72]	; (d5888 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d583e:	4d13      	ldr	r5, [pc, #76]	; (d588c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5840:	2100      	movs	r1, #0
   d5842:	f7fe ffb7 	bl	d47b4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5846:	6823      	ldr	r3, [r4, #0]
   d5848:	42ab      	cmp	r3, r5
   d584a:	4b11      	ldr	r3, [pc, #68]	; (d5890 <module_user_init_hook+0x58>)
   d584c:	bf0c      	ite	eq
   d584e:	2201      	moveq	r2, #1
   d5850:	2200      	movne	r2, #0
   d5852:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5854:	d002      	beq.n	d585c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5856:	f7ff ffbb 	bl	d57d0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d585a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d585c:	f7fe fdae 	bl	d43bc <HAL_RNG_GetRandomNumber>
   d5860:	4604      	mov	r4, r0
    srand(seed);
   d5862:	f000 f905 	bl	d5a70 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5866:	4b0b      	ldr	r3, [pc, #44]	; (d5894 <module_user_init_hook+0x5c>)
   d5868:	b113      	cbz	r3, d5870 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d586a:	4620      	mov	r0, r4
   d586c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5870:	2100      	movs	r1, #0
   d5872:	4808      	ldr	r0, [pc, #32]	; (d5894 <module_user_init_hook+0x5c>)
   d5874:	f7fe ff0e 	bl	d4694 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d587c:	4806      	ldr	r0, [pc, #24]	; (d5898 <module_user_init_hook+0x60>)
   d587e:	2100      	movs	r1, #0
   d5880:	f7fe bedc 	b.w	d463c <system_ctrl_set_app_request_handler>
   d5884:	2003f400 	.word	0x2003f400
   d5888:	000d5779 	.word	0x000d5779
   d588c:	9a271c1e 	.word	0x9a271c1e
   d5890:	2003e7c0 	.word	0x2003e7c0
   d5894:	00000000 	.word	0x00000000
   d5898:	000d5801 	.word	0x000d5801

000d589c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d589c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d589e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d58a0:	d902      	bls.n	d58a8 <pinAvailable+0xc>
    return false;
   d58a2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d58a4:	b002      	add	sp, #8
   d58a6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d58a8:	f1a0 030b 	sub.w	r3, r0, #11
   d58ac:	2b02      	cmp	r3, #2
   d58ae:	d81a      	bhi.n	d58e6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d58b0:	4c17      	ldr	r4, [pc, #92]	; (d5910 <pinAvailable+0x74>)
   d58b2:	7821      	ldrb	r1, [r4, #0]
   d58b4:	f3bf 8f5b 	dmb	ish
   d58b8:	f011 0101 	ands.w	r1, r1, #1
   d58bc:	d10b      	bne.n	d58d6 <pinAvailable+0x3a>
   d58be:	4620      	mov	r0, r4
   d58c0:	9101      	str	r1, [sp, #4]
   d58c2:	f7fe fbec 	bl	d409e <__cxa_guard_acquire>
   d58c6:	9901      	ldr	r1, [sp, #4]
   d58c8:	b128      	cbz	r0, d58d6 <pinAvailable+0x3a>
   d58ca:	4812      	ldr	r0, [pc, #72]	; (d5914 <pinAvailable+0x78>)
   d58cc:	f7ff fcf8 	bl	d52c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d58d0:	4620      	mov	r0, r4
   d58d2:	f7fe fbe9 	bl	d40a8 <__cxa_guard_release>
   d58d6:	4b0f      	ldr	r3, [pc, #60]	; (d5914 <pinAvailable+0x78>)
   d58d8:	7818      	ldrb	r0, [r3, #0]
   d58da:	f7fe fdff 	bl	d44dc <hal_spi_is_enabled>
   d58de:	2800      	cmp	r0, #0
   d58e0:	d1df      	bne.n	d58a2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d58e2:	2001      	movs	r0, #1
   d58e4:	e7de      	b.n	d58a4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d58e6:	2801      	cmp	r0, #1
   d58e8:	d809      	bhi.n	d58fe <pinAvailable+0x62>
   d58ea:	f000 f869 	bl	d59c0 <_Z19__fetch_global_Wirev>
   d58ee:	2100      	movs	r1, #0
   d58f0:	7c00      	ldrb	r0, [r0, #16]
   d58f2:	f7fe fdc3 	bl	d447c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d58f6:	f080 0001 	eor.w	r0, r0, #1
   d58fa:	b2c0      	uxtb	r0, r0
   d58fc:	e7d2      	b.n	d58a4 <pinAvailable+0x8>
   d58fe:	3809      	subs	r0, #9
   d5900:	2801      	cmp	r0, #1
   d5902:	d8ee      	bhi.n	d58e2 <pinAvailable+0x46>
   d5904:	f7ff fe2a 	bl	d555c <_Z22__fetch_global_Serial1v>
   d5908:	7c00      	ldrb	r0, [r0, #16]
   d590a:	f7fe fe1f 	bl	d454c <hal_usart_is_enabled>
   d590e:	e7f2      	b.n	d58f6 <pinAvailable+0x5a>
   d5910:	2003e7c8 	.word	0x2003e7c8
   d5914:	2003e7cc 	.word	0x2003e7cc

000d5918 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5918:	2823      	cmp	r0, #35	; 0x23
{
   d591a:	b538      	push	{r3, r4, r5, lr}
   d591c:	4604      	mov	r4, r0
   d591e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5920:	d80a      	bhi.n	d5938 <pinMode+0x20>
   d5922:	29ff      	cmp	r1, #255	; 0xff
   d5924:	d008      	beq.n	d5938 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5926:	f7ff ffb9 	bl	d589c <pinAvailable>
   d592a:	b128      	cbz	r0, d5938 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d592c:	4629      	mov	r1, r5
   d592e:	4620      	mov	r0, r4
}
   d5930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5934:	f7fe bd5a 	b.w	d43ec <HAL_Pin_Mode>
}
   d5938:	bd38      	pop	{r3, r4, r5, pc}

000d593a <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d593a:	b510      	push	{r4, lr}
   d593c:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d593e:	f7fe fd5d 	bl	d43fc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d5942:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d5944:	b2db      	uxtb	r3, r3
   d5946:	2b01      	cmp	r3, #1
   d5948:	d908      	bls.n	d595c <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d594a:	4620      	mov	r0, r4
   d594c:	f7ff ffa6 	bl	d589c <pinAvailable>
   d5950:	b120      	cbz	r0, d595c <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5952:	4620      	mov	r0, r4
}
   d5954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d5958:	f7fe bd58 	b.w	d440c <HAL_GPIO_Read>
}
   d595c:	2000      	movs	r0, #0
   d595e:	bd10      	pop	{r4, pc}

000d5960 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5960:	280d      	cmp	r0, #13
{
   d5962:	b510      	push	{r4, lr}
   d5964:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5966:	bf9c      	itt	ls
   d5968:	340e      	addls	r4, #14
   d596a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d596c:	4620      	mov	r0, r4
   d596e:	f7ff ff95 	bl	d589c <pinAvailable>
   d5972:	b150      	cbz	r0, d598a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5974:	2103      	movs	r1, #3
   d5976:	4620      	mov	r0, r4
   d5978:	f7fe fd30 	bl	d43dc <HAL_Validate_Pin_Function>
   d597c:	2803      	cmp	r0, #3
   d597e:	d104      	bne.n	d598a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d5980:	4620      	mov	r0, r4
}
   d5982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d5986:	f7fe bd49 	b.w	d441c <hal_adc_read>
}
   d598a:	2000      	movs	r0, #0
   d598c:	bd10      	pop	{r4, pc}
	...

000d5990 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5990:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5992:	2300      	movs	r3, #0
   d5994:	2520      	movs	r5, #32
   d5996:	8043      	strh	r3, [r0, #2]
   d5998:	2314      	movs	r3, #20
{
   d599a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d599c:	8003      	strh	r3, [r0, #0]
   d599e:	6085      	str	r5, [r0, #8]
   d59a0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59a2:	4906      	ldr	r1, [pc, #24]	; (d59bc <_Z17acquireWireBufferv+0x2c>)
   d59a4:	4628      	mov	r0, r5
   d59a6:	f000 f83a 	bl	d5a1e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59aa:	4904      	ldr	r1, [pc, #16]	; (d59bc <_Z17acquireWireBufferv+0x2c>)
	};
   d59ac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d59ae:	4628      	mov	r0, r5
   d59b0:	f000 f835 	bl	d5a1e <_ZnajRKSt9nothrow_t>
	};
   d59b4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d59b6:	4620      	mov	r0, r4
   d59b8:	bd38      	pop	{r3, r4, r5, pc}
   d59ba:	bf00      	nop
   d59bc:	000d5d34 	.word	0x000d5d34

000d59c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d59c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d59c2:	4d0f      	ldr	r5, [pc, #60]	; (d5a00 <_Z19__fetch_global_Wirev+0x40>)
   d59c4:	7829      	ldrb	r1, [r5, #0]
   d59c6:	f3bf 8f5b 	dmb	ish
   d59ca:	f011 0401 	ands.w	r4, r1, #1
{
   d59ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d59d0:	d113      	bne.n	d59fa <_Z19__fetch_global_Wirev+0x3a>
   d59d2:	4628      	mov	r0, r5
   d59d4:	f7fe fb63 	bl	d409e <__cxa_guard_acquire>
   d59d8:	b178      	cbz	r0, d59fa <_Z19__fetch_global_Wirev+0x3a>
   d59da:	a801      	add	r0, sp, #4
   d59dc:	f7ff ffd8 	bl	d5990 <_Z17acquireWireBufferv>
   d59e0:	aa01      	add	r2, sp, #4
   d59e2:	4621      	mov	r1, r4
   d59e4:	4807      	ldr	r0, [pc, #28]	; (d5a04 <_Z19__fetch_global_Wirev+0x44>)
   d59e6:	f7ff fabb 	bl	d4f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d59ea:	4628      	mov	r0, r5
   d59ec:	f7fe fb5c 	bl	d40a8 <__cxa_guard_release>
   d59f0:	4a05      	ldr	r2, [pc, #20]	; (d5a08 <_Z19__fetch_global_Wirev+0x48>)
   d59f2:	4906      	ldr	r1, [pc, #24]	; (d5a0c <_Z19__fetch_global_Wirev+0x4c>)
   d59f4:	4803      	ldr	r0, [pc, #12]	; (d5a04 <_Z19__fetch_global_Wirev+0x44>)
   d59f6:	f000 f80b 	bl	d5a10 <__aeabi_atexit>
	return wire;
}
   d59fa:	4802      	ldr	r0, [pc, #8]	; (d5a04 <_Z19__fetch_global_Wirev+0x44>)
   d59fc:	b007      	add	sp, #28
   d59fe:	bd30      	pop	{r4, r5, pc}
   d5a00:	2003e7d8 	.word	0x2003e7d8
   d5a04:	2003e7dc 	.word	0x2003e7dc
   d5a08:	2003e704 	.word	0x2003e704
   d5a0c:	000d4f09 	.word	0x000d4f09

000d5a10 <__aeabi_atexit>:
   d5a10:	460b      	mov	r3, r1
   d5a12:	4601      	mov	r1, r0
   d5a14:	4618      	mov	r0, r3
   d5a16:	f000 b807 	b.w	d5a28 <__cxa_atexit>

000d5a1a <_ZdlPvj>:
   d5a1a:	f7fe bb3e 	b.w	d409a <_ZdlPv>

000d5a1e <_ZnajRKSt9nothrow_t>:
   d5a1e:	f7fe bb3a 	b.w	d4096 <_Znaj>

000d5a22 <_ZSt25__throw_bad_function_callv>:
   d5a22:	b508      	push	{r3, lr}
   d5a24:	f7fe feb6 	bl	d4794 <abort>

000d5a28 <__cxa_atexit>:
   d5a28:	b510      	push	{r4, lr}
   d5a2a:	4c05      	ldr	r4, [pc, #20]	; (d5a40 <__cxa_atexit+0x18>)
   d5a2c:	4613      	mov	r3, r2
   d5a2e:	b12c      	cbz	r4, d5a3c <__cxa_atexit+0x14>
   d5a30:	460a      	mov	r2, r1
   d5a32:	4601      	mov	r1, r0
   d5a34:	2002      	movs	r0, #2
   d5a36:	f3af 8000 	nop.w
   d5a3a:	bd10      	pop	{r4, pc}
   d5a3c:	4620      	mov	r0, r4
   d5a3e:	e7fc      	b.n	d5a3a <__cxa_atexit+0x12>
   d5a40:	00000000 	.word	0x00000000

000d5a44 <memcpy>:
   d5a44:	440a      	add	r2, r1
   d5a46:	4291      	cmp	r1, r2
   d5a48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d5a4c:	d100      	bne.n	d5a50 <memcpy+0xc>
   d5a4e:	4770      	bx	lr
   d5a50:	b510      	push	{r4, lr}
   d5a52:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5a56:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5a5a:	4291      	cmp	r1, r2
   d5a5c:	d1f9      	bne.n	d5a52 <memcpy+0xe>
   d5a5e:	bd10      	pop	{r4, pc}

000d5a60 <memset>:
   d5a60:	4402      	add	r2, r0
   d5a62:	4603      	mov	r3, r0
   d5a64:	4293      	cmp	r3, r2
   d5a66:	d100      	bne.n	d5a6a <memset+0xa>
   d5a68:	4770      	bx	lr
   d5a6a:	f803 1b01 	strb.w	r1, [r3], #1
   d5a6e:	e7f9      	b.n	d5a64 <memset+0x4>

000d5a70 <srand>:
   d5a70:	b538      	push	{r3, r4, r5, lr}
   d5a72:	4b0d      	ldr	r3, [pc, #52]	; (d5aa8 <srand+0x38>)
   d5a74:	681d      	ldr	r5, [r3, #0]
   d5a76:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5a78:	4604      	mov	r4, r0
   d5a7a:	b97b      	cbnz	r3, d5a9c <srand+0x2c>
   d5a7c:	2018      	movs	r0, #24
   d5a7e:	f7fe fe71 	bl	d4764 <malloc>
   d5a82:	4a0a      	ldr	r2, [pc, #40]	; (d5aac <srand+0x3c>)
   d5a84:	4b0a      	ldr	r3, [pc, #40]	; (d5ab0 <srand+0x40>)
   d5a86:	63a8      	str	r0, [r5, #56]	; 0x38
   d5a88:	e9c0 2300 	strd	r2, r3, [r0]
   d5a8c:	4b09      	ldr	r3, [pc, #36]	; (d5ab4 <srand+0x44>)
   d5a8e:	6083      	str	r3, [r0, #8]
   d5a90:	230b      	movs	r3, #11
   d5a92:	8183      	strh	r3, [r0, #12]
   d5a94:	2201      	movs	r2, #1
   d5a96:	2300      	movs	r3, #0
   d5a98:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5a9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5a9e:	2200      	movs	r2, #0
   d5aa0:	611c      	str	r4, [r3, #16]
   d5aa2:	615a      	str	r2, [r3, #20]
   d5aa4:	bd38      	pop	{r3, r4, r5, pc}
   d5aa6:	bf00      	nop
   d5aa8:	2003e6a0 	.word	0x2003e6a0
   d5aac:	abcd330e 	.word	0xabcd330e
   d5ab0:	e66d1234 	.word	0xe66d1234
   d5ab4:	0005deec 	.word	0x0005deec

000d5ab8 <strcmp>:
   d5ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5abc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5ac0:	2a01      	cmp	r2, #1
   d5ac2:	bf28      	it	cs
   d5ac4:	429a      	cmpcs	r2, r3
   d5ac6:	d0f7      	beq.n	d5ab8 <strcmp>
   d5ac8:	1ad0      	subs	r0, r2, r3
   d5aca:	4770      	bx	lr

000d5acc <strdup>:
   d5acc:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <strdup+0xc>)
   d5ace:	4601      	mov	r1, r0
   d5ad0:	6818      	ldr	r0, [r3, #0]
   d5ad2:	f000 b803 	b.w	d5adc <_strdup_r>
   d5ad6:	bf00      	nop
   d5ad8:	2003e6a0 	.word	0x2003e6a0

000d5adc <_strdup_r>:
   d5adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ade:	4604      	mov	r4, r0
   d5ae0:	4608      	mov	r0, r1
   d5ae2:	460d      	mov	r5, r1
   d5ae4:	f000 f80f 	bl	d5b06 <strlen>
   d5ae8:	1c42      	adds	r2, r0, #1
   d5aea:	4611      	mov	r1, r2
   d5aec:	4620      	mov	r0, r4
   d5aee:	9201      	str	r2, [sp, #4]
   d5af0:	f7fe fe58 	bl	d47a4 <_malloc_r>
   d5af4:	4604      	mov	r4, r0
   d5af6:	b118      	cbz	r0, d5b00 <_strdup_r+0x24>
   d5af8:	9a01      	ldr	r2, [sp, #4]
   d5afa:	4629      	mov	r1, r5
   d5afc:	f7ff ffa2 	bl	d5a44 <memcpy>
   d5b00:	4620      	mov	r0, r4
   d5b02:	b003      	add	sp, #12
   d5b04:	bd30      	pop	{r4, r5, pc}

000d5b06 <strlen>:
   d5b06:	4603      	mov	r3, r0
   d5b08:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5b0c:	2a00      	cmp	r2, #0
   d5b0e:	d1fb      	bne.n	d5b08 <strlen+0x2>
   d5b10:	1a18      	subs	r0, r3, r0
   d5b12:	3801      	subs	r0, #1
   d5b14:	4770      	bx	lr

000d5b16 <link_code_end>:
	...

000d5b18 <dynalib_user>:
   d5b18:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5b28:	0000 0000 6572 6f70 7472 4d00 746f 6f69     ....report.Motio
   d5b38:	206e 6564 6574 7463 6465 0021 004d 6f4d     n detected!.M.Mo
   d5b48:	6974 6e6f 7320 6f74 7070 6465 0021 6f4e     tion stopped!.No
   d5b58:	6d20 746f 6f69 206e 6f66 2072 3831 2030      motion for 180 
   d5b68:	6573 6f63 646e 2173 3000 5000 4100 626d     seconds!.0.P.Amb
   d5b78:	6569 746e 315f 4100 626d 6569 746e 325f     ient_1.Ambient_2
   d5b88:	5300 6f70 6c74 6769 7468 315f 5300 6f70     .Spotlight_1.Spo
   d5b98:	6c74 6769 7468 325f 4600 6e61 0000 0000     tlight_2.Fan....

000d5ba8 <_ZTVN5spark13CellularClassE>:
	...
   d5bb0:	4897 000d 488d 000d 4883 000d 4839 000d     .H...H...H..9H..
   d5bc0:	4877 000d 486b 000d 50b9 000d 50c1 000d     wH..kH...P...P..
   d5bd0:	485f 000d 4857 000d 484d 000d 4843 000d     _H..WH..MH..CH..
   d5be0:	50f1 000d                                   .P..

000d5be4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5bec:	48d1 000d 48d7 000d 4927 000d 48e5 000d     .H...H..'I...H..
   d5bfc:	48d3 000d                                   .H..

000d5c00 <_ZTVN5spark13EthernetClassE>:
	...
   d5c08:	4eeb 000d 4ee1 000d 4ed7 000d 4ecd 000d     .N...N...N...N..
   d5c18:	4ec1 000d 4eb5 000d 50b9 000d 50c1 000d     .N...N...P...P..
   d5c28:	4ea9 000d 4ea1 000d 4e97 000d 4e8d 000d     .N...N...N...N..
   d5c38:	50f1 000d                                   .P..

000d5c3c <_ZTV7TwoWire>:
	...
   d5c44:	4f09 000d 4f53 000d 4f2b 000d 4f0b 000d     .O..SO..+O...O..
   d5c54:	4f33 000d 4f3b 000d 4f43 000d 4f4b 000d     3O..;O..CO..KO..

000d5c64 <_ZTV9IPAddress>:
	...
   d5c6c:	4f95 000d 4f85 000d 4f87 000d 7061 0070     .O...O...O..app.

000d5c7c <_ZTVN5spark12NetworkClassE>:
	...
   d5c84:	5079 000d 5083 000d 508d 000d 5097 000d     yP...P...P...P..
   d5c94:	50a1 000d 50ad 000d 50b9 000d 50c1 000d     .P...P...P...P..
   d5ca4:	50c9 000d 50d5 000d 50dd 000d 50e7 000d     .P...P...P...P..
   d5cb4:	50f1 000d 5925 252d 2d6d 6425 2554 3a48     .P..%Y-%m-%dT%H:
   d5cc4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d5cd4 <_ZTV11USARTSerial>:
	...
   d5cdc:	54a5 000d 5511 000d 54e9 000d 51d9 000d     .T...U...T...Q..
   d5cec:	54b9 000d 54d5 000d 54c7 000d 54e3 000d     .T...T...T...T..
   d5cfc:	54a7 000d 54ab 000d                         .T...T..

000d5d04 <_ZTV9USBSerial>:
	...
   d5d0c:	55e9 000d 5651 000d 5627 000d 51d9 000d     .U..QV..'V...Q..
   d5d1c:	5619 000d 55eb 000d 55fb 000d 564b 000d     .V...U...U..KV..
   d5d2c:	560b 000d 55e5 000d                         .V...U..

000d5d34 <_ZSt7nothrow>:
	...

000d5d35 <link_const_variable_data_end>:
   d5d35:	00          	.byte	0x00
	...

000d5d38 <link_constructors_location>:
   d5d38:	000d438d 	.word	0x000d438d
   d5d3c:	000d4811 	.word	0x000d4811
   d5d40:	000d48a1 	.word	0x000d48a1
   d5d44:	000d4ef5 	.word	0x000d4ef5
   d5d48:	000d5069 	.word	0x000d5069
   d5d4c:	000d51c5 	.word	0x000d51c5
   d5d50:	000d52a5 	.word	0x000d52a5
   d5d54:	000d5455 	.word	0x000d5455
   d5d58:	000d5491 	.word	0x000d5491

000d5d5c <link_constructors_end>:
   d5d5c:	00000000 	.word	0x00000000
