
/Users/rauloaida/Documents/Firmware/ROOM_S_rev1/target/2.1.0/bsom/ROOM_S_rev1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001a84  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5aa0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e698  000d5aa4  0001e698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000ec  2003e704  2003e704  0002e704  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5b10  000d5b10  00025b10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5b38  000d5b38  00025b38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00118046  00000000  00000000  00025b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000135e7  00000000  00000000  0013db82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028977  00000000  00000000  00151169  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024b0  00000000  00000000  00179ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007248  00000000  00000000  0017bf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000336ff  00000000  00000000  001831d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003086d  00000000  00000000  001b68d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108699  00000000  00000000  001e7144  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000635c  00000000  00000000  002ef7e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fbaf 	bl	d5790 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fbb7 	bl	d57ac <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e698 	.word	0x2003e698
   d4048:	000d5aa4 	.word	0x000d5aa4
   d404c:	2003e704 	.word	0x2003e704
   d4050:	2003e704 	.word	0x2003e704
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 faa9 	bl	d55b4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5a74 	.word	0x000d5a74
   d407c:	000d5a98 	.word	0x000d5a98

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b82a 	b.w	d40d8 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f85b 	bl	d4140 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 ba53 	b.w	d5538 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 ba97 	b.w	d45c4 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 ba95 	b.w	d45c4 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 ba9b 	b.w	d45d4 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z10brewCoffee6String>:
    setDelayExpired = true;
  }
}

int brewCoffee(String command)
{
   d40b0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b2:	4907      	ldr	r1, [pc, #28]	; (d40d0 <_Z10brewCoffee6String+0x20>)
   d40b4:	f001 f8b5 	bl	d5222 <_ZNK6String6equalsEPKc>
  // look for the matching argument "coffee" <-- max of 64 characters long
  if(command == "coffee")
   d40b8:	b130      	cbz	r0, d40c8 <_Z10brewCoffee6String+0x18>
  {
    // some example functions you might have
    Serial.println("---the function worked!---");
   d40ba:	f001 f9f1 	bl	d54a0 <_Z16_fetch_usbserialv>
   d40be:	4905      	ldr	r1, [pc, #20]	; (d40d4 <_Z10brewCoffee6String+0x24>)
   d40c0:	f000 ffef 	bl	d50a2 <_ZN5Print7printlnEPKc>
   d40c4:	2001      	movs	r0, #1
    return 1;
  }
  else return -1;
   d40c6:	bd08      	pop	{r3, pc}
  else return -1;
   d40c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d40cc:	e7fb      	b.n	d40c6 <_Z10brewCoffee6String+0x16>
   d40ce:	bf00      	nop
   d40d0:	000d5878 	.word	0x000d5878
   d40d4:	000d587f 	.word	0x000d587f

000d40d8 <setup>:
void setup() {
   d40d8:	b508      	push	{r3, lr}
  Serial.begin(9600);  
   d40da:	f001 f9e1 	bl	d54a0 <_Z16_fetch_usbserialv>
   d40de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40e2:	f001 f9d1 	bl	d5488 <_ZN9USBSerial5beginEl>
  pinMode(PIN_TO_SENSOR, INPUT_PULLUP); // set arduino pin to input mode to read value from OUTPUT pin of sensor
   d40e6:	2102      	movs	r1, #2
   d40e8:	201c      	movs	r0, #28
   d40ea:	f001 fad3 	bl	d5694 <pinMode>
  setDelayExpired = true;
   d40ee:	4b05      	ldr	r3, [pc, #20]	; (d4104 <setup+0x2c>)
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d40f0:	4905      	ldr	r1, [pc, #20]	; (d4108 <setup+0x30>)
   d40f2:	4806      	ldr	r0, [pc, #24]	; (d410c <setup+0x34>)
   d40f4:	2201      	movs	r2, #1
   d40f6:	701a      	strb	r2, [r3, #0]
}
   d40f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d40fc:	4a04      	ldr	r2, [pc, #16]	; (d4110 <setup+0x38>)
   d40fe:	f000 bb79 	b.w	d47f4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4102:	bf00      	nop
   d4104:	2003e718 	.word	0x2003e718
   d4108:	000d40b1 	.word	0x000d40b1
   d410c:	000d47c9 	.word	0x000d47c9
   d4110:	000d589a 	.word	0x000d589a

000d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4114:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4116:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4118:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d411a:	b17c      	cbz	r4, d413c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d411c:	6863      	ldr	r3, [r4, #4]
   d411e:	3b01      	subs	r3, #1
   d4120:	6063      	str	r3, [r4, #4]
   d4122:	b95b      	cbnz	r3, d413c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4124:	6823      	ldr	r3, [r4, #0]
   d4126:	4620      	mov	r0, r4
   d4128:	689b      	ldr	r3, [r3, #8]
   d412a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d412c:	68a3      	ldr	r3, [r4, #8]
   d412e:	3b01      	subs	r3, #1
   d4130:	60a3      	str	r3, [r4, #8]
   d4132:	b91b      	cbnz	r3, d413c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4134:	6823      	ldr	r3, [r4, #0]
   d4136:	4620      	mov	r0, r4
   d4138:	68db      	ldr	r3, [r3, #12]
   d413a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d413c:	4628      	mov	r0, r5
   d413e:	bd38      	pop	{r3, r4, r5, pc}

000d4140 <loop>:
void loop() {
   d4140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  pinStatePrevious = pinStateCurrent; // store state
   d4142:	4e2d      	ldr	r6, [pc, #180]	; (d41f8 <loop+0xb8>)
   d4144:	4c2d      	ldr	r4, [pc, #180]	; (d41fc <loop+0xbc>)
   d4146:	6833      	ldr	r3, [r6, #0]
   d4148:	6023      	str	r3, [r4, #0]
  pinStateCurrent =! digitalRead(PIN_TO_SENSOR);   // read new state
   d414a:	201c      	movs	r0, #28
   d414c:	f001 fab3 	bl	d56b6 <digitalRead>
   d4150:	4605      	mov	r5, r0
   d4152:	fab0 f080 	clz	r0, r0
   d4156:	0940      	lsrs	r0, r0, #5
   d4158:	6030      	str	r0, [r6, #0]
  if (pinStatePrevious == LOW && pinStateCurrent == HIGH && setDelayExpired == true) {   // pin state change: LOW -> HIGH
   d415a:	6826      	ldr	r6, [r4, #0]
   d415c:	4c28      	ldr	r4, [pc, #160]	; (d4200 <loop+0xc0>)
   d415e:	b9ce      	cbnz	r6, d4194 <loop+0x54>
   d4160:	bb35      	cbnz	r5, d41b0 <loop+0x70>
   d4162:	4e28      	ldr	r6, [pc, #160]	; (d4204 <loop+0xc4>)
   d4164:	7833      	ldrb	r3, [r6, #0]
   d4166:	b31b      	cbz	r3, d41b0 <loop+0x70>
    Serial.println("Motion detected!");
   d4168:	f001 f99a 	bl	d54a0 <_Z16_fetch_usbserialv>
   d416c:	4926      	ldr	r1, [pc, #152]	; (d4208 <loop+0xc8>)
   d416e:	f000 ff98 	bl	d50a2 <_ZN5Print7printlnEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   d4172:	4b26      	ldr	r3, [pc, #152]	; (d420c <loop+0xcc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4174:	4a26      	ldr	r2, [pc, #152]	; (d4210 <loop+0xd0>)
   d4176:	781b      	ldrb	r3, [r3, #0]
   d4178:	4926      	ldr	r1, [pc, #152]	; (d4214 <loop+0xd4>)
   d417a:	f88d 3000 	strb.w	r3, [sp]
   d417e:	a802      	add	r0, sp, #8
   d4180:	233c      	movs	r3, #60	; 0x3c
   d4182:	f000 fc3b 	bl	d49fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4186:	a803      	add	r0, sp, #12
   d4188:	f7ff ffc4 	bl	d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delayEnabled = false; // disable delay
   d418c:	7025      	strb	r5, [r4, #0]
    setDelayExpired = false;
   d418e:	7035      	strb	r5, [r6, #0]
}
   d4190:	b004      	add	sp, #16
   d4192:	bd70      	pop	{r4, r5, r6, pc}
  else if (pinStatePrevious == HIGH && pinStateCurrent == LOW) {   // pin state change: HIGH -> LOW
   d4194:	2e01      	cmp	r6, #1
   d4196:	d10b      	bne.n	d41b0 <loop+0x70>
   d4198:	b155      	cbz	r5, d41b0 <loop+0x70>
    Serial.println("Motion stopped!");
   d419a:	f001 f981 	bl	d54a0 <_Z16_fetch_usbserialv>
   d419e:	491e      	ldr	r1, [pc, #120]	; (d4218 <loop+0xd8>)
   d41a0:	f000 ff7f 	bl	d50a2 <_ZN5Print7printlnEPKc>
    delayEnabled = true; // enable delay
   d41a4:	7026      	strb	r6, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41a6:	f000 f861 	bl	d426c <HAL_Timer_Get_Milli_Seconds>
    delayStartTime = millis(); // set start time
   d41aa:	4b1c      	ldr	r3, [pc, #112]	; (d421c <loop+0xdc>)
   d41ac:	6018      	str	r0, [r3, #0]
   d41ae:	e7ef      	b.n	d4190 <loop+0x50>
   else if (delayEnabled == true && (millis() - delayStartTime) >= DELAY_TIME_MS) {
   d41b0:	7823      	ldrb	r3, [r4, #0]
   d41b2:	2b00      	cmp	r3, #0
   d41b4:	d0ec      	beq.n	d4190 <loop+0x50>
   d41b6:	f000 f859 	bl	d426c <HAL_Timer_Get_Milli_Seconds>
   d41ba:	4b18      	ldr	r3, [pc, #96]	; (d421c <loop+0xdc>)
   d41bc:	681b      	ldr	r3, [r3, #0]
   d41be:	1ac0      	subs	r0, r0, r3
   d41c0:	4b17      	ldr	r3, [pc, #92]	; (d4220 <loop+0xe0>)
   d41c2:	4298      	cmp	r0, r3
   d41c4:	d9e4      	bls.n	d4190 <loop+0x50>
    Serial.println("No motion for 180 seconds!");
   d41c6:	f001 f96b 	bl	d54a0 <_Z16_fetch_usbserialv>
   d41ca:	4916      	ldr	r1, [pc, #88]	; (d4224 <loop+0xe4>)
   d41cc:	f000 ff69 	bl	d50a2 <_ZN5Print7printlnEPKc>
   d41d0:	4b0e      	ldr	r3, [pc, #56]	; (d420c <loop+0xcc>)
   d41d2:	4a15      	ldr	r2, [pc, #84]	; (d4228 <loop+0xe8>)
   d41d4:	781b      	ldrb	r3, [r3, #0]
   d41d6:	490f      	ldr	r1, [pc, #60]	; (d4214 <loop+0xd4>)
   d41d8:	f88d 3000 	strb.w	r3, [sp]
   d41dc:	a802      	add	r0, sp, #8
   d41de:	233c      	movs	r3, #60	; 0x3c
   d41e0:	f000 fc0c 	bl	d49fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d41e4:	a803      	add	r0, sp, #12
   d41e6:	f7ff ff95 	bl	d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    delayEnabled = false; // disable delay
   d41ea:	2300      	movs	r3, #0
   d41ec:	7023      	strb	r3, [r4, #0]
    setDelayExpired = true;
   d41ee:	4b05      	ldr	r3, [pc, #20]	; (d4204 <loop+0xc4>)
   d41f0:	2201      	movs	r2, #1
   d41f2:	701a      	strb	r2, [r3, #0]
}
   d41f4:	e7cc      	b.n	d4190 <loop+0x50>
   d41f6:	bf00      	nop
   d41f8:	2003e710 	.word	0x2003e710
   d41fc:	2003e714 	.word	0x2003e714
   d4200:	2003e698 	.word	0x2003e698
   d4204:	2003e718 	.word	0x2003e718
   d4208:	000d589f 	.word	0x000d589f
   d420c:	2003e708 	.word	0x2003e708
   d4210:	000d58b0 	.word	0x000d58b0
   d4214:	000d58b2 	.word	0x000d58b2
   d4218:	000d58b4 	.word	0x000d58b4
   d421c:	2003e70c 	.word	0x2003e70c
   d4220:	0002bf1f 	.word	0x0002bf1f
   d4224:	000d58c4 	.word	0x000d58c4
   d4228:	000d58df 	.word	0x000d58df

000d422c <_GLOBAL__sub_I_pinStateCurrent>:
        val_(val) {
   d422c:	4b02      	ldr	r3, [pc, #8]	; (d4238 <_GLOBAL__sub_I_pinStateCurrent+0xc>)
   d422e:	2001      	movs	r0, #1
   d4230:	7018      	strb	r0, [r3, #0]
SYSTEM_THREAD(ENABLED); //uncomment to run all FW at startup without waiting for LTE connection to be estabished
   d4232:	2100      	movs	r1, #0
   d4234:	f000 b91a 	b.w	d446c <system_thread_set_state>
   d4238:	2003e708 	.word	0x2003e708

000d423c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <os_mutex_recursive_create+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	00030248 	.word	0x00030248

000d424c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <os_mutex_recursive_destroy+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	00030248 	.word	0x00030248

000d425c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <HAL_RNG_GetRandomNumber+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	685b      	ldr	r3, [r3, #4]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	00030218 	.word	0x00030218

000d426c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	695b      	ldr	r3, [r3, #20]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030218 	.word	0x00030218

000d427c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <HAL_Pin_Mode+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	689b      	ldr	r3, [r3, #8]
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	0003022c 	.word	0x0003022c

000d428c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <HAL_Get_Pin_Mode+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	68db      	ldr	r3, [r3, #12]
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	0003022c 	.word	0x0003022c

000d429c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <HAL_GPIO_Read+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	695b      	ldr	r3, [r3, #20]
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	0003022c 	.word	0x0003022c

000d42ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <hal_i2c_write+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	6a1b      	ldr	r3, [r3, #32]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030228 	.word	0x00030228

000d42bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <hal_i2c_available+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030228 	.word	0x00030228

000d42cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <hal_i2c_read+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	00030228 	.word	0x00030228

000d42dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <hal_i2c_peek+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	00030228 	.word	0x00030228

000d42ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <hal_i2c_flush+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	00030228 	.word	0x00030228

000d42fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <hal_i2c_is_enabled+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	00030228 	.word	0x00030228

000d430c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <hal_i2c_init+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	00030228 	.word	0x00030228

000d431c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <inet_inet_ntop+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	695b      	ldr	r3, [r3, #20]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	00030264 	.word	0x00030264

000d432c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <netdb_freeaddrinfo+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	689b      	ldr	r3, [r3, #8]
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	00030268 	.word	0x00030268

000d433c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <netdb_getaddrinfo+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	68db      	ldr	r3, [r3, #12]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030268 	.word	0x00030268

000d434c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <hal_spi_init+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	69db      	ldr	r3, [r3, #28]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	00030230 	.word	0x00030230

000d435c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <hal_spi_is_enabled+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6a1b      	ldr	r3, [r3, #32]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030230 	.word	0x00030230

000d436c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <hal_usart_init+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	681b      	ldr	r3, [r3, #0]
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	0003023c 	.word	0x0003023c

000d437c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <hal_usart_write+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	68db      	ldr	r3, [r3, #12]
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	0003023c 	.word	0x0003023c

000d438c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <hal_usart_available+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	691b      	ldr	r3, [r3, #16]
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	0003023c 	.word	0x0003023c

000d439c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <hal_usart_read+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	695b      	ldr	r3, [r3, #20]
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	0003023c 	.word	0x0003023c

000d43ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <hal_usart_peek+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	699b      	ldr	r3, [r3, #24]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	0003023c 	.word	0x0003023c

000d43bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <hal_usart_flush+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	69db      	ldr	r3, [r3, #28]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	0003023c 	.word	0x0003023c

000d43cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <hal_usart_is_enabled+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	6a1b      	ldr	r3, [r3, #32]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	0003023c 	.word	0x0003023c

000d43dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <hal_usart_available_data_for_write+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	0003023c 	.word	0x0003023c

000d43ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <HAL_USB_USART_Init+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	681b      	ldr	r3, [r3, #0]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	0003024c 	.word	0x0003024c

000d43fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <HAL_USB_USART_Begin+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	685b      	ldr	r3, [r3, #4]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	0003024c 	.word	0x0003024c

000d440c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <HAL_USB_USART_Available_Data+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	691b      	ldr	r3, [r3, #16]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	0003024c 	.word	0x0003024c

000d441c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	695b      	ldr	r3, [r3, #20]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	0003024c 	.word	0x0003024c

000d442c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <HAL_USB_USART_Receive_Data+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	699b      	ldr	r3, [r3, #24]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	0003024c 	.word	0x0003024c

000d443c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <HAL_USB_USART_Send_Data+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	69db      	ldr	r3, [r3, #28]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	0003024c 	.word	0x0003024c

000d444c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <HAL_USB_USART_Flush_Data+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	6a1b      	ldr	r3, [r3, #32]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	0003024c 	.word	0x0003024c

000d445c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <set_system_mode+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	685b      	ldr	r3, [r3, #4]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030220 	.word	0x00030220

000d446c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b02      	ldr	r3, [pc, #8]	; (d4478 <system_thread_set_state+0xc>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4474:	9301      	str	r3, [sp, #4]
   d4476:	bd08      	pop	{r3, pc}
   d4478:	00030220 	.word	0x00030220

000d447c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b02      	ldr	r3, [pc, #8]	; (d4488 <application_thread_current+0xc>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4484:	9301      	str	r3, [sp, #4]
   d4486:	bd08      	pop	{r3, pc}
   d4488:	00030220 	.word	0x00030220

000d448c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d448c:	b508      	push	{r3, lr}
   d448e:	4b02      	ldr	r3, [pc, #8]	; (d4498 <application_thread_invoke+0xc>)
   d4490:	681b      	ldr	r3, [r3, #0]
   d4492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4494:	9301      	str	r3, [sp, #4]
   d4496:	bd08      	pop	{r3, pc}
   d4498:	00030220 	.word	0x00030220

000d449c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d449c:	b508      	push	{r3, lr}
   d449e:	4b03      	ldr	r3, [pc, #12]	; (d44ac <system_ctrl_set_app_request_handler+0x10>)
   d44a0:	681b      	ldr	r3, [r3, #0]
   d44a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d44a6:	9301      	str	r3, [sp, #4]
   d44a8:	bd08      	pop	{r3, pc}
   d44aa:	0000      	.short	0x0000
   d44ac:	00030220 	.word	0x00030220

000d44b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b03      	ldr	r3, [pc, #12]	; (d44c0 <system_ctrl_set_result+0x10>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d44ba:	9301      	str	r3, [sp, #4]
   d44bc:	bd08      	pop	{r3, pc}
   d44be:	0000      	.short	0x0000
   d44c0:	00030220 	.word	0x00030220

000d44c4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <spark_function+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	685b      	ldr	r3, [r3, #4]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030244 	.word	0x00030244

000d44d4 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <spark_cloud_flag_connected+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	695b      	ldr	r3, [r3, #20]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030244 	.word	0x00030244

000d44e4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <spark_send_event+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6a1b      	ldr	r3, [r3, #32]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030244 	.word	0x00030244

000d44f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <spark_set_random_seed_from_cloud_handler+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030244 	.word	0x00030244

000d4504 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <network_connect+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	685b      	ldr	r3, [r3, #4]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030240 	.word	0x00030240

000d4514 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <network_connecting+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	689b      	ldr	r3, [r3, #8]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030240 	.word	0x00030240

000d4524 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <network_disconnect+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	68db      	ldr	r3, [r3, #12]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030240 	.word	0x00030240

000d4534 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <network_ready+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	691b      	ldr	r3, [r3, #16]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030240 	.word	0x00030240

000d4544 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <network_on+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	695b      	ldr	r3, [r3, #20]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030240 	.word	0x00030240

000d4554 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <network_off+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	699b      	ldr	r3, [r3, #24]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030240 	.word	0x00030240

000d4564 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <network_listen+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	69db      	ldr	r3, [r3, #28]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030240 	.word	0x00030240

000d4574 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <network_listening+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6a1b      	ldr	r3, [r3, #32]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030240 	.word	0x00030240

000d4584 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <network_set_listen_timeout+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030240 	.word	0x00030240

000d4594 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <network_get_listen_timeout+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030240 	.word	0x00030240

000d45a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <network_is_on+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030240 	.word	0x00030240

000d45b4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <network_is_off+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030240 	.word	0x00030240

000d45c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <malloc+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	681b      	ldr	r3, [r3, #0]
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	0003021c 	.word	0x0003021c

000d45d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <free+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	685b      	ldr	r3, [r3, #4]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	0003021c 	.word	0x0003021c

000d45e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <realloc+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	689b      	ldr	r3, [r3, #8]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	0003021c 	.word	0x0003021c

000d45f4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <abort+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	0003021c 	.word	0x0003021c

000d4604 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <_malloc_r+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	0003021c 	.word	0x0003021c

000d4614 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <newlib_impure_ptr_callback+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	0003021c 	.word	0x0003021c

000d4624 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4624:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4626:	6883      	ldr	r3, [r0, #8]
   d4628:	4604      	mov	r4, r0
   d462a:	b90b      	cbnz	r3, d4630 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d462c:	f001 f89f 	bl	d576e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4630:	68c3      	ldr	r3, [r0, #12]
   d4632:	4798      	blx	r3
      if (_M_manager)
   d4634:	68a3      	ldr	r3, [r4, #8]
   d4636:	b11b      	cbz	r3, d4640 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4638:	2203      	movs	r2, #3
   d463a:	4621      	mov	r1, r4
   d463c:	4620      	mov	r0, r4
   d463e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4640:	4620      	mov	r0, r4
   d4642:	2110      	movs	r1, #16
}
   d4644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d4648:	f001 b88d 	b.w	d5766 <_ZdlPvj>

000d464c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d464c:	b510      	push	{r4, lr}
   d464e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4650:	6800      	ldr	r0, [r0, #0]
   d4652:	b108      	cbz	r0, d4658 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4654:	f7ff fdfa 	bl	d424c <os_mutex_recursive_destroy>
    }
   d4658:	4620      	mov	r0, r4
   d465a:	bd10      	pop	{r4, pc}

000d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d465c:	680b      	ldr	r3, [r1, #0]
   d465e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4660:	b113      	cbz	r3, d4668 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4662:	685a      	ldr	r2, [r3, #4]
   d4664:	3201      	adds	r2, #1
   d4666:	605a      	str	r2, [r3, #4]
      }
   d4668:	4770      	bx	lr
	...

000d466c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d466c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d466e:	4c06      	ldr	r4, [pc, #24]	; (d4688 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4670:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4672:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4674:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4676:	f7ff fde1 	bl	d423c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d467a:	4620      	mov	r0, r4
   d467c:	4a03      	ldr	r2, [pc, #12]	; (d468c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d467e:	4904      	ldr	r1, [pc, #16]	; (d4690 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4684:	f001 b86a 	b.w	d575c <__aeabi_atexit>
   d4688:	2003e71c 	.word	0x2003e71c
   d468c:	2003e704 	.word	0x2003e704
   d4690:	000d464d 	.word	0x000d464d

000d4694 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4694:	2200      	movs	r2, #0
   d4696:	6840      	ldr	r0, [r0, #4]
   d4698:	4611      	mov	r1, r2
   d469a:	f7ff bf4b 	b.w	d4534 <network_ready>

000d469e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d469e:	2200      	movs	r2, #0
   d46a0:	6840      	ldr	r0, [r0, #4]
   d46a2:	4611      	mov	r1, r2
   d46a4:	f7ff bf66 	b.w	d4574 <network_listening>

000d46a8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d46a8:	2200      	movs	r2, #0
   d46aa:	6840      	ldr	r0, [r0, #4]
   d46ac:	4611      	mov	r1, r2
   d46ae:	f7ff bf71 	b.w	d4594 <network_get_listen_timeout>

000d46b2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d46b2:	6840      	ldr	r0, [r0, #4]
   d46b4:	2200      	movs	r2, #0
   d46b6:	f7ff bf65 	b.w	d4584 <network_set_listen_timeout>

000d46ba <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d46ba:	6840      	ldr	r0, [r0, #4]
   d46bc:	2200      	movs	r2, #0
   d46be:	f081 0101 	eor.w	r1, r1, #1
   d46c2:	f7ff bf4f 	b.w	d4564 <network_listen>

000d46c6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d46c6:	2300      	movs	r3, #0
   d46c8:	6840      	ldr	r0, [r0, #4]
   d46ca:	461a      	mov	r2, r3
   d46cc:	4619      	mov	r1, r3
   d46ce:	f7ff bf41 	b.w	d4554 <network_off>

000d46d2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d46d2:	2300      	movs	r3, #0
   d46d4:	6840      	ldr	r0, [r0, #4]
   d46d6:	461a      	mov	r2, r3
   d46d8:	4619      	mov	r1, r3
   d46da:	f7ff bf33 	b.w	d4544 <network_on>

000d46de <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d46de:	2200      	movs	r2, #0
   d46e0:	6840      	ldr	r0, [r0, #4]
   d46e2:	4611      	mov	r1, r2
   d46e4:	f7ff bf16 	b.w	d4514 <network_connecting>

000d46e8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46e8:	6840      	ldr	r0, [r0, #4]
   d46ea:	2200      	movs	r2, #0
   d46ec:	2102      	movs	r1, #2
   d46ee:	f7ff bf19 	b.w	d4524 <network_disconnect>

000d46f2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d46f2:	2300      	movs	r3, #0
   d46f4:	6840      	ldr	r0, [r0, #4]
   d46f6:	461a      	mov	r2, r3
   d46f8:	f7ff bf04 	b.w	d4504 <network_connect>

000d46fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d46fc:	4b08      	ldr	r3, [pc, #32]	; (d4720 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d46fe:	b510      	push	{r4, lr}
   d4700:	2428      	movs	r4, #40	; 0x28
   d4702:	4622      	mov	r2, r4
   d4704:	4618      	mov	r0, r3
   d4706:	2100      	movs	r1, #0
   d4708:	f001 f850 	bl	d57ac <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d470c:	4b05      	ldr	r3, [pc, #20]	; (d4724 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d470e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d4710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4714:	6042      	str	r2, [r0, #4]
   d4716:	2204      	movs	r2, #4
   d4718:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d471a:	4a03      	ldr	r2, [pc, #12]	; (d4728 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d471c:	601a      	str	r2, [r3, #0]
   d471e:	bd10      	pop	{r4, pc}
   d4720:	2003e728 	.word	0x2003e728
   d4724:	2003e720 	.word	0x2003e720
   d4728:	000d58ec 	.word	0x000d58ec

000d472c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d472c:	4770      	bx	lr

000d472e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d472e:	2000      	movs	r0, #0
   d4730:	4770      	bx	lr

000d4732 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4732:	b510      	push	{r4, lr}
   d4734:	2110      	movs	r1, #16
   d4736:	4604      	mov	r4, r0
   d4738:	f001 f815 	bl	d5766 <_ZdlPvj>
   d473c:	4620      	mov	r0, r4
   d473e:	bd10      	pop	{r4, pc}

000d4740 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d4740:	b508      	push	{r3, lr}
      { delete this; }
   d4742:	f7ff fff6 	bl	d4732 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4746:	bd08      	pop	{r3, pc}

000d4748 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4748:	b510      	push	{r4, lr}
      if (_M_manager)
   d474a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d474c:	4604      	mov	r4, r0
      if (_M_manager)
   d474e:	b113      	cbz	r3, d4756 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4750:	2203      	movs	r2, #3
   d4752:	4601      	mov	r1, r0
   d4754:	4798      	blx	r3
    }
   d4756:	4620      	mov	r0, r4
   d4758:	bd10      	pop	{r4, pc}

000d475a <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d475a:	b530      	push	{r4, r5, lr}
        type_(type) {
   d475c:	2200      	movs	r2, #0
   d475e:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d4762:	6002      	str	r2, [r0, #0]
   d4764:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4766:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4768:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d476a:	680c      	ldr	r4, [r1, #0]
   d476c:	8085      	strh	r5, [r0, #4]
   d476e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d4770:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d4772:	bd30      	pop	{r4, r5, pc}

000d4774 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4774:	b510      	push	{r4, lr}
   d4776:	4604      	mov	r4, r0
    free((void*)msg_);
   d4778:	6800      	ldr	r0, [r0, #0]
   d477a:	f7ff ff2b 	bl	d45d4 <free>
}
   d477e:	4620      	mov	r0, r4
   d4780:	bd10      	pop	{r4, pc}

000d4782 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4782:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4784:	68c4      	ldr	r4, [r0, #12]
   d4786:	b1f4      	cbz	r4, d47c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4788:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d478a:	2b02      	cmp	r3, #2
   d478c:	d103      	bne.n	d4796 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d478e:	f104 000c 	add.w	r0, r4, #12
   d4792:	f7ff ffef 	bl	d4774 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d4796:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d4798:	b135      	cbz	r5, d47a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d479a:	4628      	mov	r0, r5
   d479c:	f7ff ffd4 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
   d47a0:	2110      	movs	r1, #16
   d47a2:	4628      	mov	r0, r5
   d47a4:	f000 ffdf 	bl	d5766 <_ZdlPvj>
   d47a8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d47aa:	b135      	cbz	r5, d47ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d47ac:	4628      	mov	r0, r5
   d47ae:	f7ff ffcb 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
   d47b2:	2110      	movs	r1, #16
   d47b4:	4628      	mov	r0, r5
   d47b6:	f000 ffd6 	bl	d5766 <_ZdlPvj>
   d47ba:	4620      	mov	r0, r4
   d47bc:	2114      	movs	r1, #20
   d47be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d47c2:	f000 bfd0 	b.w	d5766 <_ZdlPvj>
   d47c6:	bd38      	pop	{r3, r4, r5, pc}

000d47c8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d47c8:	b510      	push	{r4, lr}
   d47ca:	b088      	sub	sp, #32
   d47cc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d47ce:	4668      	mov	r0, sp
   d47d0:	f000 fcf9 	bl	d51c6 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d47d4:	4669      	mov	r1, sp
   d47d6:	a804      	add	r0, sp, #16
   d47d8:	f000 fd18 	bl	d520c <_ZN6StringC1ERKS_>
   d47dc:	a804      	add	r0, sp, #16
   d47de:	47a0      	blx	r4
   d47e0:	4604      	mov	r4, r0
   d47e2:	a804      	add	r0, sp, #16
   d47e4:	f000 fca4 	bl	d5130 <_ZN6StringD1Ev>
    String p(param);
   d47e8:	4668      	mov	r0, sp
   d47ea:	f000 fca1 	bl	d5130 <_ZN6StringD1Ev>
}
   d47ee:	4620      	mov	r0, r4
   d47f0:	b008      	add	sp, #32
   d47f2:	bd10      	pop	{r4, pc}

000d47f4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d47f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d47f6:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d47f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d47fc:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d47fe:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d4800:	461a      	mov	r2, r3
   d4802:	4669      	mov	r1, sp
   d4804:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d4806:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d480a:	f8ad 4000 	strh.w	r4, [sp]
   d480e:	f7ff fe59 	bl	d44c4 <spark_function>
}
   d4812:	b004      	add	sp, #16
   d4814:	bd10      	pop	{r4, pc}

000d4816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4816:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4818:	460e      	mov	r6, r1
   d481a:	4604      	mov	r4, r0
   d481c:	f856 3b04 	ldr.w	r3, [r6], #4
   d4820:	9300      	str	r3, [sp, #0]
   d4822:	460d      	mov	r5, r1
   d4824:	a801      	add	r0, sp, #4
   d4826:	4631      	mov	r1, r6
   d4828:	f7ff ff18 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d482c:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d482e:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d4830:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4832:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d4834:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d4836:	2300      	movs	r3, #0
   d4838:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d483a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d483c:	f7ff fc6a 	bl	d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4840:	4630      	mov	r0, r6
   d4842:	f7ff fc67 	bl	d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d4846:	4628      	mov	r0, r5
   d4848:	2108      	movs	r1, #8
   d484a:	f000 ff8c 	bl	d5766 <_ZdlPvj>
        return p;
    }
   d484e:	4620      	mov	r0, r4
   d4850:	b002      	add	sp, #8
   d4852:	bd70      	pop	{r4, r5, r6, pc}

000d4854 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d4854:	b513      	push	{r0, r1, r4, lr}
   d4856:	460b      	mov	r3, r1
   d4858:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d485a:	e9d0 0100 	ldrd	r0, r1, [r0]
   d485e:	466c      	mov	r4, sp
   d4860:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4864:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4868:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d486c:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4870:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4874:	b002      	add	sp, #8
   d4876:	bd10      	pop	{r4, pc}

000d4878 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d4878:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d487a:	b510      	push	{r4, lr}
      if (_M_empty())
   d487c:	b90a      	cbnz	r2, d4882 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d487e:	f000 ff76 	bl	d576e <_ZSt25__throw_bad_function_callv>
    }
   d4882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4886:	68c3      	ldr	r3, [r0, #12]
   d4888:	4718      	bx	r3

000d488a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d488a:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d488c:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d488e:	f100 0110 	add.w	r1, r0, #16
   d4892:	f7ff fff1 	bl	d4878 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d4896:	bd08      	pop	{r3, pc}

000d4898 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d4898:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d489a:	b510      	push	{r4, lr}
      if (_M_empty())
   d489c:	b90a      	cbnz	r2, d48a2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d489e:	f000 ff66 	bl	d576e <_ZSt25__throw_bad_function_callv>
    }
   d48a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d48a6:	68c3      	ldr	r3, [r0, #12]
   d48a8:	4718      	bx	r3

000d48aa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d48aa:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d48ac:	6800      	ldr	r0, [r0, #0]
   d48ae:	f100 0110 	add.w	r1, r0, #16
   d48b2:	f7ff fff1 	bl	d4898 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d48b6:	bd08      	pop	{r3, pc}

000d48b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d48b8:	b538      	push	{r3, r4, r5, lr}
   d48ba:	2300      	movs	r3, #0
   d48bc:	4604      	mov	r4, r0
   d48be:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d48c0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d48c2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d48c4:	f7ff fbe5 	bl	d4092 <_Znwj>
   d48c8:	b128      	cbz	r0, d48d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d48ca:	2301      	movs	r3, #1
   d48cc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d48d0:	4b02      	ldr	r3, [pc, #8]	; (d48dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d48d2:	6003      	str	r3, [r0, #0]
   d48d4:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d48d6:	6020      	str	r0, [r4, #0]
	}
   d48d8:	4620      	mov	r0, r4
   d48da:	bd38      	pop	{r3, r4, r5, pc}
   d48dc:	000d5928 	.word	0x000d5928

000d48e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d48e0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d48e2:	2300      	movs	r3, #0
   d48e4:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d48e6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d48e8:	4604      	mov	r4, r0
   d48ea:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d48ec:	b12b      	cbz	r3, d48fa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d48ee:	2202      	movs	r2, #2
   d48f0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d48f2:	68eb      	ldr	r3, [r5, #12]
   d48f4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d48f6:	68ab      	ldr	r3, [r5, #8]
   d48f8:	60a3      	str	r3, [r4, #8]
    }
   d48fa:	4620      	mov	r0, r4
   d48fc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4900 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d4900:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4902:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4904:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d4906:	4668      	mov	r0, sp
   d4908:	f7ff ff27 	bl	d475a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d490c:	f04f 0302 	mov.w	r3, #2
   d4910:	e8d4 2f4f 	ldrexb	r2, [r4]
   d4914:	2a00      	cmp	r2, #0
   d4916:	d103      	bne.n	d4920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4918:	e8c4 3f41 	strexb	r1, r3, [r4]
   d491c:	2900      	cmp	r1, #0
   d491e:	d1f7      	bne.n	d4910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d4920:	d125      	bne.n	d496e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d4922:	f104 050c 	add.w	r5, r4, #12
   d4926:	4669      	mov	r1, sp
   d4928:	4628      	mov	r0, r5
   d492a:	f7ff ff16 	bl	d475a <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d492e:	f3bf 8f5b 	dmb	ish
   d4932:	2301      	movs	r3, #1
   d4934:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4936:	2000      	movs	r0, #0
   d4938:	f104 0308 	add.w	r3, r4, #8
   d493c:	f3bf 8f5b 	dmb	ish
   d4940:	e853 6f00 	ldrex	r6, [r3]
   d4944:	e843 0200 	strex	r2, r0, [r3]
   d4948:	2a00      	cmp	r2, #0
   d494a:	d1f9      	bne.n	d4940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d494c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4950:	b16e      	cbz	r6, d496e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d4952:	f7ff fd93 	bl	d447c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4956:	b178      	cbz	r0, d4978 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4958:	4629      	mov	r1, r5
   d495a:	4630      	mov	r0, r6
   d495c:	f7ff ff8c 	bl	d4878 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d4960:	4630      	mov	r0, r6
   d4962:	f7ff fef1 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4966:	2110      	movs	r1, #16
   d4968:	4630      	mov	r0, r6
   d496a:	f000 fefc 	bl	d5766 <_ZdlPvj>
        p_->setError(std::move(error));
   d496e:	4668      	mov	r0, sp
   d4970:	f7ff ff00 	bl	d4774 <_ZN8particle5ErrorD1Ev>
    }
   d4974:	b009      	add	sp, #36	; 0x24
   d4976:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4978:	4631      	mov	r1, r6
   d497a:	a802      	add	r0, sp, #8
   d497c:	f7ff ffb0 	bl	d48e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4980:	68e0      	ldr	r0, [r4, #12]
   d4982:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4986:	b108      	cbz	r0, d498c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d4988:	f000 ff46 	bl	d5818 <strdup>
        type_(type) {
   d498c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d498e:	2010      	movs	r0, #16
   d4990:	f8ad 501c 	strh.w	r5, [sp, #28]
   d4994:	f7ff fb7d 	bl	d4092 <_Znwj>
   d4998:	4605      	mov	r5, r0
   d499a:	b1e8      	cbz	r0, d49d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d499c:	2700      	movs	r7, #0
   d499e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d49a0:	2018      	movs	r0, #24
   d49a2:	f7ff fb76 	bl	d4092 <_Znwj>
   d49a6:	4604      	mov	r4, r0
   d49a8:	b188      	cbz	r0, d49ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d49aa:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d49ac:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d49ae:	a802      	add	r0, sp, #8
   d49b0:	f7ff ff50 	bl	d4854 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49b4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d49b6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d49b8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d49ba:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d49bc:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d49be:	a906      	add	r1, sp, #24
   d49c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d49c2:	60e3      	str	r3, [r4, #12]
   d49c4:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d49c8:	9205      	str	r2, [sp, #20]
   d49ca:	f7ff fec6 	bl	d475a <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d49ce:	4b08      	ldr	r3, [pc, #32]	; (d49f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d49d0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d49d2:	4b08      	ldr	r3, [pc, #32]	; (d49f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d49d4:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d49d6:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d49d8:	a806      	add	r0, sp, #24
   d49da:	f7ff fecb 	bl	d4774 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d49de:	a802      	add	r0, sp, #8
   d49e0:	f7ff feb2 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d49e4:	2200      	movs	r2, #0
   d49e6:	4629      	mov	r1, r5
   d49e8:	4803      	ldr	r0, [pc, #12]	; (d49f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d49ea:	f7ff fd4f 	bl	d448c <application_thread_invoke>
   d49ee:	e7b7      	b.n	d4960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d49f0:	000d488b 	.word	0x000d488b
   d49f4:	000d4b21 	.word	0x000d4b21
   d49f8:	000d4625 	.word	0x000d4625

000d49fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d49fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4a00:	b08a      	sub	sp, #40	; 0x28
   d4a02:	4605      	mov	r5, r0
   d4a04:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d4a08:	460c      	mov	r4, r1
   d4a0a:	4617      	mov	r7, r2
   d4a0c:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4a0e:	f7ff fd61 	bl	d44d4 <spark_cloud_flag_connected>
   d4a12:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d4a14:	4682      	mov	sl, r0
   d4a16:	bb38      	cbnz	r0, d4a68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d4a18:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d4a1c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4a1e:	a905      	add	r1, sp, #20
   d4a20:	4630      	mov	r0, r6
   d4a22:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4a26:	f7ff fe98 	bl	d475a <_ZN8particle5ErrorC1EOS0_>
   d4a2a:	2014      	movs	r0, #20
   d4a2c:	f7ff fb31 	bl	d4092 <_Znwj>
   d4a30:	4604      	mov	r4, r0
   d4a32:	b148      	cbz	r0, d4a48 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d4a34:	2302      	movs	r3, #2
   d4a36:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a38:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4a3a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a3e:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d4a40:	4631      	mov	r1, r6
   d4a42:	300c      	adds	r0, #12
   d4a44:	f7ff fe89 	bl	d475a <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4a48:	4628      	mov	r0, r5
	: __shared_count(__p)
   d4a4a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4a4c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d4a50:	f7ff ff32 	bl	d48b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4a54:	4630      	mov	r0, r6
   d4a56:	f7ff fe8d 	bl	d4774 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4a5a:	a805      	add	r0, sp, #20
   d4a5c:	f7ff fe8a 	bl	d4774 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d4a60:	4628      	mov	r0, r5
   d4a62:	b00a      	add	sp, #40	; 0x28
   d4a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4a68:	230c      	movs	r3, #12
   d4a6a:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4a6e:	2014      	movs	r0, #20
   d4a70:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d4a74:	9307      	str	r3, [sp, #28]
   d4a76:	f7ff fb0c 	bl	d4092 <_Znwj>
   d4a7a:	4601      	mov	r1, r0
   d4a7c:	b128      	cbz	r0, d4a8a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4a7e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d4a82:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a86:	f880 a001 	strb.w	sl, [r0, #1]
   d4a8a:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d4a8c:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d4a8e:	f7ff ff13 	bl	d48b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d4a92:	4b22      	ldr	r3, [pc, #136]	; (d4b1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d4a94:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4a96:	2008      	movs	r0, #8
   d4a98:	f7ff fafb 	bl	d4092 <_Znwj>
   d4a9c:	4682      	mov	sl, r0
   d4a9e:	b128      	cbz	r0, d4aac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4aa0:	9b03      	ldr	r3, [sp, #12]
   d4aa2:	f840 3b04 	str.w	r3, [r0], #4
   d4aa6:	a904      	add	r1, sp, #16
   d4aa8:	f7ff fdd8 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4aac:	9600      	str	r6, [sp, #0]
   d4aae:	fa5f f389 	uxtb.w	r3, r9
   d4ab2:	4642      	mov	r2, r8
   d4ab4:	4639      	mov	r1, r7
   d4ab6:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d4ab8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4abc:	f7ff fd12 	bl	d44e4 <spark_send_event>
   d4ac0:	b9b8      	cbnz	r0, d4af2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d4ac2:	9b03      	ldr	r3, [sp, #12]
   d4ac4:	785b      	ldrb	r3, [r3, #1]
   d4ac6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4aca:	b993      	cbnz	r3, d4af2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d4acc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d4ad0:	a905      	add	r1, sp, #20
   d4ad2:	a803      	add	r0, sp, #12
   d4ad4:	9205      	str	r2, [sp, #20]
   d4ad6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4ada:	f7ff ff11 	bl	d4900 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4ade:	a805      	add	r0, sp, #20
   d4ae0:	f7ff fe48 	bl	d4774 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4ae4:	a805      	add	r0, sp, #20
   d4ae6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4ae8:	f7ff fe95 	bl	d4816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d4aec:	a806      	add	r0, sp, #24
   d4aee:	f7ff fb11 	bl	d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4af2:	9b03      	ldr	r3, [sp, #12]
   d4af4:	9305      	str	r3, [sp, #20]
   d4af6:	a904      	add	r1, sp, #16
   d4af8:	a806      	add	r0, sp, #24
   d4afa:	f7ff fdaf 	bl	d465c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4afe:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4b00:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4b02:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d4b04:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d4b06:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d4b08:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d4b0a:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d4b0c:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d4b0e:	f7ff fb01 	bl	d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b12:	a804      	add	r0, sp, #16
   d4b14:	f7ff fafe 	bl	d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d4b18:	e7a2      	b.n	d4a60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d4b1a:	bf00      	nop
   d4b1c:	000d4be5 	.word	0x000d4be5

000d4b20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d4b20:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4b22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4b24:	4605      	mov	r5, r0
	  switch (__op)
   d4b26:	d007      	beq.n	d4b38 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d4b28:	2a03      	cmp	r2, #3
   d4b2a:	d018      	beq.n	d4b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d4b2c:	2a01      	cmp	r2, #1
   d4b2e:	d101      	bne.n	d4b34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4b30:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4b32:	6003      	str	r3, [r0, #0]
	}
   d4b34:	2000      	movs	r0, #0
   d4b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4b38:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d4b3a:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4b3c:	f7ff faa9 	bl	d4092 <_Znwj>
   d4b40:	4604      	mov	r4, r0
   d4b42:	b150      	cbz	r0, d4b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4b44:	4631      	mov	r1, r6
   d4b46:	f7ff fecb 	bl	d48e0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d4b4a:	6930      	ldr	r0, [r6, #16]
   d4b4c:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4b50:	b108      	cbz	r0, d4b56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d4b52:	f000 fe61 	bl	d5818 <strdup>
        type_(type) {
   d4b56:	6120      	str	r0, [r4, #16]
   d4b58:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d4b5a:	602c      	str	r4, [r5, #0]
	}
   d4b5c:	e7ea      	b.n	d4b34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4b5e:	6804      	ldr	r4, [r0, #0]
   d4b60:	2c00      	cmp	r4, #0
   d4b62:	d0e7      	beq.n	d4b34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d4b64:	f104 0010 	add.w	r0, r4, #16
   d4b68:	f7ff fe04 	bl	d4774 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	f7ff fdeb 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4b72:	2118      	movs	r1, #24
   d4b74:	4620      	mov	r0, r4
   d4b76:	f000 fdf6 	bl	d5766 <_ZdlPvj>
   d4b7a:	e7db      	b.n	d4b34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d4b7c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d4b7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d4b7e:	2300      	movs	r3, #0
   d4b80:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d4b82:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d4b84:	4604      	mov	r4, r0
   d4b86:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d4b88:	b12b      	cbz	r3, d4b96 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b8a:	2202      	movs	r2, #2
   d4b8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b8e:	68eb      	ldr	r3, [r5, #12]
   d4b90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b92:	68ab      	ldr	r3, [r5, #8]
   d4b94:	60a3      	str	r3, [r4, #8]
    }
   d4b96:	4620      	mov	r0, r4
   d4b98:	bd38      	pop	{r3, r4, r5, pc}

000d4b9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d4b9a:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4b9c:	b570      	push	{r4, r5, r6, lr}
   d4b9e:	4604      	mov	r4, r0
	  switch (__op)
   d4ba0:	d007      	beq.n	d4bb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d4ba2:	2a03      	cmp	r2, #3
   d4ba4:	d012      	beq.n	d4bcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d4ba6:	2a01      	cmp	r2, #1
   d4ba8:	d101      	bne.n	d4bae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4baa:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4bac:	6003      	str	r3, [r0, #0]
	}
   d4bae:	2000      	movs	r0, #0
   d4bb0:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4bb2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d4bb4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4bb6:	f7ff fa6c 	bl	d4092 <_Znwj>
   d4bba:	4605      	mov	r5, r0
   d4bbc:	b120      	cbz	r0, d4bc8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d4bbe:	4631      	mov	r1, r6
   d4bc0:	f7ff ffdc 	bl	d4b7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4bc4:	7c33      	ldrb	r3, [r6, #16]
   d4bc6:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d4bc8:	6025      	str	r5, [r4, #0]
	}
   d4bca:	e7f0      	b.n	d4bae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d4bcc:	6804      	ldr	r4, [r0, #0]
   d4bce:	2c00      	cmp	r4, #0
   d4bd0:	d0ed      	beq.n	d4bae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d4bd2:	4620      	mov	r0, r4
   d4bd4:	f7ff fdb8 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d4bd8:	2114      	movs	r1, #20
   d4bda:	4620      	mov	r0, r4
   d4bdc:	f000 fdc3 	bl	d5766 <_ZdlPvj>
   d4be0:	e7e5      	b.n	d4bae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d4be4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4be6:	b089      	sub	sp, #36	; 0x24
   d4be8:	4604      	mov	r4, r0
   d4bea:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4bec:	a801      	add	r0, sp, #4
   d4bee:	4611      	mov	r1, r2
   d4bf0:	f7ff fe11 	bl	d4816 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4bf4:	b1a4      	cbz	r4, d4c20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4bf6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d4bf8:	b11d      	cbz	r5, d4c02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d4bfa:	4628      	mov	r0, r5
   d4bfc:	f000 fe0c 	bl	d5818 <strdup>
   d4c00:	4605      	mov	r5, r0
   d4c02:	a801      	add	r0, sp, #4
   d4c04:	a903      	add	r1, sp, #12
        type_(type) {
   d4c06:	9503      	str	r5, [sp, #12]
   d4c08:	f8ad 4010 	strh.w	r4, [sp, #16]
   d4c0c:	f7ff fe78 	bl	d4900 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4c10:	a803      	add	r0, sp, #12
   d4c12:	f7ff fdaf 	bl	d4774 <_ZN8particle5ErrorD1Ev>
   d4c16:	a802      	add	r0, sp, #8
   d4c18:	f7ff fa7c 	bl	d4114 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d4c1c:	b009      	add	sp, #36	; 0x24
   d4c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4c20:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d4c22:	2301      	movs	r3, #1
   d4c24:	e8d5 2f4f 	ldrexb	r2, [r5]
   d4c28:	2a00      	cmp	r2, #0
   d4c2a:	d103      	bne.n	d4c34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d4c2c:	e8c5 3f41 	strexb	r1, r3, [r5]
   d4c30:	2900      	cmp	r1, #0
   d4c32:	d1f7      	bne.n	d4c24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d4c34:	d1ef      	bne.n	d4c16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d4c36:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d4c38:	f3bf 8f5b 	dmb	ish
   d4c3c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d4c3e:	1d2b      	adds	r3, r5, #4
   d4c40:	f3bf 8f5b 	dmb	ish
   d4c44:	e853 6f00 	ldrex	r6, [r3]
   d4c48:	e843 4200 	strex	r2, r4, [r3]
   d4c4c:	2a00      	cmp	r2, #0
   d4c4e:	d1f9      	bne.n	d4c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d4c50:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d4c54:	2e00      	cmp	r6, #0
   d4c56:	d0de      	beq.n	d4c16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d4c58:	4620      	mov	r0, r4
   d4c5a:	f7ff fc0f 	bl	d447c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d4c5e:	4607      	mov	r7, r0
   d4c60:	b160      	cbz	r0, d4c7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4c62:	f105 010c 	add.w	r1, r5, #12
   d4c66:	4630      	mov	r0, r6
   d4c68:	f7ff fe16 	bl	d4898 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d4c6c:	4630      	mov	r0, r6
   d4c6e:	f7ff fd6b 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d4c72:	2110      	movs	r1, #16
   d4c74:	4630      	mov	r0, r6
   d4c76:	f000 fd76 	bl	d5766 <_ZdlPvj>
   d4c7a:	e7cc      	b.n	d4c16 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4c7c:	4631      	mov	r1, r6
   d4c7e:	a803      	add	r0, sp, #12
   d4c80:	f7ff ff7c 	bl	d4b7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c84:	7b2b      	ldrb	r3, [r5, #12]
   d4c86:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4c8a:	2010      	movs	r0, #16
   d4c8c:	f7ff fa01 	bl	d4092 <_Znwj>
   d4c90:	4605      	mov	r5, r0
   d4c92:	b1d0      	cbz	r0, d4cca <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d4c94:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c96:	2014      	movs	r0, #20
   d4c98:	f7ff f9fb 	bl	d4092 <_Znwj>
   d4c9c:	4604      	mov	r4, r0
   d4c9e:	b178      	cbz	r0, d4cc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d4ca0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d4ca2:	4601      	mov	r1, r0
   d4ca4:	a803      	add	r0, sp, #12
   d4ca6:	f7ff fdd5 	bl	d4854 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4caa:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4cac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cae:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4cb0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4cb2:	9205      	str	r2, [sp, #20]
   d4cb4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4cb6:	60e3      	str	r3, [r4, #12]
   d4cb8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4cbc:	9206      	str	r2, [sp, #24]
   d4cbe:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d4cc0:	4b06      	ldr	r3, [pc, #24]	; (d4cdc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d4cc2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4cc4:	4b06      	ldr	r3, [pc, #24]	; (d4ce0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4cc6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d4cc8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d4cca:	a803      	add	r0, sp, #12
   d4ccc:	f7ff fd3c 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4cd0:	2200      	movs	r2, #0
   d4cd2:	4629      	mov	r1, r5
   d4cd4:	4803      	ldr	r0, [pc, #12]	; (d4ce4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d4cd6:	f7ff fbd9 	bl	d448c <application_thread_invoke>
   d4cda:	e7c7      	b.n	d4c6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d4cdc:	000d48ab 	.word	0x000d48ab
   d4ce0:	000d4b9b 	.word	0x000d4b9b
   d4ce4:	000d4625 	.word	0x000d4625

000d4ce8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ce8:	2200      	movs	r2, #0
   d4cea:	6840      	ldr	r0, [r0, #4]
   d4cec:	4611      	mov	r1, r2
   d4cee:	f7ff bc41 	b.w	d4574 <network_listening>

000d4cf2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4cf2:	2200      	movs	r2, #0
   d4cf4:	6840      	ldr	r0, [r0, #4]
   d4cf6:	4611      	mov	r1, r2
   d4cf8:	f7ff bc4c 	b.w	d4594 <network_get_listen_timeout>

000d4cfc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4cfc:	6840      	ldr	r0, [r0, #4]
   d4cfe:	2200      	movs	r2, #0
   d4d00:	f7ff bc40 	b.w	d4584 <network_set_listen_timeout>

000d4d04 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d04:	6840      	ldr	r0, [r0, #4]
   d4d06:	2200      	movs	r2, #0
   d4d08:	f081 0101 	eor.w	r1, r1, #1
   d4d0c:	f7ff bc2a 	b.w	d4564 <network_listen>

000d4d10 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d10:	2300      	movs	r3, #0
   d4d12:	6840      	ldr	r0, [r0, #4]
   d4d14:	461a      	mov	r2, r3
   d4d16:	4619      	mov	r1, r3
   d4d18:	f7ff bc1c 	b.w	d4554 <network_off>

000d4d1c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d1c:	2300      	movs	r3, #0
   d4d1e:	6840      	ldr	r0, [r0, #4]
   d4d20:	461a      	mov	r2, r3
   d4d22:	4619      	mov	r1, r3
   d4d24:	f7ff bc0e 	b.w	d4544 <network_on>

000d4d28 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d28:	2200      	movs	r2, #0
   d4d2a:	6840      	ldr	r0, [r0, #4]
   d4d2c:	4611      	mov	r1, r2
   d4d2e:	f7ff bc01 	b.w	d4534 <network_ready>

000d4d32 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d32:	2200      	movs	r2, #0
   d4d34:	6840      	ldr	r0, [r0, #4]
   d4d36:	4611      	mov	r1, r2
   d4d38:	f7ff bbec 	b.w	d4514 <network_connecting>

000d4d3c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d3c:	6840      	ldr	r0, [r0, #4]
   d4d3e:	2200      	movs	r2, #0
   d4d40:	2102      	movs	r1, #2
   d4d42:	f7ff bbef 	b.w	d4524 <network_disconnect>

000d4d46 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d46:	2300      	movs	r3, #0
   d4d48:	6840      	ldr	r0, [r0, #4]
   d4d4a:	461a      	mov	r2, r3
   d4d4c:	f7ff bbda 	b.w	d4504 <network_connect>

000d4d50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4d50:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d52:	2203      	movs	r2, #3
   d4d54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d56:	4a02      	ldr	r2, [pc, #8]	; (d4d60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d58:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4d5a:	4770      	bx	lr
   d4d5c:	2003e750 	.word	0x2003e750
   d4d60:	000d5944 	.word	0x000d5944

000d4d64 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4d64:	4770      	bx	lr

000d4d66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d68:	4606      	mov	r6, r0
   d4d6a:	4615      	mov	r5, r2
   d4d6c:	460c      	mov	r4, r1
   d4d6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d70:	42bc      	cmp	r4, r7
   d4d72:	d006      	beq.n	d4d82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4d74:	6833      	ldr	r3, [r6, #0]
   d4d76:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d7a:	689b      	ldr	r3, [r3, #8]
   d4d7c:	4630      	mov	r0, r6
   d4d7e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4d80:	e7f6      	b.n	d4d70 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4d82:	4628      	mov	r0, r5
   d4d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d86 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4d86:	7c00      	ldrb	r0, [r0, #16]
   d4d88:	2200      	movs	r2, #0
   d4d8a:	f7ff ba8f 	b.w	d42ac <hal_i2c_write>

000d4d8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4d8e:	7c00      	ldrb	r0, [r0, #16]
   d4d90:	2100      	movs	r1, #0
   d4d92:	f7ff ba93 	b.w	d42bc <hal_i2c_available>

000d4d96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4d96:	7c00      	ldrb	r0, [r0, #16]
   d4d98:	2100      	movs	r1, #0
   d4d9a:	f7ff ba97 	b.w	d42cc <hal_i2c_read>

000d4d9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4d9e:	7c00      	ldrb	r0, [r0, #16]
   d4da0:	2100      	movs	r1, #0
   d4da2:	f7ff ba9b 	b.w	d42dc <hal_i2c_peek>

000d4da6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4da6:	7c00      	ldrb	r0, [r0, #16]
   d4da8:	2100      	movs	r1, #0
   d4daa:	f7ff ba9f 	b.w	d42ec <hal_i2c_flush>

000d4dae <_ZN7TwoWireD0Ev>:
   d4dae:	b510      	push	{r4, lr}
   d4db0:	2114      	movs	r1, #20
   d4db2:	4604      	mov	r4, r0
   d4db4:	f000 fcd7 	bl	d5766 <_ZdlPvj>
   d4db8:	4620      	mov	r0, r4
   d4dba:	bd10      	pop	{r4, pc}

000d4dbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4dbc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4dc2:	4604      	mov	r4, r0
   d4dc4:	4608      	mov	r0, r1
   d4dc6:	2100      	movs	r1, #0
   d4dc8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4dcc:	4b03      	ldr	r3, [pc, #12]	; (d4ddc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4dce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4dd0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4dd2:	4611      	mov	r1, r2
   d4dd4:	f7ff fa9a 	bl	d430c <hal_i2c_init>
}
   d4dd8:	4620      	mov	r0, r4
   d4dda:	bd10      	pop	{r4, pc}
   d4ddc:	000d5980 	.word	0x000d5980

000d4de0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4de0:	4770      	bx	lr

000d4de2 <_ZN9IPAddressD0Ev>:
   d4de2:	b510      	push	{r4, lr}
   d4de4:	2118      	movs	r1, #24
   d4de6:	4604      	mov	r4, r0
   d4de8:	f000 fcbd 	bl	d5766 <_ZdlPvj>
   d4dec:	4620      	mov	r0, r4
   d4dee:	bd10      	pop	{r4, pc}

000d4df0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4df0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4df2:	7d03      	ldrb	r3, [r0, #20]
   d4df4:	2b06      	cmp	r3, #6
{
   d4df6:	b08d      	sub	sp, #52	; 0x34
   d4df8:	460e      	mov	r6, r1
   d4dfa:	f100 0704 	add.w	r7, r0, #4
   d4dfe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4e02:	d012      	beq.n	d4e2a <_ZNK9IPAddress7printToER5Print+0x3a>
   d4e04:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e08:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4e0c:	220a      	movs	r2, #10
   d4e0e:	4630      	mov	r0, r6
   d4e10:	f000 f951 	bl	d50b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4e14:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4e16:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4e18:	d019      	beq.n	d4e4e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4e1a:	2c00      	cmp	r4, #0
   d4e1c:	d0f4      	beq.n	d4e08 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4e1e:	212e      	movs	r1, #46	; 0x2e
   d4e20:	4630      	mov	r0, r6
   d4e22:	f000 f92f 	bl	d5084 <_ZN5Print5printEc>
   d4e26:	4404      	add	r4, r0
   d4e28:	e7ee      	b.n	d4e08 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e2a:	232f      	movs	r3, #47	; 0x2f
   d4e2c:	466a      	mov	r2, sp
   d4e2e:	4639      	mov	r1, r7
   d4e30:	200a      	movs	r0, #10
		buf[0] = 0;
   d4e32:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4e36:	f7ff fa71 	bl	d431c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4e3a:	4668      	mov	r0, sp
   d4e3c:	f000 fd09 	bl	d5852 <strlen>
   d4e40:	6833      	ldr	r3, [r6, #0]
   d4e42:	4602      	mov	r2, r0
   d4e44:	68db      	ldr	r3, [r3, #12]
   d4e46:	4669      	mov	r1, sp
   d4e48:	4630      	mov	r0, r6
   d4e4a:	4798      	blx	r3
   d4e4c:	4604      	mov	r4, r0
    }
    return n;
}
   d4e4e:	4620      	mov	r0, r4
   d4e50:	b00d      	add	sp, #52	; 0x34
   d4e52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4e54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4e54:	b510      	push	{r4, lr}
   d4e56:	4b05      	ldr	r3, [pc, #20]	; (d4e6c <_ZN9IPAddressC1Ev+0x18>)
   d4e58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4e5a:	2211      	movs	r2, #17
   d4e5c:	f840 3b04 	str.w	r3, [r0], #4
   d4e60:	2100      	movs	r1, #0
   d4e62:	f000 fca3 	bl	d57ac <memset>
}
   d4e66:	4620      	mov	r0, r4
   d4e68:	bd10      	pop	{r4, pc}
   d4e6a:	bf00      	nop
   d4e6c:	000d59a8 	.word	0x000d59a8

000d4e70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4e70:	4603      	mov	r3, r0
   d4e72:	4a07      	ldr	r2, [pc, #28]	; (d4e90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4e74:	b510      	push	{r4, lr}
   d4e76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4e7a:	f101 0210 	add.w	r2, r1, #16
   d4e7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d4e82:	f843 4b04 	str.w	r4, [r3], #4
   d4e86:	4291      	cmp	r1, r2
   d4e88:	d1f9      	bne.n	d4e7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4e8a:	780a      	ldrb	r2, [r1, #0]
   d4e8c:	701a      	strb	r2, [r3, #0]
}
   d4e8e:	bd10      	pop	{r4, pc}
   d4e90:	000d59a8 	.word	0x000d59a8

000d4e94 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4e94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4e96:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4e9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4e9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ea2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4ea6:	2304      	movs	r3, #4
   d4ea8:	6041      	str	r1, [r0, #4]
   d4eaa:	7503      	strb	r3, [r0, #20]
}
   d4eac:	bd10      	pop	{r4, pc}

000d4eae <_ZN9IPAddressaSEPKh>:
{
   d4eae:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4eb0:	78cb      	ldrb	r3, [r1, #3]
   d4eb2:	9300      	str	r3, [sp, #0]
   d4eb4:	788b      	ldrb	r3, [r1, #2]
   d4eb6:	784a      	ldrb	r2, [r1, #1]
   d4eb8:	7809      	ldrb	r1, [r1, #0]
   d4eba:	f7ff ffeb 	bl	d4e94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4ebe:	b002      	add	sp, #8
   d4ec0:	bd10      	pop	{r4, pc}
	...

000d4ec4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4ec4:	4b01      	ldr	r3, [pc, #4]	; (d4ecc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4ec6:	4a02      	ldr	r2, [pc, #8]	; (d4ed0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ec8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4eca:	4770      	bx	lr
   d4ecc:	2003e758 	.word	0x2003e758
   d4ed0:	000d59b4 	.word	0x000d59b4

000d4ed4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4ed4:	2300      	movs	r3, #0
   d4ed6:	6840      	ldr	r0, [r0, #4]
   d4ed8:	461a      	mov	r2, r3
   d4eda:	f7ff bb13 	b.w	d4504 <network_connect>

000d4ede <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4ede:	6840      	ldr	r0, [r0, #4]
   d4ee0:	2200      	movs	r2, #0
   d4ee2:	2102      	movs	r1, #2
   d4ee4:	f7ff bb1e 	b.w	d4524 <network_disconnect>

000d4ee8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ee8:	2200      	movs	r2, #0
   d4eea:	6840      	ldr	r0, [r0, #4]
   d4eec:	4611      	mov	r1, r2
   d4eee:	f7ff bb11 	b.w	d4514 <network_connecting>

000d4ef2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4ef2:	2200      	movs	r2, #0
   d4ef4:	6840      	ldr	r0, [r0, #4]
   d4ef6:	4611      	mov	r1, r2
   d4ef8:	f7ff bb1c 	b.w	d4534 <network_ready>

000d4efc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4efc:	2300      	movs	r3, #0
   d4efe:	6840      	ldr	r0, [r0, #4]
   d4f00:	461a      	mov	r2, r3
   d4f02:	4619      	mov	r1, r3
   d4f04:	f7ff bb1e 	b.w	d4544 <network_on>

000d4f08 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4f08:	2300      	movs	r3, #0
   d4f0a:	6840      	ldr	r0, [r0, #4]
   d4f0c:	461a      	mov	r2, r3
   d4f0e:	4619      	mov	r1, r3
   d4f10:	f7ff bb20 	b.w	d4554 <network_off>

000d4f14 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4f14:	6840      	ldr	r0, [r0, #4]
   d4f16:	2100      	movs	r1, #0
   d4f18:	f7ff bb44 	b.w	d45a4 <network_is_on>

000d4f1c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4f1c:	6840      	ldr	r0, [r0, #4]
   d4f1e:	2100      	movs	r1, #0
   d4f20:	f7ff bb48 	b.w	d45b4 <network_is_off>

000d4f24 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4f24:	6840      	ldr	r0, [r0, #4]
   d4f26:	2200      	movs	r2, #0
   d4f28:	f081 0101 	eor.w	r1, r1, #1
   d4f2c:	f7ff bb1a 	b.w	d4564 <network_listen>

000d4f30 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4f30:	6840      	ldr	r0, [r0, #4]
   d4f32:	2200      	movs	r2, #0
   d4f34:	f7ff bb26 	b.w	d4584 <network_set_listen_timeout>

000d4f38 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4f38:	2200      	movs	r2, #0
   d4f3a:	6840      	ldr	r0, [r0, #4]
   d4f3c:	4611      	mov	r1, r2
   d4f3e:	f7ff bb29 	b.w	d4594 <network_get_listen_timeout>

000d4f42 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4f42:	2200      	movs	r2, #0
   d4f44:	6840      	ldr	r0, [r0, #4]
   d4f46:	4611      	mov	r1, r2
   d4f48:	f7ff bb14 	b.w	d4574 <network_listening>

000d4f4c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4f50:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4f52:	b095      	sub	sp, #84	; 0x54
   d4f54:	4616      	mov	r6, r2
   d4f56:	460d      	mov	r5, r1
   d4f58:	4607      	mov	r7, r0
    IPAddress addr;
   d4f5a:	f7ff ff7b 	bl	d4e54 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4f5e:	4621      	mov	r1, r4
   d4f60:	2218      	movs	r2, #24
   d4f62:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4f64:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4f66:	f000 fc21 	bl	d57ac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4f6a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4f6c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4f70:	4621      	mov	r1, r4
   d4f72:	466b      	mov	r3, sp
   d4f74:	aa0c      	add	r2, sp, #48	; 0x30
   d4f76:	4630      	mov	r0, r6
   d4f78:	f7ff f9e0 	bl	d433c <netdb_getaddrinfo>
    if (!r) {
   d4f7c:	4604      	mov	r4, r0
   d4f7e:	2800      	cmp	r0, #0
   d4f80:	d146      	bne.n	d5010 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4f82:	4602      	mov	r2, r0
   d4f84:	2101      	movs	r1, #1
   d4f86:	6868      	ldr	r0, [r5, #4]
   d4f88:	f7ff fad4 	bl	d4534 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f8c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4f8e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f90:	4622      	mov	r2, r4
   d4f92:	6868      	ldr	r0, [r5, #4]
   d4f94:	f7ff face 	bl	d4534 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f98:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4f9a:	4681      	mov	r9, r0
        bool ok = false;
   d4f9c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4f9e:	2e00      	cmp	r6, #0
   d4fa0:	d036      	beq.n	d5010 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4fa2:	2900      	cmp	r1, #0
   d4fa4:	d134      	bne.n	d5010 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4fa6:	6873      	ldr	r3, [r6, #4]
   d4fa8:	2b02      	cmp	r3, #2
   d4faa:	d003      	beq.n	d4fb4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4fac:	2b0a      	cmp	r3, #10
   d4fae:	d00b      	beq.n	d4fc8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4fb0:	69f6      	ldr	r6, [r6, #28]
   d4fb2:	e7f4      	b.n	d4f9e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4fb4:	f1b8 0f00 	cmp.w	r8, #0
   d4fb8:	d004      	beq.n	d4fc4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4fba:	6971      	ldr	r1, [r6, #20]
   d4fbc:	4638      	mov	r0, r7
   d4fbe:	3104      	adds	r1, #4
   d4fc0:	f7ff ff75 	bl	d4eae <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4fc4:	4641      	mov	r1, r8
   d4fc6:	e7f3      	b.n	d4fb0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4fc8:	f1b9 0f00 	cmp.w	r9, #0
   d4fcc:	d101      	bne.n	d4fd2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4fce:	4649      	mov	r1, r9
   d4fd0:	e7ee      	b.n	d4fb0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4fd2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4fd4:	2210      	movs	r2, #16
   d4fd6:	a801      	add	r0, sp, #4
   d4fd8:	f000 fbe8 	bl	d57ac <memset>
                    a.v = 6;
   d4fdc:	2306      	movs	r3, #6
   d4fde:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4fe2:	ad01      	add	r5, sp, #4
   d4fe4:	f104 0308 	add.w	r3, r4, #8
   d4fe8:	3418      	adds	r4, #24
   d4fea:	6818      	ldr	r0, [r3, #0]
   d4fec:	6859      	ldr	r1, [r3, #4]
   d4fee:	462a      	mov	r2, r5
   d4ff0:	c203      	stmia	r2!, {r0, r1}
   d4ff2:	3308      	adds	r3, #8
   d4ff4:	42a3      	cmp	r3, r4
   d4ff6:	4615      	mov	r5, r2
   d4ff8:	d1f7      	bne.n	d4fea <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4ffa:	a901      	add	r1, sp, #4
   d4ffc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4ffe:	ad07      	add	r5, sp, #28
   d5000:	f7ff ff36 	bl	d4e70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5006:	1d3c      	adds	r4, r7, #4
   d5008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d500a:	682b      	ldr	r3, [r5, #0]
   d500c:	7023      	strb	r3, [r4, #0]
   d500e:	e7de      	b.n	d4fce <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5010:	9800      	ldr	r0, [sp, #0]
   d5012:	f7ff f98b 	bl	d432c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5016:	4638      	mov	r0, r7
   d5018:	b015      	add	sp, #84	; 0x54
   d501a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5020 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5020:	4b02      	ldr	r3, [pc, #8]	; (d502c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5022:	4a03      	ldr	r2, [pc, #12]	; (d5030 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5024:	601a      	str	r2, [r3, #0]
   d5026:	2200      	movs	r2, #0
   d5028:	605a      	str	r2, [r3, #4]

} // spark
   d502a:	4770      	bx	lr
   d502c:	2003e75c 	.word	0x2003e75c
   d5030:	000d59c0 	.word	0x000d59c0

000d5034 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5036:	4606      	mov	r6, r0
   d5038:	460d      	mov	r5, r1
  size_t n = 0;
   d503a:	188f      	adds	r7, r1, r2
   d503c:	2400      	movs	r4, #0
  while (size--) {
   d503e:	42bd      	cmp	r5, r7
   d5040:	d00c      	beq.n	d505c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5042:	6833      	ldr	r3, [r6, #0]
   d5044:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5048:	689b      	ldr	r3, [r3, #8]
   d504a:	4630      	mov	r0, r6
   d504c:	4798      	blx	r3
     if (chunk>=0)
   d504e:	1e03      	subs	r3, r0, #0
   d5050:	db01      	blt.n	d5056 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5052:	441c      	add	r4, r3
  while (size--) {
   d5054:	e7f3      	b.n	d503e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5056:	2c00      	cmp	r4, #0
   d5058:	bf08      	it	eq
   d505a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d505c:	4620      	mov	r0, r4
   d505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5060 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d5060:	b513      	push	{r0, r1, r4, lr}
   d5062:	4604      	mov	r4, r0
    }
   d5064:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5066:	b159      	cbz	r1, d5080 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5068:	9101      	str	r1, [sp, #4]
   d506a:	f000 fbf2 	bl	d5852 <strlen>
   d506e:	6823      	ldr	r3, [r4, #0]
   d5070:	9901      	ldr	r1, [sp, #4]
   d5072:	68db      	ldr	r3, [r3, #12]
   d5074:	4602      	mov	r2, r0
   d5076:	4620      	mov	r0, r4
    }
   d5078:	b002      	add	sp, #8
   d507a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d507e:	4718      	bx	r3
    }
   d5080:	b002      	add	sp, #8
   d5082:	bd10      	pop	{r4, pc}

000d5084 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5084:	6803      	ldr	r3, [r0, #0]
   d5086:	689b      	ldr	r3, [r3, #8]
   d5088:	4718      	bx	r3

000d508a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d508a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d508c:	210d      	movs	r1, #13
{
   d508e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5090:	f7ff fff8 	bl	d5084 <_ZN5Print5printEc>
  n += print('\n');
   d5094:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5096:	4604      	mov	r4, r0
  n += print('\n');
   d5098:	4628      	mov	r0, r5
   d509a:	f7ff fff3 	bl	d5084 <_ZN5Print5printEc>
  return n;
}
   d509e:	4420      	add	r0, r4
   d50a0:	bd38      	pop	{r3, r4, r5, pc}

000d50a2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d50a2:	b538      	push	{r3, r4, r5, lr}
   d50a4:	4605      	mov	r5, r0
  return write(str);
   d50a6:	f7ff ffdb 	bl	d5060 <_ZN5Print5writeEPKc>
   d50aa:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d50ac:	4628      	mov	r0, r5
   d50ae:	f7ff ffec 	bl	d508a <_ZN5Print7printlnEv>
  return n;
}
   d50b2:	4420      	add	r0, r4
   d50b4:	bd38      	pop	{r3, r4, r5, pc}

000d50b6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50b6:	b530      	push	{r4, r5, lr}
   d50b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d50ba:	2300      	movs	r3, #0
   d50bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d50c0:	2a01      	cmp	r2, #1
   d50c2:	bf98      	it	ls
   d50c4:	220a      	movls	r2, #10
   d50c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d50c8:	460d      	mov	r5, r1
   d50ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d50ce:	fb01 5312 	mls	r3, r1, r2, r5
   d50d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50d6:	2b09      	cmp	r3, #9
   d50d8:	bf94      	ite	ls
   d50da:	3330      	addls	r3, #48	; 0x30
   d50dc:	3337      	addhi	r3, #55	; 0x37
   d50de:	b2db      	uxtb	r3, r3
  } while(n);
   d50e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d50e6:	d9ef      	bls.n	d50c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d50e8:	4621      	mov	r1, r4
   d50ea:	f7ff ffb9 	bl	d5060 <_ZN5Print5writeEPKc>
}
   d50ee:	b00b      	add	sp, #44	; 0x2c
   d50f0:	bd30      	pop	{r4, r5, pc}

000d50f2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d50f2:	b510      	push	{r4, lr}
   d50f4:	4604      	mov	r4, r0
   d50f6:	f7ff fb27 	bl	d4748 <_ZNSt14_Function_baseD1Ev>
   d50fa:	4620      	mov	r0, r4
   d50fc:	bd10      	pop	{r4, pc}
	...

000d5100 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5100:	4803      	ldr	r0, [pc, #12]	; (d5110 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5102:	4a04      	ldr	r2, [pc, #16]	; (d5114 <_GLOBAL__sub_I_RGB+0x14>)
   d5104:	4904      	ldr	r1, [pc, #16]	; (d5118 <_GLOBAL__sub_I_RGB+0x18>)
   d5106:	2300      	movs	r3, #0
   d5108:	6083      	str	r3, [r0, #8]
   d510a:	f000 bb27 	b.w	d575c <__aeabi_atexit>
   d510e:	bf00      	nop
   d5110:	2003e764 	.word	0x2003e764
   d5114:	2003e704 	.word	0x2003e704
   d5118:	000d50f3 	.word	0x000d50f3

000d511c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d511c:	b510      	push	{r4, lr}
   d511e:	4604      	mov	r4, r0
   d5120:	4608      	mov	r0, r1
{
    _spi = spi;
   d5122:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5124:	f7ff f912 	bl	d434c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5128:	2300      	movs	r3, #0
   d512a:	6063      	str	r3, [r4, #4]
}
   d512c:	4620      	mov	r0, r4
   d512e:	bd10      	pop	{r4, pc}

000d5130 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5130:	b510      	push	{r4, lr}
   d5132:	4604      	mov	r4, r0
{
	free(buffer);
   d5134:	6800      	ldr	r0, [r0, #0]
   d5136:	f7ff fa4d 	bl	d45d4 <free>
}
   d513a:	4620      	mov	r0, r4
   d513c:	bd10      	pop	{r4, pc}

000d513e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d513e:	b510      	push	{r4, lr}
   d5140:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5142:	6800      	ldr	r0, [r0, #0]
   d5144:	b108      	cbz	r0, d514a <_ZN6String10invalidateEv+0xc>
   d5146:	f7ff fa45 	bl	d45d4 <free>
	buffer = NULL;
   d514a:	2300      	movs	r3, #0
	capacity = len = 0;
   d514c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5150:	6023      	str	r3, [r4, #0]
}
   d5152:	bd10      	pop	{r4, pc}

000d5154 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5154:	b538      	push	{r3, r4, r5, lr}
   d5156:	4604      	mov	r4, r0
   d5158:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d515a:	6800      	ldr	r0, [r0, #0]
   d515c:	3101      	adds	r1, #1
   d515e:	f7ff fa41 	bl	d45e4 <realloc>
	if (newbuffer) {
   d5162:	b110      	cbz	r0, d516a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5164:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5168:	2001      	movs	r0, #1
	}
	return 0;
}
   d516a:	bd38      	pop	{r3, r4, r5, pc}

000d516c <_ZN6String7reserveEj>:
{
   d516c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d516e:	6803      	ldr	r3, [r0, #0]
{
   d5170:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5172:	b123      	cbz	r3, d517e <_ZN6String7reserveEj+0x12>
   d5174:	6843      	ldr	r3, [r0, #4]
   d5176:	428b      	cmp	r3, r1
   d5178:	d301      	bcc.n	d517e <_ZN6String7reserveEj+0x12>
   d517a:	2001      	movs	r0, #1
}
   d517c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d517e:	4620      	mov	r0, r4
   d5180:	f7ff ffe8 	bl	d5154 <_ZN6String12changeBufferEj>
   d5184:	2800      	cmp	r0, #0
   d5186:	d0f9      	beq.n	d517c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5188:	68a3      	ldr	r3, [r4, #8]
   d518a:	2b00      	cmp	r3, #0
   d518c:	d1f5      	bne.n	d517a <_ZN6String7reserveEj+0xe>
   d518e:	6822      	ldr	r2, [r4, #0]
   d5190:	7013      	strb	r3, [r2, #0]
   d5192:	e7f2      	b.n	d517a <_ZN6String7reserveEj+0xe>

000d5194 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5194:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5196:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5198:	4611      	mov	r1, r2
   d519a:	9201      	str	r2, [sp, #4]
{
   d519c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d519e:	f7ff ffe5 	bl	d516c <_ZN6String7reserveEj>
   d51a2:	9a01      	ldr	r2, [sp, #4]
   d51a4:	b928      	cbnz	r0, d51b2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d51a6:	4620      	mov	r0, r4
   d51a8:	f7ff ffc9 	bl	d513e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d51ac:	4620      	mov	r0, r4
   d51ae:	b003      	add	sp, #12
   d51b0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d51b2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d51b4:	4629      	mov	r1, r5
   d51b6:	6820      	ldr	r0, [r4, #0]
   d51b8:	f000 faea 	bl	d5790 <memcpy>
	buffer[len] = 0;
   d51bc:	6822      	ldr	r2, [r4, #0]
   d51be:	68a3      	ldr	r3, [r4, #8]
   d51c0:	2100      	movs	r1, #0
   d51c2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d51c4:	e7f2      	b.n	d51ac <_ZN6String4copyEPKcj+0x18>

000d51c6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d51c6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d51c8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d51ca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d51ce:	4604      	mov	r4, r0
	len = 0;
   d51d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d51d2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d51d4:	b141      	cbz	r1, d51e8 <_ZN6StringC1EPKc+0x22>
   d51d6:	4608      	mov	r0, r1
   d51d8:	9101      	str	r1, [sp, #4]
   d51da:	f000 fb3a 	bl	d5852 <strlen>
   d51de:	9901      	ldr	r1, [sp, #4]
   d51e0:	4602      	mov	r2, r0
   d51e2:	4620      	mov	r0, r4
   d51e4:	f7ff ffd6 	bl	d5194 <_ZN6String4copyEPKcj>
}
   d51e8:	4620      	mov	r0, r4
   d51ea:	b002      	add	sp, #8
   d51ec:	bd10      	pop	{r4, pc}

000d51ee <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d51ee:	4288      	cmp	r0, r1
{
   d51f0:	b510      	push	{r4, lr}
   d51f2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d51f4:	d005      	beq.n	d5202 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d51f6:	680b      	ldr	r3, [r1, #0]
   d51f8:	b12b      	cbz	r3, d5206 <_ZN6StringaSERKS_+0x18>
   d51fa:	688a      	ldr	r2, [r1, #8]
   d51fc:	4619      	mov	r1, r3
   d51fe:	f7ff ffc9 	bl	d5194 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5202:	4620      	mov	r0, r4
   d5204:	bd10      	pop	{r4, pc}
	else invalidate();
   d5206:	f7ff ff9a 	bl	d513e <_ZN6String10invalidateEv>
   d520a:	e7fa      	b.n	d5202 <_ZN6StringaSERKS_+0x14>

000d520c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d520c:	b510      	push	{r4, lr}
	buffer = NULL;
   d520e:	2300      	movs	r3, #0
String::String(const String &value)
   d5210:	4604      	mov	r4, r0
	capacity = 0;
   d5212:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d5216:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5218:	7303      	strb	r3, [r0, #12]
	*this = value;
   d521a:	f7ff ffe8 	bl	d51ee <_ZN6StringaSERKS_>
}
   d521e:	4620      	mov	r0, r4
   d5220:	bd10      	pop	{r4, pc}

000d5222 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d5222:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5224:	6882      	ldr	r2, [r0, #8]
   d5226:	b93a      	cbnz	r2, d5238 <_ZNK6String6equalsEPKc+0x16>
   d5228:	b121      	cbz	r1, d5234 <_ZNK6String6equalsEPKc+0x12>
   d522a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d522c:	fab0 f080 	clz	r0, r0
   d5230:	0940      	lsrs	r0, r0, #5
   d5232:	e000      	b.n	d5236 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5234:	2001      	movs	r0, #1
}
   d5236:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5238:	6800      	ldr	r0, [r0, #0]
   d523a:	b909      	cbnz	r1, d5240 <_ZNK6String6equalsEPKc+0x1e>
   d523c:	7800      	ldrb	r0, [r0, #0]
   d523e:	e7f5      	b.n	d522c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d5240:	f000 fae0 	bl	d5804 <strcmp>
   d5244:	e7f2      	b.n	d522c <_ZNK6String6equalsEPKc+0xa>

000d5246 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5246:	b510      	push	{r4, lr}
   d5248:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d524a:	6800      	ldr	r0, [r0, #0]
   d524c:	b118      	cbz	r0, d5256 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d524e:	f7ff f9c1 	bl	d45d4 <free>
            wakeupSource_ = nullptr;
   d5252:	2300      	movs	r3, #0
   d5254:	6023      	str	r3, [r4, #0]
        }
    }
   d5256:	bd10      	pop	{r4, pc}

000d5258 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5258:	b510      	push	{r4, lr}
   d525a:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d525c:	f7ff fff3 	bl	d5246 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5260:	4620      	mov	r0, r4
   d5262:	bd10      	pop	{r4, pc}

000d5264 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5264:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5266:	4b09      	ldr	r3, [pc, #36]	; (d528c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5268:	4c09      	ldr	r4, [pc, #36]	; (d5290 <_GLOBAL__sub_I_System+0x2c>)
   d526a:	2202      	movs	r2, #2
   d526c:	2000      	movs	r0, #0
   d526e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5270:	4b08      	ldr	r3, [pc, #32]	; (d5294 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5272:	6020      	str	r0, [r4, #0]
   d5274:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5276:	71a0      	strb	r0, [r4, #6]
   d5278:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d527a:	f7ff f8ef 	bl	d445c <set_system_mode>
SystemClass System;
   d527e:	4620      	mov	r0, r4
   d5280:	4a05      	ldr	r2, [pc, #20]	; (d5298 <_GLOBAL__sub_I_System+0x34>)
   d5282:	4906      	ldr	r1, [pc, #24]	; (d529c <_GLOBAL__sub_I_System+0x38>)
   d5284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5288:	f000 ba68 	b.w	d575c <__aeabi_atexit>
   d528c:	2003e780 	.word	0x2003e780
   d5290:	2003e774 	.word	0x2003e774
   d5294:	ffff0000 	.word	0xffff0000
   d5298:	2003e704 	.word	0x2003e704
   d529c:	000d5259 	.word	0x000d5259

000d52a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d52a0:	4b02      	ldr	r3, [pc, #8]	; (d52ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d52a2:	681a      	ldr	r2, [r3, #0]
   d52a4:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d52a6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d52a8:	4770      	bx	lr
   d52aa:	bf00      	nop
   d52ac:	2003e69c 	.word	0x2003e69c
   d52b0:	2003e784 	.word	0x2003e784

000d52b4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d52b4:	4770      	bx	lr

000d52b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52b6:	7441      	strb	r1, [r0, #17]
}
   d52b8:	4770      	bx	lr

000d52ba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d52ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d52bc:	7c00      	ldrb	r0, [r0, #16]
   d52be:	f7ff f88d 	bl	d43dc <hal_usart_available_data_for_write>
}
   d52c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52c6:	bd08      	pop	{r3, pc}

000d52c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d52c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d52ca:	7c00      	ldrb	r0, [r0, #16]
   d52cc:	f7ff f85e 	bl	d438c <hal_usart_available>
}
   d52d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52d4:	bd08      	pop	{r3, pc}

000d52d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d52d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d52d8:	7c00      	ldrb	r0, [r0, #16]
   d52da:	f7ff f867 	bl	d43ac <hal_usart_peek>
}
   d52de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52e2:	bd08      	pop	{r3, pc}

000d52e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d52e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d52e6:	7c00      	ldrb	r0, [r0, #16]
   d52e8:	f7ff f858 	bl	d439c <hal_usart_read>
}
   d52ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52f0:	bd08      	pop	{r3, pc}

000d52f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d52f2:	7c00      	ldrb	r0, [r0, #16]
   d52f4:	f7ff b862 	b.w	d43bc <hal_usart_flush>

000d52f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d52f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52fa:	7c45      	ldrb	r5, [r0, #17]
{
   d52fc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d52fe:	b12d      	cbz	r5, d530c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5300:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5302:	b003      	add	sp, #12
   d5304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5308:	f7ff b838 	b.w	d437c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d530c:	7c00      	ldrb	r0, [r0, #16]
   d530e:	9101      	str	r1, [sp, #4]
   d5310:	f7ff f864 	bl	d43dc <hal_usart_available_data_for_write>
   d5314:	2800      	cmp	r0, #0
   d5316:	9901      	ldr	r1, [sp, #4]
   d5318:	dcf2      	bgt.n	d5300 <_ZN11USARTSerial5writeEh+0x8>
}
   d531a:	4628      	mov	r0, r5
   d531c:	b003      	add	sp, #12
   d531e:	bd30      	pop	{r4, r5, pc}

000d5320 <_ZN11USARTSerialD0Ev>:
   d5320:	b510      	push	{r4, lr}
   d5322:	2114      	movs	r1, #20
   d5324:	4604      	mov	r4, r0
   d5326:	f000 fa1e 	bl	d5766 <_ZdlPvj>
   d532a:	4620      	mov	r0, r4
   d532c:	bd10      	pop	{r4, pc}
	...

000d5330 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5330:	b510      	push	{r4, lr}
   d5332:	f04f 0c00 	mov.w	ip, #0
   d5336:	4604      	mov	r4, r0
   d5338:	4608      	mov	r0, r1
   d533a:	4611      	mov	r1, r2
   d533c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5340:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5344:	4a04      	ldr	r2, [pc, #16]	; (d5358 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5346:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5348:	2201      	movs	r2, #1
  _serial = serial;
   d534a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d534c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d534e:	461a      	mov	r2, r3
   d5350:	f7ff f80c 	bl	d436c <hal_usart_init>
}
   d5354:	4620      	mov	r0, r4
   d5356:	bd10      	pop	{r4, pc}
   d5358:	000d5a18 	.word	0x000d5a18

000d535c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d535c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d535e:	4c1b      	ldr	r4, [pc, #108]	; (d53cc <_Z22__fetch_global_Serial1v+0x70>)
   d5360:	6826      	ldr	r6, [r4, #0]
   d5362:	b94e      	cbnz	r6, d5378 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d5364:	2084      	movs	r0, #132	; 0x84
   d5366:	f7fe fe94 	bl	d4092 <_Znwj>
   d536a:	4605      	mov	r5, r0
   d536c:	b118      	cbz	r0, d5376 <_Z22__fetch_global_Serial1v+0x1a>
   d536e:	2284      	movs	r2, #132	; 0x84
   d5370:	4631      	mov	r1, r6
   d5372:	f000 fa1b 	bl	d57ac <memset>
   d5376:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5378:	4d15      	ldr	r5, [pc, #84]	; (d53d0 <_Z22__fetch_global_Serial1v+0x74>)
   d537a:	682f      	ldr	r7, [r5, #0]
   d537c:	b94f      	cbnz	r7, d5392 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d537e:	2084      	movs	r0, #132	; 0x84
   d5380:	f7fe fe87 	bl	d4092 <_Znwj>
   d5384:	4606      	mov	r6, r0
   d5386:	b118      	cbz	r0, d5390 <_Z22__fetch_global_Serial1v+0x34>
   d5388:	2284      	movs	r2, #132	; 0x84
   d538a:	4639      	mov	r1, r7
   d538c:	f000 fa0e 	bl	d57ac <memset>
   d5390:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5392:	4e10      	ldr	r6, [pc, #64]	; (d53d4 <_Z22__fetch_global_Serial1v+0x78>)
   d5394:	7831      	ldrb	r1, [r6, #0]
   d5396:	f3bf 8f5b 	dmb	ish
   d539a:	f011 0101 	ands.w	r1, r1, #1
   d539e:	d112      	bne.n	d53c6 <_Z22__fetch_global_Serial1v+0x6a>
   d53a0:	4630      	mov	r0, r6
   d53a2:	9101      	str	r1, [sp, #4]
   d53a4:	f7fe fe7b 	bl	d409e <__cxa_guard_acquire>
   d53a8:	9901      	ldr	r1, [sp, #4]
   d53aa:	b160      	cbz	r0, d53c6 <_Z22__fetch_global_Serial1v+0x6a>
   d53ac:	6822      	ldr	r2, [r4, #0]
   d53ae:	682b      	ldr	r3, [r5, #0]
   d53b0:	4809      	ldr	r0, [pc, #36]	; (d53d8 <_Z22__fetch_global_Serial1v+0x7c>)
   d53b2:	f7ff ffbd 	bl	d5330 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d53b6:	4630      	mov	r0, r6
   d53b8:	f7fe fe76 	bl	d40a8 <__cxa_guard_release>
   d53bc:	4a07      	ldr	r2, [pc, #28]	; (d53dc <_Z22__fetch_global_Serial1v+0x80>)
   d53be:	4908      	ldr	r1, [pc, #32]	; (d53e0 <_Z22__fetch_global_Serial1v+0x84>)
   d53c0:	4805      	ldr	r0, [pc, #20]	; (d53d8 <_Z22__fetch_global_Serial1v+0x7c>)
   d53c2:	f000 f9cb 	bl	d575c <__aeabi_atexit>
#endif
	return serial1;
}
   d53c6:	4804      	ldr	r0, [pc, #16]	; (d53d8 <_Z22__fetch_global_Serial1v+0x7c>)
   d53c8:	b003      	add	sp, #12
   d53ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53cc:	2003e78c 	.word	0x2003e78c
   d53d0:	2003e790 	.word	0x2003e790
   d53d4:	2003e788 	.word	0x2003e788
   d53d8:	2003e794 	.word	0x2003e794
   d53dc:	2003e704 	.word	0x2003e704
   d53e0:	000d52b5 	.word	0x000d52b5

000d53e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d53e4:	7441      	strb	r1, [r0, #17]
}
   d53e6:	4770      	bx	lr

000d53e8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d53e8:	4770      	bx	lr

000d53ea <_ZN9USBSerial4readEv>:
{
   d53ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d53ec:	2100      	movs	r1, #0
   d53ee:	7c00      	ldrb	r0, [r0, #16]
   d53f0:	f7ff f81c 	bl	d442c <HAL_USB_USART_Receive_Data>
}
   d53f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53f8:	bd08      	pop	{r3, pc}

000d53fa <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d53fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d53fc:	2101      	movs	r1, #1
   d53fe:	7c00      	ldrb	r0, [r0, #16]
   d5400:	f7ff f814 	bl	d442c <HAL_USB_USART_Receive_Data>
}
   d5404:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5408:	bd08      	pop	{r3, pc}

000d540a <_ZN9USBSerial17availableForWriteEv>:
{
   d540a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d540c:	7c00      	ldrb	r0, [r0, #16]
   d540e:	f7ff f805 	bl	d441c <HAL_USB_USART_Available_Data_For_Write>
}
   d5412:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5416:	bd08      	pop	{r3, pc}

000d5418 <_ZN9USBSerial9availableEv>:
{
   d5418:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d541a:	7c00      	ldrb	r0, [r0, #16]
   d541c:	f7fe fff6 	bl	d440c <HAL_USB_USART_Available_Data>
}
   d5420:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5424:	bd08      	pop	{r3, pc}

000d5426 <_ZN9USBSerial5writeEh>:
{
   d5426:	b513      	push	{r0, r1, r4, lr}
   d5428:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d542a:	7c00      	ldrb	r0, [r0, #16]
{
   d542c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d542e:	f7fe fff5 	bl	d441c <HAL_USB_USART_Available_Data_For_Write>
   d5432:	2800      	cmp	r0, #0
   d5434:	9901      	ldr	r1, [sp, #4]
   d5436:	dc01      	bgt.n	d543c <_ZN9USBSerial5writeEh+0x16>
   d5438:	7c60      	ldrb	r0, [r4, #17]
   d543a:	b120      	cbz	r0, d5446 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d543c:	7c20      	ldrb	r0, [r4, #16]
   d543e:	f7fe fffd 	bl	d443c <HAL_USB_USART_Send_Data>
   d5442:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5446:	b002      	add	sp, #8
   d5448:	bd10      	pop	{r4, pc}

000d544a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d544a:	7c00      	ldrb	r0, [r0, #16]
   d544c:	f7fe bffe 	b.w	d444c <HAL_USB_USART_Flush_Data>

000d5450 <_ZN9USBSerialD0Ev>:
   d5450:	b510      	push	{r4, lr}
   d5452:	2114      	movs	r1, #20
   d5454:	4604      	mov	r4, r0
   d5456:	f000 f986 	bl	d5766 <_ZdlPvj>
   d545a:	4620      	mov	r0, r4
   d545c:	bd10      	pop	{r4, pc}
	...

000d5460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5460:	b510      	push	{r4, lr}
   d5462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5466:	4604      	mov	r4, r0
   d5468:	4608      	mov	r0, r1
   d546a:	2100      	movs	r1, #0
   d546c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5470:	4b04      	ldr	r3, [pc, #16]	; (d5484 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5472:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5474:	2301      	movs	r3, #1
  _serial = serial;
   d5476:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5478:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d547a:	4611      	mov	r1, r2
   d547c:	f7fe ffb6 	bl	d43ec <HAL_USB_USART_Init>
}
   d5480:	4620      	mov	r0, r4
   d5482:	bd10      	pop	{r4, pc}
   d5484:	000d5a48 	.word	0x000d5a48

000d5488 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5488:	7c00      	ldrb	r0, [r0, #16]
   d548a:	2200      	movs	r2, #0
   d548c:	f7fe bfb6 	b.w	d43fc <HAL_USB_USART_Begin>

000d5490 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5490:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5492:	2214      	movs	r2, #20
{
   d5494:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5496:	2100      	movs	r1, #0
   d5498:	f000 f988 	bl	d57ac <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d549c:	4620      	mov	r0, r4
   d549e:	bd10      	pop	{r4, pc}

000d54a0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d54a0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54a2:	4c10      	ldr	r4, [pc, #64]	; (d54e4 <_Z16_fetch_usbserialv+0x44>)
{
   d54a4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d54a6:	a803      	add	r0, sp, #12
   d54a8:	f7ff fff2 	bl	d5490 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54ac:	7821      	ldrb	r1, [r4, #0]
   d54ae:	f3bf 8f5b 	dmb	ish
   d54b2:	f011 0101 	ands.w	r1, r1, #1
   d54b6:	d111      	bne.n	d54dc <_Z16_fetch_usbserialv+0x3c>
   d54b8:	4620      	mov	r0, r4
   d54ba:	9101      	str	r1, [sp, #4]
   d54bc:	f7fe fdef 	bl	d409e <__cxa_guard_acquire>
   d54c0:	9901      	ldr	r1, [sp, #4]
   d54c2:	b158      	cbz	r0, d54dc <_Z16_fetch_usbserialv+0x3c>
   d54c4:	aa03      	add	r2, sp, #12
   d54c6:	4808      	ldr	r0, [pc, #32]	; (d54e8 <_Z16_fetch_usbserialv+0x48>)
   d54c8:	f7ff ffca 	bl	d5460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d54cc:	4620      	mov	r0, r4
   d54ce:	f7fe fdeb 	bl	d40a8 <__cxa_guard_release>
   d54d2:	4a06      	ldr	r2, [pc, #24]	; (d54ec <_Z16_fetch_usbserialv+0x4c>)
   d54d4:	4906      	ldr	r1, [pc, #24]	; (d54f0 <_Z16_fetch_usbserialv+0x50>)
   d54d6:	4804      	ldr	r0, [pc, #16]	; (d54e8 <_Z16_fetch_usbserialv+0x48>)
   d54d8:	f000 f940 	bl	d575c <__aeabi_atexit>
	return _usbserial;
}
   d54dc:	4802      	ldr	r0, [pc, #8]	; (d54e8 <_Z16_fetch_usbserialv+0x48>)
   d54de:	b008      	add	sp, #32
   d54e0:	bd10      	pop	{r4, pc}
   d54e2:	bf00      	nop
   d54e4:	2003e7a8 	.word	0x2003e7a8
   d54e8:	2003e7ac 	.word	0x2003e7ac
   d54ec:	2003e704 	.word	0x2003e704
   d54f0:	000d53e9 	.word	0x000d53e9

000d54f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d54f4:	4b01      	ldr	r3, [pc, #4]	; (d54fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d54f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d54f8:	4770      	bx	lr
   d54fa:	bf00      	nop
   d54fc:	2003e6a0 	.word	0x2003e6a0

000d5500 <serialEventRun>:
{
   d5500:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5502:	4b0b      	ldr	r3, [pc, #44]	; (d5530 <serialEventRun+0x30>)
   d5504:	b143      	cbz	r3, d5518 <serialEventRun+0x18>
   d5506:	f7ff ffcb 	bl	d54a0 <_Z16_fetch_usbserialv>
   d550a:	6803      	ldr	r3, [r0, #0]
   d550c:	691b      	ldr	r3, [r3, #16]
   d550e:	4798      	blx	r3
   d5510:	2800      	cmp	r0, #0
   d5512:	dd01      	ble.n	d5518 <serialEventRun+0x18>
        serialEvent();
   d5514:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5518:	4b06      	ldr	r3, [pc, #24]	; (d5534 <serialEventRun+0x34>)
   d551a:	b143      	cbz	r3, d552e <serialEventRun+0x2e>
   d551c:	f7ff ff1e 	bl	d535c <_Z22__fetch_global_Serial1v>
   d5520:	6803      	ldr	r3, [r0, #0]
   d5522:	691b      	ldr	r3, [r3, #16]
   d5524:	4798      	blx	r3
   d5526:	2800      	cmp	r0, #0
   d5528:	dd01      	ble.n	d552e <serialEventRun+0x2e>
        serialEvent1();
   d552a:	f3af 8000 	nop.w
}
   d552e:	bd08      	pop	{r3, pc}
	...

000d5538 <_post_loop>:
{
   d5538:	b508      	push	{r3, lr}
	serialEventRun();
   d553a:	f7ff ffe1 	bl	d5500 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d553e:	f7fe fe95 	bl	d426c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5542:	4b01      	ldr	r3, [pc, #4]	; (d5548 <_post_loop+0x10>)
   d5544:	6018      	str	r0, [r3, #0]
}
   d5546:	bd08      	pop	{r3, pc}
   d5548:	2003e7d4 	.word	0x2003e7d4

000d554c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d554c:	4802      	ldr	r0, [pc, #8]	; (d5558 <_Z33system_initialize_user_backup_ramv+0xc>)
   d554e:	4a03      	ldr	r2, [pc, #12]	; (d555c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5550:	4903      	ldr	r1, [pc, #12]	; (d5560 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5552:	1a12      	subs	r2, r2, r0
   d5554:	f000 b91c 	b.w	d5790 <memcpy>
   d5558:	2003f400 	.word	0x2003f400
   d555c:	2003f404 	.word	0x2003f404
   d5560:	000d5aa0 	.word	0x000d5aa0

000d5564 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5564:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5566:	2300      	movs	r3, #0
   d5568:	9300      	str	r3, [sp, #0]
   d556a:	461a      	mov	r2, r3
   d556c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5570:	f7fe ff9e 	bl	d44b0 <system_ctrl_set_result>
}
   d5574:	b003      	add	sp, #12
   d5576:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d557c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d557c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d557e:	8843      	ldrh	r3, [r0, #2]
   d5580:	2b0a      	cmp	r3, #10
   d5582:	d008      	beq.n	d5596 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5584:	2b50      	cmp	r3, #80	; 0x50
   d5586:	d10b      	bne.n	d55a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5588:	4b09      	ldr	r3, [pc, #36]	; (d55b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d558a:	681b      	ldr	r3, [r3, #0]
   d558c:	b14b      	cbz	r3, d55a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d558e:	b003      	add	sp, #12
   d5590:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5594:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5596:	f7ff ffe5 	bl	d5564 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d559a:	b003      	add	sp, #12
   d559c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55a0:	2300      	movs	r3, #0
   d55a2:	9300      	str	r3, [sp, #0]
   d55a4:	461a      	mov	r2, r3
   d55a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55aa:	f7fe ff81 	bl	d44b0 <system_ctrl_set_result>
}
   d55ae:	e7f4      	b.n	d559a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d55b0:	2003e7c4 	.word	0x2003e7c4

000d55b4 <module_user_init_hook>:
{
   d55b4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d55b6:	4c12      	ldr	r4, [pc, #72]	; (d5600 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d55b8:	4812      	ldr	r0, [pc, #72]	; (d5604 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d55ba:	4d13      	ldr	r5, [pc, #76]	; (d5608 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d55bc:	2100      	movs	r1, #0
   d55be:	f7ff f829 	bl	d4614 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d55c2:	6823      	ldr	r3, [r4, #0]
   d55c4:	42ab      	cmp	r3, r5
   d55c6:	4b11      	ldr	r3, [pc, #68]	; (d560c <module_user_init_hook+0x58>)
   d55c8:	bf0c      	ite	eq
   d55ca:	2201      	moveq	r2, #1
   d55cc:	2200      	movne	r2, #0
   d55ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d55d0:	d002      	beq.n	d55d8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d55d2:	f7ff ffbb 	bl	d554c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d55d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d55d8:	f7fe fe40 	bl	d425c <HAL_RNG_GetRandomNumber>
   d55dc:	4604      	mov	r4, r0
    srand(seed);
   d55de:	f000 f8ed 	bl	d57bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d55e2:	4b0b      	ldr	r3, [pc, #44]	; (d5610 <module_user_init_hook+0x5c>)
   d55e4:	b113      	cbz	r3, d55ec <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d55e6:	4620      	mov	r0, r4
   d55e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d55ec:	2100      	movs	r1, #0
   d55ee:	4808      	ldr	r0, [pc, #32]	; (d5610 <module_user_init_hook+0x5c>)
   d55f0:	f7fe ff80 	bl	d44f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d55f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d55f8:	4806      	ldr	r0, [pc, #24]	; (d5614 <module_user_init_hook+0x60>)
   d55fa:	2100      	movs	r1, #0
   d55fc:	f7fe bf4e 	b.w	d449c <system_ctrl_set_app_request_handler>
   d5600:	2003f400 	.word	0x2003f400
   d5604:	000d54f5 	.word	0x000d54f5
   d5608:	9a271c1e 	.word	0x9a271c1e
   d560c:	2003e7c0 	.word	0x2003e7c0
   d5610:	00000000 	.word	0x00000000
   d5614:	000d557d 	.word	0x000d557d

000d5618 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5618:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   d561a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d561c:	d902      	bls.n	d5624 <pinAvailable+0xc>
    return false;
   d561e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5620:	b002      	add	sp, #8
   d5622:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5624:	f1a0 030b 	sub.w	r3, r0, #11
   d5628:	2b02      	cmp	r3, #2
   d562a:	d81a      	bhi.n	d5662 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d562c:	4c17      	ldr	r4, [pc, #92]	; (d568c <pinAvailable+0x74>)
   d562e:	7821      	ldrb	r1, [r4, #0]
   d5630:	f3bf 8f5b 	dmb	ish
   d5634:	f011 0101 	ands.w	r1, r1, #1
   d5638:	d10b      	bne.n	d5652 <pinAvailable+0x3a>
   d563a:	4620      	mov	r0, r4
   d563c:	9101      	str	r1, [sp, #4]
   d563e:	f7fe fd2e 	bl	d409e <__cxa_guard_acquire>
   d5642:	9901      	ldr	r1, [sp, #4]
   d5644:	b128      	cbz	r0, d5652 <pinAvailable+0x3a>
   d5646:	4812      	ldr	r0, [pc, #72]	; (d5690 <pinAvailable+0x78>)
   d5648:	f7ff fd68 	bl	d511c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d564c:	4620      	mov	r0, r4
   d564e:	f7fe fd2b 	bl	d40a8 <__cxa_guard_release>
   d5652:	4b0f      	ldr	r3, [pc, #60]	; (d5690 <pinAvailable+0x78>)
   d5654:	7818      	ldrb	r0, [r3, #0]
   d5656:	f7fe fe81 	bl	d435c <hal_spi_is_enabled>
   d565a:	2800      	cmp	r0, #0
   d565c:	d1df      	bne.n	d561e <pinAvailable+0x6>
  return true; // 'pin' is available
   d565e:	2001      	movs	r0, #1
   d5660:	e7de      	b.n	d5620 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5662:	2801      	cmp	r0, #1
   d5664:	d809      	bhi.n	d567a <pinAvailable+0x62>
   d5666:	f000 f851 	bl	d570c <_Z19__fetch_global_Wirev>
   d566a:	2100      	movs	r1, #0
   d566c:	7c00      	ldrb	r0, [r0, #16]
   d566e:	f7fe fe45 	bl	d42fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5672:	f080 0001 	eor.w	r0, r0, #1
   d5676:	b2c0      	uxtb	r0, r0
   d5678:	e7d2      	b.n	d5620 <pinAvailable+0x8>
   d567a:	3809      	subs	r0, #9
   d567c:	2801      	cmp	r0, #1
   d567e:	d8ee      	bhi.n	d565e <pinAvailable+0x46>
   d5680:	f7ff fe6c 	bl	d535c <_Z22__fetch_global_Serial1v>
   d5684:	7c00      	ldrb	r0, [r0, #16]
   d5686:	f7fe fea1 	bl	d43cc <hal_usart_is_enabled>
   d568a:	e7f2      	b.n	d5672 <pinAvailable+0x5a>
   d568c:	2003e7c8 	.word	0x2003e7c8
   d5690:	2003e7cc 	.word	0x2003e7cc

000d5694 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5694:	2825      	cmp	r0, #37	; 0x25
{
   d5696:	b538      	push	{r3, r4, r5, lr}
   d5698:	4604      	mov	r4, r0
   d569a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d569c:	d80a      	bhi.n	d56b4 <pinMode+0x20>
   d569e:	29ff      	cmp	r1, #255	; 0xff
   d56a0:	d008      	beq.n	d56b4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d56a2:	f7ff ffb9 	bl	d5618 <pinAvailable>
   d56a6:	b128      	cbz	r0, d56b4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d56a8:	4629      	mov	r1, r5
   d56aa:	4620      	mov	r0, r4
}
   d56ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d56b0:	f7fe bde4 	b.w	d427c <HAL_Pin_Mode>
}
   d56b4:	bd38      	pop	{r3, r4, r5, pc}

000d56b6 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d56b6:	b510      	push	{r4, lr}
   d56b8:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d56ba:	f7fe fde7 	bl	d428c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d56be:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d56c0:	b2db      	uxtb	r3, r3
   d56c2:	2b01      	cmp	r3, #1
   d56c4:	d908      	bls.n	d56d8 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d56c6:	4620      	mov	r0, r4
   d56c8:	f7ff ffa6 	bl	d5618 <pinAvailable>
   d56cc:	b120      	cbz	r0, d56d8 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d56ce:	4620      	mov	r0, r4
}
   d56d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d56d4:	f7fe bde2 	b.w	d429c <HAL_GPIO_Read>
}
   d56d8:	2000      	movs	r0, #0
   d56da:	bd10      	pop	{r4, pc}

000d56dc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d56dc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d56de:	2300      	movs	r3, #0
   d56e0:	2520      	movs	r5, #32
   d56e2:	8043      	strh	r3, [r0, #2]
   d56e4:	2314      	movs	r3, #20
{
   d56e6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d56e8:	8003      	strh	r3, [r0, #0]
   d56ea:	6085      	str	r5, [r0, #8]
   d56ec:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56ee:	4906      	ldr	r1, [pc, #24]	; (d5708 <_Z17acquireWireBufferv+0x2c>)
   d56f0:	4628      	mov	r0, r5
   d56f2:	f000 f83a 	bl	d576a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56f6:	4904      	ldr	r1, [pc, #16]	; (d5708 <_Z17acquireWireBufferv+0x2c>)
	};
   d56f8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56fa:	4628      	mov	r0, r5
   d56fc:	f000 f835 	bl	d576a <_ZnajRKSt9nothrow_t>
	};
   d5700:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5702:	4620      	mov	r0, r4
   d5704:	bd38      	pop	{r3, r4, r5, pc}
   d5706:	bf00      	nop
   d5708:	000d5a70 	.word	0x000d5a70

000d570c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d570c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d570e:	4d0f      	ldr	r5, [pc, #60]	; (d574c <_Z19__fetch_global_Wirev+0x40>)
   d5710:	7829      	ldrb	r1, [r5, #0]
   d5712:	f3bf 8f5b 	dmb	ish
   d5716:	f011 0401 	ands.w	r4, r1, #1
{
   d571a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d571c:	d113      	bne.n	d5746 <_Z19__fetch_global_Wirev+0x3a>
   d571e:	4628      	mov	r0, r5
   d5720:	f7fe fcbd 	bl	d409e <__cxa_guard_acquire>
   d5724:	b178      	cbz	r0, d5746 <_Z19__fetch_global_Wirev+0x3a>
   d5726:	a801      	add	r0, sp, #4
   d5728:	f7ff ffd8 	bl	d56dc <_Z17acquireWireBufferv>
   d572c:	aa01      	add	r2, sp, #4
   d572e:	4621      	mov	r1, r4
   d5730:	4807      	ldr	r0, [pc, #28]	; (d5750 <_Z19__fetch_global_Wirev+0x44>)
   d5732:	f7ff fb43 	bl	d4dbc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5736:	4628      	mov	r0, r5
   d5738:	f7fe fcb6 	bl	d40a8 <__cxa_guard_release>
   d573c:	4a05      	ldr	r2, [pc, #20]	; (d5754 <_Z19__fetch_global_Wirev+0x48>)
   d573e:	4906      	ldr	r1, [pc, #24]	; (d5758 <_Z19__fetch_global_Wirev+0x4c>)
   d5740:	4803      	ldr	r0, [pc, #12]	; (d5750 <_Z19__fetch_global_Wirev+0x44>)
   d5742:	f000 f80b 	bl	d575c <__aeabi_atexit>
	return wire;
}
   d5746:	4802      	ldr	r0, [pc, #8]	; (d5750 <_Z19__fetch_global_Wirev+0x44>)
   d5748:	b007      	add	sp, #28
   d574a:	bd30      	pop	{r4, r5, pc}
   d574c:	2003e7d8 	.word	0x2003e7d8
   d5750:	2003e7dc 	.word	0x2003e7dc
   d5754:	2003e704 	.word	0x2003e704
   d5758:	000d4d65 	.word	0x000d4d65

000d575c <__aeabi_atexit>:
   d575c:	460b      	mov	r3, r1
   d575e:	4601      	mov	r1, r0
   d5760:	4618      	mov	r0, r3
   d5762:	f000 b807 	b.w	d5774 <__cxa_atexit>

000d5766 <_ZdlPvj>:
   d5766:	f7fe bc98 	b.w	d409a <_ZdlPv>

000d576a <_ZnajRKSt9nothrow_t>:
   d576a:	f7fe bc94 	b.w	d4096 <_Znaj>

000d576e <_ZSt25__throw_bad_function_callv>:
   d576e:	b508      	push	{r3, lr}
   d5770:	f7fe ff40 	bl	d45f4 <abort>

000d5774 <__cxa_atexit>:
   d5774:	b510      	push	{r4, lr}
   d5776:	4c05      	ldr	r4, [pc, #20]	; (d578c <__cxa_atexit+0x18>)
   d5778:	4613      	mov	r3, r2
   d577a:	b12c      	cbz	r4, d5788 <__cxa_atexit+0x14>
   d577c:	460a      	mov	r2, r1
   d577e:	4601      	mov	r1, r0
   d5780:	2002      	movs	r0, #2
   d5782:	f3af 8000 	nop.w
   d5786:	bd10      	pop	{r4, pc}
   d5788:	4620      	mov	r0, r4
   d578a:	e7fc      	b.n	d5786 <__cxa_atexit+0x12>
   d578c:	00000000 	.word	0x00000000

000d5790 <memcpy>:
   d5790:	440a      	add	r2, r1
   d5792:	4291      	cmp	r1, r2
   d5794:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d5798:	d100      	bne.n	d579c <memcpy+0xc>
   d579a:	4770      	bx	lr
   d579c:	b510      	push	{r4, lr}
   d579e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d57a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d57a6:	4291      	cmp	r1, r2
   d57a8:	d1f9      	bne.n	d579e <memcpy+0xe>
   d57aa:	bd10      	pop	{r4, pc}

000d57ac <memset>:
   d57ac:	4402      	add	r2, r0
   d57ae:	4603      	mov	r3, r0
   d57b0:	4293      	cmp	r3, r2
   d57b2:	d100      	bne.n	d57b6 <memset+0xa>
   d57b4:	4770      	bx	lr
   d57b6:	f803 1b01 	strb.w	r1, [r3], #1
   d57ba:	e7f9      	b.n	d57b0 <memset+0x4>

000d57bc <srand>:
   d57bc:	b538      	push	{r3, r4, r5, lr}
   d57be:	4b0d      	ldr	r3, [pc, #52]	; (d57f4 <srand+0x38>)
   d57c0:	681d      	ldr	r5, [r3, #0]
   d57c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d57c4:	4604      	mov	r4, r0
   d57c6:	b97b      	cbnz	r3, d57e8 <srand+0x2c>
   d57c8:	2018      	movs	r0, #24
   d57ca:	f7fe fefb 	bl	d45c4 <malloc>
   d57ce:	4a0a      	ldr	r2, [pc, #40]	; (d57f8 <srand+0x3c>)
   d57d0:	4b0a      	ldr	r3, [pc, #40]	; (d57fc <srand+0x40>)
   d57d2:	63a8      	str	r0, [r5, #56]	; 0x38
   d57d4:	e9c0 2300 	strd	r2, r3, [r0]
   d57d8:	4b09      	ldr	r3, [pc, #36]	; (d5800 <srand+0x44>)
   d57da:	6083      	str	r3, [r0, #8]
   d57dc:	230b      	movs	r3, #11
   d57de:	8183      	strh	r3, [r0, #12]
   d57e0:	2201      	movs	r2, #1
   d57e2:	2300      	movs	r3, #0
   d57e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d57e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d57ea:	2200      	movs	r2, #0
   d57ec:	611c      	str	r4, [r3, #16]
   d57ee:	615a      	str	r2, [r3, #20]
   d57f0:	bd38      	pop	{r3, r4, r5, pc}
   d57f2:	bf00      	nop
   d57f4:	2003e6a0 	.word	0x2003e6a0
   d57f8:	abcd330e 	.word	0xabcd330e
   d57fc:	e66d1234 	.word	0xe66d1234
   d5800:	0005deec 	.word	0x0005deec

000d5804 <strcmp>:
   d5804:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5808:	f811 3b01 	ldrb.w	r3, [r1], #1
   d580c:	2a01      	cmp	r2, #1
   d580e:	bf28      	it	cs
   d5810:	429a      	cmpcs	r2, r3
   d5812:	d0f7      	beq.n	d5804 <strcmp>
   d5814:	1ad0      	subs	r0, r2, r3
   d5816:	4770      	bx	lr

000d5818 <strdup>:
   d5818:	4b02      	ldr	r3, [pc, #8]	; (d5824 <strdup+0xc>)
   d581a:	4601      	mov	r1, r0
   d581c:	6818      	ldr	r0, [r3, #0]
   d581e:	f000 b803 	b.w	d5828 <_strdup_r>
   d5822:	bf00      	nop
   d5824:	2003e6a0 	.word	0x2003e6a0

000d5828 <_strdup_r>:
   d5828:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d582a:	4604      	mov	r4, r0
   d582c:	4608      	mov	r0, r1
   d582e:	460d      	mov	r5, r1
   d5830:	f000 f80f 	bl	d5852 <strlen>
   d5834:	1c42      	adds	r2, r0, #1
   d5836:	4611      	mov	r1, r2
   d5838:	4620      	mov	r0, r4
   d583a:	9201      	str	r2, [sp, #4]
   d583c:	f7fe fee2 	bl	d4604 <_malloc_r>
   d5840:	4604      	mov	r4, r0
   d5842:	b118      	cbz	r0, d584c <_strdup_r+0x24>
   d5844:	9a01      	ldr	r2, [sp, #4]
   d5846:	4629      	mov	r1, r5
   d5848:	f7ff ffa2 	bl	d5790 <memcpy>
   d584c:	4620      	mov	r0, r4
   d584e:	b003      	add	sp, #12
   d5850:	bd30      	pop	{r4, r5, pc}

000d5852 <strlen>:
   d5852:	4603      	mov	r3, r0
   d5854:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5858:	2a00      	cmp	r2, #0
   d585a:	d1fb      	bne.n	d5854 <strlen+0x2>
   d585c:	1a18      	subs	r0, r3, r0
   d585e:	3801      	subs	r0, #1
   d5860:	4770      	bx	lr

000d5862 <link_code_end>:
	...

000d5864 <dynalib_user>:
   d5864:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5874:	0000 0000 6f63 6666 6565 2d00 2d2d 6874     ....coffee.---th
   d5884:	2065 7566 636e 6974 6e6f 7720 726f 656b     e function worke
   d5894:	2164 2d2d 002d 7262 7765 4d00 746f 6f69     d!---.brew.Motio
   d58a4:	206e 6564 6574 7463 6465 0021 0031 004d     n detected!.1.M.
   d58b4:	6f4d 6974 6e6f 7320 6f74 7070 6465 0021     Motion stopped!.
   d58c4:	6f4e 6d20 746f 6f69 206e 6f66 2072 3831     No motion for 18
   d58d4:	2030 6573 6f63 646e 2173 3000 0000 0000     0 seconds!.0....

000d58e4 <_ZTVN5spark13CellularClassE>:
	...
   d58ec:	46f3 000d 46e9 000d 46df 000d 4695 000d     .F...F...F...F..
   d58fc:	46d3 000d 46c7 000d 4f15 000d 4f1d 000d     .F...F...O...O..
   d590c:	46bb 000d 46b3 000d 46a9 000d 469f 000d     .F...F...F...F..
   d591c:	4f4d 000d                                   MO..

000d5920 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5928:	472d 000d 4733 000d 4783 000d 4741 000d     -G..3G...G..AG..
   d5938:	472f 000d                                   /G..

000d593c <_ZTVN5spark13EthernetClassE>:
	...
   d5944:	4d47 000d 4d3d 000d 4d33 000d 4d29 000d     GM..=M..3M..)M..
   d5954:	4d1d 000d 4d11 000d 4f15 000d 4f1d 000d     .M...M...O...O..
   d5964:	4d05 000d 4cfd 000d 4cf3 000d 4ce9 000d     .M...L...L...L..
   d5974:	4f4d 000d                                   MO..

000d5978 <_ZTV7TwoWire>:
	...
   d5980:	4d65 000d 4daf 000d 4d87 000d 4d67 000d     eM...M...M..gM..
   d5990:	4d8f 000d 4d97 000d 4d9f 000d 4da7 000d     .M...M...M...M..

000d59a0 <_ZTV9IPAddress>:
	...
   d59a8:	4df1 000d 4de1 000d 4de3 000d 7061 0070     .M...M...M..app.

000d59b8 <_ZTVN5spark12NetworkClassE>:
	...
   d59c0:	4ed5 000d 4edf 000d 4ee9 000d 4ef3 000d     .N...N...N...N..
   d59d0:	4efd 000d 4f09 000d 4f15 000d 4f1d 000d     .N...O...O...O..
   d59e0:	4f25 000d 4f31 000d 4f39 000d 4f43 000d     %O..1O..9O..CO..
   d59f0:	4f4d 000d 5925 252d 2d6d 6425 2554 3a48     MO..%Y-%m-%dT%H:
   d5a00:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d5a10 <_ZTV11USARTSerial>:
	...
   d5a18:	52b5 000d 5321 000d 52f9 000d 5035 000d     .R..!S...R..5P..
   d5a28:	52c9 000d 52e5 000d 52d7 000d 52f3 000d     .R...R...R...R..
   d5a38:	52b7 000d 52bb 000d                         .R...R..

000d5a40 <_ZTV9USBSerial>:
	...
   d5a48:	53e9 000d 5451 000d 5427 000d 5035 000d     .S..QT..'T..5P..
   d5a58:	5419 000d 53eb 000d 53fb 000d 544b 000d     .T...S...S..KT..
   d5a68:	540b 000d 53e5 000d                         .T...S..

000d5a70 <_ZSt7nothrow>:
	...

000d5a71 <link_const_variable_data_end>:
   d5a71:	00          	.byte	0x00
	...

000d5a74 <link_constructors_location>:
   d5a74:	000d422d 	.word	0x000d422d
   d5a78:	000d466d 	.word	0x000d466d
   d5a7c:	000d46fd 	.word	0x000d46fd
   d5a80:	000d4d51 	.word	0x000d4d51
   d5a84:	000d4ec5 	.word	0x000d4ec5
   d5a88:	000d5021 	.word	0x000d5021
   d5a8c:	000d5101 	.word	0x000d5101
   d5a90:	000d5265 	.word	0x000d5265
   d5a94:	000d52a1 	.word	0x000d52a1

000d5a98 <link_constructors_end>:
	...
